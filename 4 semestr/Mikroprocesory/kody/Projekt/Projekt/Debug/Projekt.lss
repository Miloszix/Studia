
Projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000608  0000069c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000608  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080010c  0080010c  000006a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e00  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a84  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000650  00000000  00000000  00001ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00002644  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058a  00000000  00000000  00002768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000501  00000000  00000000  00002cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000031f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_4>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 df 01 	jmp	0x3be	; 0x3be <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_27>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 e0       	ldi	r30, 0x08	; 8
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ac 30       	cpi	r26, 0x0C	; 12
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ac e0       	ldi	r26, 0x0C	; 12
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a5 31       	cpi	r26, 0x15	; 21
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 31 02 	call	0x462	; 0x462 <main>
  ea:	0c 94 02 03 	jmp	0x604	; 0x604 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <setup>:
	D0-6 segmenty PD7 D4
	PB silnik
    Ustawienie portów C0-2 i E jako wejœæ, B i D C3-8 jako wyjœæ 
    */
    
	DDRC = 0b11111000;
  f2:	88 ef       	ldi	r24, 0xF8	; 248
  f4:	87 b9       	out	0x07, r24	; 7
    PORTC = 0b00000111;	
  f6:	87 e0       	ldi	r24, 0x07	; 7
  f8:	88 b9       	out	0x08, r24	; 8
	DDRB = 0xff;
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xff;
  fe:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
 100:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0xff;
 102:	8e b9       	out	0x0e, r24	; 14
	PORTD = 0x00;
 104:	1b b8       	out	0x0b, r1	; 11
    
    lastStateCLK = PINC & (1 << 0);  //pocz¹tkowy stan CLK
 106:	86 b1       	in	r24, 0x06	; 6
 108:	81 70       	andi	r24, 0x01	; 1
 10a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <lastStateCLK>
    
    // Konfiguracja przerwañ
    PCICR |= (1 << PCIE1) | (1 << PCIE3); // W³¹czenie przerwañ dla pinów C i E
 10e:	e8 e6       	ldi	r30, 0x68	; 104
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	8a 60       	ori	r24, 0x0A	; 10
 116:	80 83       	st	Z, r24
    PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10); // W³¹czenie przerwañ dla PC0-2
 118:	ec e6       	ldi	r30, 0x6C	; 108
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	87 60       	ori	r24, 0x07	; 7
 120:	80 83       	st	Z, r24
	PCMSK3 |= (1 << PCINT24) | (1 << PCINT25) | (1 << PCINT26) | (1 << PCINT27); // W³¹czenie przerwañ dla PE0-3
 122:	e3 e7       	ldi	r30, 0x73	; 115
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	8f 60       	ori	r24, 0x0F	; 15
 12a:	80 83       	st	Z, r24
	
    // Ustawienie Timer0 w tryb CTC
    TCCR0A |= (1 << WGM01);
 12c:	84 b5       	in	r24, 0x24	; 36
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (1 << CS01) | (1 << CS00); // Ustawienie preskalera na 256
 132:	85 b5       	in	r24, 0x25	; 37
 134:	83 60       	ori	r24, 0x03	; 3
 136:	85 bd       	out	0x25, r24	; 37
    OCR0A = 249; //16000000/(64*1000) = 249 ustawienie wartoœci rejestru porównania
 138:	89 ef       	ldi	r24, 0xF9	; 249
 13a:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1 << OCIE0A); //w³¹cza przerwanie porównania
 13c:	ee e6       	ldi	r30, 0x6E	; 110
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	82 60       	ori	r24, 0x02	; 2
 144:	80 83       	st	Z, r24
 146:	08 95       	ret

00000148 <display_digit>:
	  ~(1 << 6) // -
};

void display_digit(uint8_t digit_value, uint8_t position) {
	// Wy³¹czenie cyfr
	PORTD |= (1 << 7);
 148:	9b b1       	in	r25, 0x0b	; 11
 14a:	90 68       	ori	r25, 0x80	; 128
 14c:	9b b9       	out	0x0b, r25	; 11
	PORTC = ((1 << 3) | (1 << 4) | (1 << 5));
 14e:	98 e3       	ldi	r25, 0x38	; 56
 150:	98 b9       	out	0x08, r25	; 8
	// ustawienie segmentów wed³ug powy¿szej konfiguracji
	PORTD = digit[digit_value];
 152:	e8 2f       	mov	r30, r24
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	e0 50       	subi	r30, 0x00	; 0
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	80 81       	ld	r24, Z
 15c:	8b b9       	out	0x0b, r24	; 11
	// selekcja odpowiedniej cyfry
	switch (position) {
 15e:	61 30       	cpi	r22, 0x01	; 1
 160:	49 f0       	breq	.+18     	; 0x174 <display_digit+0x2c>
 162:	28 f0       	brcs	.+10     	; 0x16e <display_digit+0x26>
 164:	62 30       	cpi	r22, 0x02	; 2
 166:	49 f0       	breq	.+18     	; 0x17a <display_digit+0x32>
 168:	63 30       	cpi	r22, 0x03	; 3
 16a:	51 f0       	breq	.+20     	; 0x180 <display_digit+0x38>
 16c:	08 95       	ret
		case 0:
		PORTC = ~(1 << 3);
 16e:	87 ef       	ldi	r24, 0xF7	; 247
 170:	88 b9       	out	0x08, r24	; 8
		break;
 172:	08 95       	ret
		
		case 1:
		PORTC = ~(1 << 4);
 174:	8f ee       	ldi	r24, 0xEF	; 239
 176:	88 b9       	out	0x08, r24	; 8
		break;
 178:	08 95       	ret
		
		case 2:
		PORTC = ~(1 << 5);
 17a:	8f ed       	ldi	r24, 0xDF	; 223
 17c:	88 b9       	out	0x08, r24	; 8
		break;
 17e:	08 95       	ret
		
		case 3:
		PORTD &= ~(1 << 7);
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	8f 77       	andi	r24, 0x7F	; 127
 184:	8b b9       	out	0x0b, r24	; 11
 186:	08 95       	ret

00000188 <display_number>:
		break;
	}
}

void display_number(int16_t number) {
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	00 d0       	rcall	.+0      	; 0x18e <display_number+0x6>
 18e:	00 d0       	rcall	.+0      	; 0x190 <display_number+0x8>
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
 194:	9c 01       	movw	r18, r24
	uint8_t digits[4];
	//warunek dla liczb dodatnich
	if (number>=0){                   
 196:	99 23       	and	r25, r25
 198:	2c f0       	brlt	.+10     	; 0x1a4 <display_number+0x1c>
		digits[0] = number / 1000;	
 19a:	68 ee       	ldi	r22, 0xE8	; 232
 19c:	73 e0       	ldi	r23, 0x03	; 3
 19e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__divmodhi4>
 1a2:	69 83       	std	Y+1, r22	; 0x01
	}
	//wyœwietlenie minusa dla ujemnych
	if (number<0){      
 1a4:	33 23       	and	r19, r19
 1a6:	2c f4       	brge	.+10     	; 0x1b2 <display_number+0x2a>
		digits[0] = 10;             
 1a8:	8a e0       	ldi	r24, 0x0A	; 10
 1aa:	89 83       	std	Y+1, r24	; 0x01
		number = -number;
 1ac:	31 95       	neg	r19
 1ae:	21 95       	neg	r18
 1b0:	31 09       	sbc	r19, r1
	}
	//reszty z dzielenia wyœwietlane jako cyfry
	digits[1] = (number / 100) % 10; 
 1b2:	c9 01       	movw	r24, r18
 1b4:	64 e6       	ldi	r22, 0x64	; 100
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__divmodhi4>
 1bc:	cb 01       	movw	r24, r22
 1be:	ea e0       	ldi	r30, 0x0A	; 10
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	bf 01       	movw	r22, r30
 1c4:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__divmodhi4>
 1c8:	8a 83       	std	Y+2, r24	; 0x02
	digits[2] = (number / 10) % 10;
 1ca:	c9 01       	movw	r24, r18
 1cc:	bf 01       	movw	r22, r30
 1ce:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__divmodhi4>
 1d2:	28 2f       	mov	r18, r24
 1d4:	cb 01       	movw	r24, r22
 1d6:	bf 01       	movw	r22, r30
 1d8:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__divmodhi4>
 1dc:	8b 83       	std	Y+3, r24	; 0x03
	digits[3] = number % 10;
 1de:	2c 83       	std	Y+4, r18	; 0x04

	display_digit(digits[position], position);
 1e0:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <__data_end>
 1e4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1e8:	e1 e0       	ldi	r30, 0x01	; 1
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	ec 0f       	add	r30, r28
 1ee:	fd 1f       	adc	r31, r29
 1f0:	e8 0f       	add	r30, r24
 1f2:	f1 1d       	adc	r31, r1
 1f4:	80 81       	ld	r24, Z
 1f6:	0e 94 a4 00 	call	0x148	; 0x148 <display_digit>
	
}
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <__vector_4>:

//przerwania na poruszenie enkodera
ISR(PCINT1_vect) {
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	2f 93       	push	r18
 214:	3f 93       	push	r19
 216:	4f 93       	push	r20
 218:	5f 93       	push	r21
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
    // Odczytaj bie¿¹cy stan CLK
    uint8_t currentStateCLK = PINC & (1 << 0);
 21e:	26 b1       	in	r18, 0x06	; 6
 220:	21 70       	andi	r18, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 222:	8f e8       	ldi	r24, 0x8F	; 143
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <__vector_4+0x1e>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <__vector_4+0x24>
 22c:	00 00       	nop
	_delay_us(DEBOUNCE_TIME); // zapobieganie glitchom podczas przekrêcania
	
	//przypadek dla programu 0 kiedy switch na enkoderze jest wciœniêty	
	if (((PINC&(1<<2))==0)&(state==0)){
 22e:	86 b1       	in	r24, 0x06	; 6
 230:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <state>
 234:	86 95       	lsr	r24
 236:	86 95       	lsr	r24
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	89 27       	eor	r24, r25
 23c:	81 70       	andi	r24, 0x01	; 1
 23e:	31 11       	cpse	r19, r1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	89 23       	and	r24, r25
 244:	69 f1       	breq	.+90     	; 0x2a0 <__vector_4+0x98>
		if (currentStateCLK != lastStateCLK) {     // Sprawdzenie czy zmieni³o siê CLK
 246:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <lastStateCLK>
 24a:	28 17       	cp	r18, r24
 24c:	09 f4       	brne	.+2      	; 0x250 <__vector_4+0x48>
 24e:	53 c0       	rjmp	.+166    	; 0x2f6 <__vector_4+0xee>
			uint8_t stateDT = PINC & (1 << 1); // Pobranie wartoœci DT
 250:	86 b1       	in	r24, 0x06	; 6
 252:	82 70       	andi	r24, 0x02	; 2
			// Okreœlenie kierunku obrotu enkodera CLK zmienia siê z 1 na 0
			if (currentStateCLK == 0) {  
 254:	21 11       	cpse	r18, r1
 256:	14 c0       	rjmp	.+40     	; 0x280 <__vector_4+0x78>
				if (stateDT == 0) {
 258:	51 f4       	brne	.+20     	; 0x26e <__vector_4+0x66>
					encoderValue=encoderValue+10; // Obrót ze wskazówkami zegara
 25a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 25e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 262:	0a 96       	adiw	r24, 0x0a	; 10
 264:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <encoderValue+0x1>
 268:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <encoderValue>
 26c:	09 c0       	rjmp	.+18     	; 0x280 <__vector_4+0x78>
				} else {
					encoderValue=encoderValue-10; // Obrót w przeciwnym kierunku do wskazówek zegara
 26e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 272:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 276:	0a 97       	sbiw	r24, 0x0a	; 10
 278:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <encoderValue+0x1>
 27c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <encoderValue>
				}
			}
			target=encoderValue*5;
 280:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 284:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 288:	ac 01       	movw	r20, r24
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	44 0f       	add	r20, r20
 290:	55 1f       	adc	r21, r21
 292:	84 0f       	add	r24, r20
 294:	95 1f       	adc	r25, r21
 296:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <target+0x1>
 29a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <target>
 29e:	2b c0       	rjmp	.+86     	; 0x2f6 <__vector_4+0xee>
		}
	}else{  
		if (currentStateCLK != lastStateCLK) {     // Sprawdzenie czy zmieni³o siê CLK
 2a0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <lastStateCLK>
 2a4:	28 17       	cp	r18, r24
 2a6:	39 f1       	breq	.+78     	; 0x2f6 <__vector_4+0xee>
			uint8_t stateDT = PINC & (1 << 1); // Pobranie wartoœci DT
 2a8:	86 b1       	in	r24, 0x06	; 6
 2aa:	82 70       	andi	r24, 0x02	; 2
			// Okreœlenie kierunku obrotu enkodera CLK zmienia siê z 1 na 0     
			if (currentStateCLK == 0) {  
 2ac:	21 11       	cpse	r18, r1
 2ae:	14 c0       	rjmp	.+40     	; 0x2d8 <__vector_4+0xd0>
				if (stateDT == 0) {
 2b0:	51 f4       	brne	.+20     	; 0x2c6 <__vector_4+0xbe>
					encoderValue++; // Obrót ze wskazówkami zegara
 2b2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 2b6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <encoderValue+0x1>
 2c0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <encoderValue>
 2c4:	09 c0       	rjmp	.+18     	; 0x2d8 <__vector_4+0xd0>
				} else {
					encoderValue--; // Obrót w przeciwnym kierunku do wskazówek zegara
 2c6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 2ca:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <encoderValue+0x1>
 2d4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <encoderValue>
				}
			}
			target=encoderValue*5;
 2d8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 2dc:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 2e0:	ac 01       	movw	r20, r24
 2e2:	44 0f       	add	r20, r20
 2e4:	55 1f       	adc	r21, r21
 2e6:	44 0f       	add	r20, r20
 2e8:	55 1f       	adc	r21, r21
 2ea:	84 0f       	add	r24, r20
 2ec:	95 1f       	adc	r25, r21
 2ee:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <target+0x1>
 2f2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <target>
		}
	}
	// ograniczenie wartoœci enkoder dla programu 1 i 2, od 0 do 9
	if((state==1)|(state==2)){
 2f6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <state>
 2fa:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <state>
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	09 f0       	breq	.+2      	; 0x306 <__vector_4+0xfe>
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	32 30       	cpi	r19, 0x02	; 2
 30a:	09 f0       	breq	.+2      	; 0x30e <__vector_4+0x106>
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	89 2b       	or	r24, r25
 310:	b1 f0       	breq	.+44     	; 0x33e <__vector_4+0x136>
		if (encoderValue>9){
 312:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 316:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 31a:	0a 97       	sbiw	r24, 0x0a	; 10
 31c:	34 f0       	brlt	.+12     	; 0x32a <__vector_4+0x122>
				encoderValue=9;
 31e:	89 e0       	ldi	r24, 0x09	; 9
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <encoderValue+0x1>
 326:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <encoderValue>
			}
			if (encoderValue<0){
 32a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 32e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 332:	99 23       	and	r25, r25
 334:	24 f4       	brge	.+8      	; 0x33e <__vector_4+0x136>
				encoderValue=0;
 336:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <encoderValue+0x1>
 33a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <encoderValue>
			}
	}
    lastStateCLK = currentStateCLK; // Aktualizacja ostatniego stanu CLK
 33e:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <lastStateCLK>
}
 342:	9f 91       	pop	r25
 344:	8f 91       	pop	r24
 346:	5f 91       	pop	r21
 348:	4f 91       	pop	r20
 34a:	3f 91       	pop	r19
 34c:	2f 91       	pop	r18
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <__vector_27>:

//przerwania na wciœniecie przycisku
ISR(PCINT3_vect){
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	8f 93       	push	r24
	if ((PINE & (1 << 0))==0){
 364:	60 99       	sbic	0x0c, 0	; 12
 366:	0e c0       	rjmp	.+28     	; 0x384 <__vector_27+0x2c>
		state = 0;
 368:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <state>
		encoderValue =0;
 36c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <encoderValue+0x1>
 370:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <encoderValue>
		steps = 0;
 374:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <steps+0x1>
 378:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <steps>
		target = 0;
 37c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <target+0x1>
 380:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <target>
	}
	if ((PINE & (1 << 1))==0){
 384:	61 99       	sbic	0x0c, 1	; 12
 386:	07 c0       	rjmp	.+14     	; 0x396 <__vector_27+0x3e>
		state = 1;
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
		encoderValue =0;
 38e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <encoderValue+0x1>
 392:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <encoderValue>
	}
	if ((PINE & (1 << 2))==0){
 396:	62 99       	sbic	0x0c, 2	; 12
 398:	07 c0       	rjmp	.+14     	; 0x3a8 <__vector_27+0x50>
		state = 2;
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
		encoderValue =0;
 3a0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <encoderValue+0x1>
 3a4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <encoderValue>
	}
	if ((PINE & (1 << 3))==0){
 3a8:	63 99       	sbic	0x0c, 3	; 12
 3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <__vector_27+0x5a>
		state = 3;
 3ac:	83 e0       	ldi	r24, 0x03	; 3
 3ae:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
	}
}
 3b2:	8f 91       	pop	r24
 3b4:	0f 90       	pop	r0
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	0f 90       	pop	r0
 3ba:	1f 90       	pop	r1
 3bc:	18 95       	reti

000003be <__vector_14>:

//przerwanie na wyœwietlenie pojedynczej cyfry
ISR(TIMER0_COMPA_vect) {
 3be:	1f 92       	push	r1
 3c0:	0f 92       	push	r0
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	0f 92       	push	r0
 3c6:	11 24       	eor	r1, r1
 3c8:	2f 93       	push	r18
 3ca:	3f 93       	push	r19
 3cc:	4f 93       	push	r20
 3ce:	5f 93       	push	r21
 3d0:	6f 93       	push	r22
 3d2:	7f 93       	push	r23
 3d4:	8f 93       	push	r24
 3d6:	9f 93       	push	r25
 3d8:	af 93       	push	r26
 3da:	bf 93       	push	r27
 3dc:	ef 93       	push	r30
 3de:	ff 93       	push	r31
	display_number(encoderValue);
 3e0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 3e4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 3e8:	0e 94 c4 00 	call	0x188	; 0x188 <display_number>
	if (position==3){
 3ec:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 3f0:	83 30       	cpi	r24, 0x03	; 3
 3f2:	19 f4       	brne	.+6      	; 0x3fa <__vector_14+0x3c>
		position=0;
 3f4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 3f8:	05 c0       	rjmp	.+10     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
	}else{
		position++;
 3fa:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 3fe:	8f 5f       	subi	r24, 0xFF	; 255
 400:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	}
}
 404:	ff 91       	pop	r31
 406:	ef 91       	pop	r30
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <stepMotor>:

void stepMotor(int step) {
	switch (step) {
 426:	83 30       	cpi	r24, 0x03	; 3
 428:	91 05       	cpc	r25, r1
 42a:	99 f0       	breq	.+38     	; 0x452 <stepMotor+0x2c>
 42c:	34 f4       	brge	.+12     	; 0x43a <stepMotor+0x14>
 42e:	81 30       	cpi	r24, 0x01	; 1
 430:	91 05       	cpc	r25, r1
 432:	49 f0       	breq	.+18     	; 0x446 <stepMotor+0x20>
 434:	02 97       	sbiw	r24, 0x02	; 2
 436:	51 f0       	breq	.+20     	; 0x44c <stepMotor+0x26>
 438:	08 95       	ret
 43a:	84 30       	cpi	r24, 0x04	; 4
 43c:	91 05       	cpc	r25, r1
 43e:	61 f0       	breq	.+24     	; 0x458 <stepMotor+0x32>
 440:	05 97       	sbiw	r24, 0x05	; 5
 442:	69 f0       	breq	.+26     	; 0x45e <stepMotor+0x38>
 444:	08 95       	ret
		case 1:
		PORTB = (1 << 0);
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	85 b9       	out	0x05, r24	; 5
		break;
 44a:	08 95       	ret
		
		case 2:
		PORTB = (1 << 1);
 44c:	82 e0       	ldi	r24, 0x02	; 2
 44e:	85 b9       	out	0x05, r24	; 5
		break;
 450:	08 95       	ret
		
		case 3:
		PORTB = (1 << 2);
 452:	84 e0       	ldi	r24, 0x04	; 4
 454:	85 b9       	out	0x05, r24	; 5
		break;
 456:	08 95       	ret
		
		case 4:
		PORTB = (1 << 3);
 458:	88 e0       	ldi	r24, 0x08	; 8
 45a:	85 b9       	out	0x05, r24	; 5
		break;
 45c:	08 95       	ret
		
		case 5: // od³¹czenie silnika
		PORTB =0x00;
 45e:	15 b8       	out	0x05, r1	; 5
 460:	08 95       	ret

00000462 <main>:
	}
}

int main(void) {

    setup(); // Ustawienie portów i przerwañ
 462:	0e 94 79 00 	call	0xf2	; 0xf2 <setup>
	    
    sei(); // W³¹cz przerwania globalne
 466:	78 94       	sei
	
	int i= 0;
 468:	c0 e0       	ldi	r28, 0x00	; 0
 46a:	d0 e0       	ldi	r29, 0x00	; 0
	int speed;
    
    while (1) {
		// obrót do stanu enkodera
		if(state==0){		
 46c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <state>
 470:	88 23       	and	r24, r24
 472:	d1 f0       	breq	.+52     	; 0x4a8 <main+0x46>
 474:	49 c0       	rjmp	.+146    	; 0x508 <main+0xa6>
			while(target>steps){
				steps++;
 476:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <steps>
 47a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <steps+0x1>
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <steps+0x1>
 484:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <steps>
				if(i==4){
 488:	c4 30       	cpi	r28, 0x04	; 4
 48a:	d1 05       	cpc	r29, r1
 48c:	11 f0       	breq	.+4      	; 0x492 <main+0x30>
					i=1;
				}else{
					i++;
 48e:	21 96       	adiw	r28, 0x01	; 1
 490:	02 c0       	rjmp	.+4      	; 0x496 <main+0x34>
		// obrót do stanu enkodera
		if(state==0){		
			while(target>steps){
				steps++;
				if(i==4){
					i=1;
 492:	c1 e0       	ldi	r28, 0x01	; 1
 494:	d0 e0       	ldi	r29, 0x00	; 0
				}else{
					i++;
				}
				stepMotor(i);
 496:	ce 01       	movw	r24, r28
 498:	0e 94 13 02 	call	0x426	; 0x426 <stepMotor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 49c:	8f e3       	ldi	r24, 0x3F	; 63
 49e:	9f e1       	ldi	r25, 0x1F	; 31
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <main+0x3e>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <main+0x44>
 4a6:	00 00       	nop
	int speed;
    
    while (1) {
		// obrót do stanu enkodera
		if(state==0){		
			while(target>steps){
 4a8:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <target>
 4ac:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <target+0x1>
 4b0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <steps>
 4b4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <steps+0x1>
 4b8:	82 17       	cp	r24, r18
 4ba:	93 07       	cpc	r25, r19
 4bc:	e4 f2       	brlt	.-72     	; 0x476 <main+0x14>
 4be:	19 c0       	rjmp	.+50     	; 0x4f2 <main+0x90>
				}
				stepMotor(i);
				_delay_ms(2);
			}
			while(target<steps){
				steps--;
 4c0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <steps>
 4c4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <steps+0x1>
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <steps+0x1>
 4ce:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <steps>
				if(i<=1){
 4d2:	c2 30       	cpi	r28, 0x02	; 2
 4d4:	d1 05       	cpc	r29, r1
 4d6:	14 f0       	brlt	.+4      	; 0x4dc <main+0x7a>
					i=4;
				}else{
					i--;
 4d8:	21 97       	sbiw	r28, 0x01	; 1
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <main+0x7e>
				_delay_ms(2);
			}
			while(target<steps){
				steps--;
				if(i<=1){
					i=4;
 4dc:	c4 e0       	ldi	r28, 0x04	; 4
 4de:	d0 e0       	ldi	r29, 0x00	; 0
				}else{
					i--;
				}
				stepMotor(i);
 4e0:	ce 01       	movw	r24, r28
 4e2:	0e 94 13 02 	call	0x426	; 0x426 <stepMotor>
 4e6:	ef e3       	ldi	r30, 0x3F	; 63
 4e8:	ff e1       	ldi	r31, 0x1F	; 31
 4ea:	31 97       	sbiw	r30, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <main+0x88>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <main+0x8e>
 4f0:	00 00       	nop
					i++;
				}
				stepMotor(i);
				_delay_ms(2);
			}
			while(target<steps){
 4f2:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <target>
 4f6:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <target+0x1>
 4fa:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <steps>
 4fe:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <steps+0x1>
 502:	28 17       	cp	r18, r24
 504:	39 07       	cpc	r19, r25
 506:	e4 f2       	brlt	.-72     	; 0x4c0 <main+0x5e>
				_delay_ms(2);	
			}
		}
		
		//sta³y obrót ze wskazówkami zegara
		if(state==1){			
 508:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <state>
 50c:	81 30       	cpi	r24, 0x01	; 1
 50e:	01 f5       	brne	.+64     	; 0x550 <main+0xee>
			speed = 10 - encoderValue;
 510:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 514:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 518:	0a e0       	ldi	r16, 0x0A	; 10
 51a:	10 e0       	ldi	r17, 0x00	; 0
 51c:	08 1b       	sub	r16, r24
 51e:	19 0b       	sbc	r17, r25
			stepMotor(i);
 520:	ce 01       	movw	r24, r28
 522:	0e 94 13 02 	call	0x426	; 0x426 <stepMotor>
			
			if(i==4){
 526:	c4 30       	cpi	r28, 0x04	; 4
 528:	d1 05       	cpc	r29, r1
 52a:	11 f0       	breq	.+4      	; 0x530 <main+0xce>
				i=1;
			}else{
				i++;
 52c:	21 96       	adiw	r28, 0x01	; 1
 52e:	02 c0       	rjmp	.+4      	; 0x534 <main+0xd2>
		if(state==1){			
			speed = 10 - encoderValue;
			stepMotor(i);
			
			if(i==4){
				i=1;
 530:	c1 e0       	ldi	r28, 0x01	; 1
 532:	d0 e0       	ldi	r29, 0x00	; 0
			}else{
				i++;
			}		
			//opó¿nienie do kontroli prêdkoœci
			for(uint8_t t = 0; t<speed; t++ ){
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	07 c0       	rjmp	.+14     	; 0x546 <main+0xe4>
 538:	ef e3       	ldi	r30, 0x3F	; 63
 53a:	ff e1       	ldi	r31, 0x1F	; 31
 53c:	31 97       	sbiw	r30, 0x01	; 1
 53e:	f1 f7       	brne	.-4      	; 0x53c <main+0xda>
 540:	00 c0       	rjmp	.+0      	; 0x542 <main+0xe0>
 542:	00 00       	nop
 544:	8f 5f       	subi	r24, 0xFF	; 255
 546:	28 2f       	mov	r18, r24
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	20 17       	cp	r18, r16
 54c:	31 07       	cpc	r19, r17
 54e:	a4 f3       	brlt	.-24     	; 0x538 <main+0xd6>
				_delay_ms(2);
			}
		}
		
		//sta³³y obrót w kierunku przeciwnym do wskazówek zegara
		if(state==2){	
 550:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <state>
 554:	82 30       	cpi	r24, 0x02	; 2
 556:	01 f5       	brne	.+64     	; 0x598 <main+0x136>
			speed = 10 - encoderValue;
 558:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 55c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 560:	0a e0       	ldi	r16, 0x0A	; 10
 562:	10 e0       	ldi	r17, 0x00	; 0
 564:	08 1b       	sub	r16, r24
 566:	19 0b       	sbc	r17, r25
			stepMotor(i);
 568:	ce 01       	movw	r24, r28
 56a:	0e 94 13 02 	call	0x426	; 0x426 <stepMotor>
			
			if(i<=1){
 56e:	c2 30       	cpi	r28, 0x02	; 2
 570:	d1 05       	cpc	r29, r1
 572:	14 f0       	brlt	.+4      	; 0x578 <main+0x116>
				i=4;
			}else{
				i--;
 574:	21 97       	sbiw	r28, 0x01	; 1
 576:	02 c0       	rjmp	.+4      	; 0x57c <main+0x11a>
		if(state==2){	
			speed = 10 - encoderValue;
			stepMotor(i);
			
			if(i<=1){
				i=4;
 578:	c4 e0       	ldi	r28, 0x04	; 4
 57a:	d0 e0       	ldi	r29, 0x00	; 0
			}else{
				i--;
			}
			//opó¿nienie do kontroli prêdkoœci
			for(uint8_t t = 0; t<speed; t++ ){
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	07 c0       	rjmp	.+14     	; 0x58e <main+0x12c>
 580:	ef e3       	ldi	r30, 0x3F	; 63
 582:	ff e1       	ldi	r31, 0x1F	; 31
 584:	31 97       	sbiw	r30, 0x01	; 1
 586:	f1 f7       	brne	.-4      	; 0x584 <main+0x122>
 588:	00 c0       	rjmp	.+0      	; 0x58a <main+0x128>
 58a:	00 00       	nop
 58c:	8f 5f       	subi	r24, 0xFF	; 255
 58e:	28 2f       	mov	r18, r24
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	20 17       	cp	r18, r16
 594:	31 07       	cpc	r19, r17
 596:	a4 f3       	brlt	.-24     	; 0x580 <main+0x11e>
				_delay_ms(2);
			}
		}
		
		//zatrzymanie programów i od³¹czenie silnika 
		if(state==3){
 598:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <state>
 59c:	83 30       	cpi	r24, 0x03	; 3
 59e:	09 f0       	breq	.+2      	; 0x5a2 <main+0x140>
 5a0:	65 cf       	rjmp	.-310    	; 0x46c <main+0xa>
			encoderValue=0;
 5a2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <encoderValue+0x1>
 5a6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <encoderValue>
			stepMotor(5);
 5aa:	85 e0       	ldi	r24, 0x05	; 5
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 13 02 	call	0x426	; 0x426 <stepMotor>
 5b2:	5c cf       	rjmp	.-328    	; 0x46c <main+0xa>

000005b4 <__divmodhi4>:
 5b4:	97 fb       	bst	r25, 7
 5b6:	07 2e       	mov	r0, r23
 5b8:	16 f4       	brtc	.+4      	; 0x5be <__divmodhi4+0xa>
 5ba:	00 94       	com	r0
 5bc:	07 d0       	rcall	.+14     	; 0x5cc <__divmodhi4_neg1>
 5be:	77 fd       	sbrc	r23, 7
 5c0:	09 d0       	rcall	.+18     	; 0x5d4 <__divmodhi4_neg2>
 5c2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__udivmodhi4>
 5c6:	07 fc       	sbrc	r0, 7
 5c8:	05 d0       	rcall	.+10     	; 0x5d4 <__divmodhi4_neg2>
 5ca:	3e f4       	brtc	.+14     	; 0x5da <__divmodhi4_exit>

000005cc <__divmodhi4_neg1>:
 5cc:	90 95       	com	r25
 5ce:	81 95       	neg	r24
 5d0:	9f 4f       	sbci	r25, 0xFF	; 255
 5d2:	08 95       	ret

000005d4 <__divmodhi4_neg2>:
 5d4:	70 95       	com	r23
 5d6:	61 95       	neg	r22
 5d8:	7f 4f       	sbci	r23, 0xFF	; 255

000005da <__divmodhi4_exit>:
 5da:	08 95       	ret

000005dc <__udivmodhi4>:
 5dc:	aa 1b       	sub	r26, r26
 5de:	bb 1b       	sub	r27, r27
 5e0:	51 e1       	ldi	r21, 0x11	; 17
 5e2:	07 c0       	rjmp	.+14     	; 0x5f2 <__udivmodhi4_ep>

000005e4 <__udivmodhi4_loop>:
 5e4:	aa 1f       	adc	r26, r26
 5e6:	bb 1f       	adc	r27, r27
 5e8:	a6 17       	cp	r26, r22
 5ea:	b7 07       	cpc	r27, r23
 5ec:	10 f0       	brcs	.+4      	; 0x5f2 <__udivmodhi4_ep>
 5ee:	a6 1b       	sub	r26, r22
 5f0:	b7 0b       	sbc	r27, r23

000005f2 <__udivmodhi4_ep>:
 5f2:	88 1f       	adc	r24, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	5a 95       	dec	r21
 5f8:	a9 f7       	brne	.-22     	; 0x5e4 <__udivmodhi4_loop>
 5fa:	80 95       	com	r24
 5fc:	90 95       	com	r25
 5fe:	bc 01       	movw	r22, r24
 600:	cd 01       	movw	r24, r26
 602:	08 95       	ret

00000604 <_exit>:
 604:	f8 94       	cli

00000606 <__stop_program>:
 606:	ff cf       	rjmp	.-2      	; 0x606 <__stop_program>
