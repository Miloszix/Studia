
Projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000680  00000714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000680  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080010c  0080010c  00000720  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000750  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d07  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ef  00000000  00000000  000014f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000655  00000000  00000000  00001ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  0000253c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000546  00000000  00000000  00002694  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000401  00000000  00000000  00002bda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002fdb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_4>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 21 02 	jmp	0x442	; 0x442 <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__vector_27>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 e8       	ldi	r30, 0x80	; 128
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ac 30       	cpi	r26, 0x0C	; 12
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ac e0       	ldi	r26, 0x0C	; 12
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a5 31       	cpi	r26, 0x15	; 21
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 73 02 	call	0x4e6	; 0x4e6 <main>
  ea:	0c 94 3e 03 	jmp	0x67c	; 0x67c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <setup>:
	D0-6 segmenty PD7 D4
	PB silnik
    Ustawienie portów C0-2 i E jako wejœæ, B i D C3-8 jako wyjœæ 
    */
    
	DDRC = 0b11111000;
  f2:	88 ef       	ldi	r24, 0xF8	; 248
  f4:	87 b9       	out	0x07, r24	; 7
    PORTC = 0b00000111;	
  f6:	87 e0       	ldi	r24, 0x07	; 7
  f8:	88 b9       	out	0x08, r24	; 8
	DDRB = 0xff;
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xff;
  fe:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
 100:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0xff;
 102:	8e b9       	out	0x0e, r24	; 14
	PORTD = 0x00;
 104:	1b b8       	out	0x0b, r1	; 11
    
    lastStateCLK = PINC & (1 << 0);  //pocz¹tkowy stan CLK
 106:	86 b1       	in	r24, 0x06	; 6
 108:	81 70       	andi	r24, 0x01	; 1
 10a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <lastStateCLK>
    
    // Konfiguracja przerwañ
    PCICR |= (1 << PCIE1) | (1 << PCIE3); // W³¹czenie przerwañ dla pinów C i E
 10e:	e8 e6       	ldi	r30, 0x68	; 104
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	8a 60       	ori	r24, 0x0A	; 10
 116:	80 83       	st	Z, r24
    PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10); // W³¹czenie przerwañ dla PC0-2
 118:	ec e6       	ldi	r30, 0x6C	; 108
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	87 60       	ori	r24, 0x07	; 7
 120:	80 83       	st	Z, r24
	PCMSK3 |= (1 << PCINT24) | (1 << PCINT25) | (1 << PCINT26) | (1 << PCINT27); // W³¹czenie przerwañ dla PE0-3
 122:	e3 e7       	ldi	r30, 0x73	; 115
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	8f 60       	ori	r24, 0x0F	; 15
 12a:	80 83       	st	Z, r24
	
    // Ustawienie Timer0 w tryb CTC
    TCCR0A |= (1 << WGM01);
 12c:	84 b5       	in	r24, 0x24	; 36
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (1 << CS01) | (1 << CS00); // Ustawienie preskalera na 256
 132:	85 b5       	in	r24, 0x25	; 37
 134:	83 60       	ori	r24, 0x03	; 3
 136:	85 bd       	out	0x25, r24	; 37
    OCR0A = 249; //16000000/(64*1000) = 249 ustawienie wartoœci rejestru porównania
 138:	89 ef       	ldi	r24, 0xF9	; 249
 13a:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1 << OCIE0A); //w³¹cza przerwanie porównania
 13c:	ee e6       	ldi	r30, 0x6E	; 110
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	82 60       	ori	r24, 0x02	; 2
 144:	80 83       	st	Z, r24
 146:	08 95       	ret

00000148 <wait_ms>:
	  ~(1 << 6) // -
};


void wait_ms(uint16_t milliseconds) {
	while (milliseconds > 0) {
 148:	14 c0       	rjmp	.+40     	; 0x172 <wait_ms+0x2a>
		// Ustaw Timer1 w tryb CTC
		TCCR1A = 0; // Wyzerowanie rejestru kontrolnego A
 14a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10); // WGM12: CTC tryb, CS11 | CS10: Preskaler 64
 14e:	2b e0       	ldi	r18, 0x0B	; 11
 150:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

		// Ustaw wartoœæ porównania dla OCR1A, aby uzyskaæ 1 ms
		OCR1A = 249; // Liczba cykli na 1 ms - 1
 154:	29 ef       	ldi	r18, 0xF9	; 249
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 15c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

		// Wyczyœæ licznik
		TCNT1 = 0;
 160:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 164:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

		// Poczekaj na ustawienie flagi porównania
		while (!(TIFR1 & (1 << OCF1A)));
 168:	b1 9b       	sbis	0x16, 1	; 22
 16a:	fe cf       	rjmp	.-4      	; 0x168 <wait_ms+0x20>

		// Wyczyœæ flagê porównania
		TIFR1 = (1 << OCF1A);
 16c:	22 e0       	ldi	r18, 0x02	; 2
 16e:	26 bb       	out	0x16, r18	; 22

		// Zmniejsz licznik milisekund
		milliseconds--;
 170:	01 97       	sbiw	r24, 0x01	; 1
	  ~(1 << 6) // -
};


void wait_ms(uint16_t milliseconds) {
	while (milliseconds > 0) {
 172:	00 97       	sbiw	r24, 0x00	; 0
 174:	51 f7       	brne	.-44     	; 0x14a <wait_ms+0x2>
		TIFR1 = (1 << OCF1A);

		// Zmniejsz licznik milisekund
		milliseconds--;
	}
}
 176:	08 95       	ret

00000178 <display_digit>:

void display_digit(uint8_t digit_value, uint8_t position) {
	// Wy³¹czenie cyfr
	PORTD |= (1 << 7);
 178:	9b b1       	in	r25, 0x0b	; 11
 17a:	90 68       	ori	r25, 0x80	; 128
 17c:	9b b9       	out	0x0b, r25	; 11
	PORTC = ((1 << 3) | (1 << 4) | (1 << 5));
 17e:	98 e3       	ldi	r25, 0x38	; 56
 180:	98 b9       	out	0x08, r25	; 8
	// ustawienie segmentów wed³ug powy¿szej konfiguracji
	PORTD = digit[digit_value];
 182:	e8 2f       	mov	r30, r24
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	e0 50       	subi	r30, 0x00	; 0
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	80 81       	ld	r24, Z
 18c:	8b b9       	out	0x0b, r24	; 11
	// selekcja odpowiedniej cyfry
	switch (position) {
 18e:	61 30       	cpi	r22, 0x01	; 1
 190:	49 f0       	breq	.+18     	; 0x1a4 <display_digit+0x2c>
 192:	28 f0       	brcs	.+10     	; 0x19e <display_digit+0x26>
 194:	62 30       	cpi	r22, 0x02	; 2
 196:	49 f0       	breq	.+18     	; 0x1aa <display_digit+0x32>
 198:	63 30       	cpi	r22, 0x03	; 3
 19a:	51 f0       	breq	.+20     	; 0x1b0 <display_digit+0x38>
 19c:	08 95       	ret
		case 0:
		PORTC = ~(1 << 3);
 19e:	87 ef       	ldi	r24, 0xF7	; 247
 1a0:	88 b9       	out	0x08, r24	; 8
		break;
 1a2:	08 95       	ret
		
		case 1:
		PORTC = ~(1 << 4);
 1a4:	8f ee       	ldi	r24, 0xEF	; 239
 1a6:	88 b9       	out	0x08, r24	; 8
		break;
 1a8:	08 95       	ret
		
		case 2:
		PORTC = ~(1 << 5);
 1aa:	8f ed       	ldi	r24, 0xDF	; 223
 1ac:	88 b9       	out	0x08, r24	; 8
		break;
 1ae:	08 95       	ret
		
		case 3:
		PORTD &= ~(1 << 7);
 1b0:	8b b1       	in	r24, 0x0b	; 11
 1b2:	8f 77       	andi	r24, 0x7F	; 127
 1b4:	8b b9       	out	0x0b, r24	; 11
 1b6:	08 95       	ret

000001b8 <display_number>:
		break;
	}
}

void display_number(int16_t number) {
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	00 d0       	rcall	.+0      	; 0x1be <display_number+0x6>
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <display_number+0x8>
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
 1c4:	9c 01       	movw	r18, r24
	uint8_t digits[4];
	//warunek dla liczb dodatnich
	if (number>=0){                   
 1c6:	99 23       	and	r25, r25
 1c8:	2c f0       	brlt	.+10     	; 0x1d4 <display_number+0x1c>
		digits[0] = number / 1000;	
 1ca:	68 ee       	ldi	r22, 0xE8	; 232
 1cc:	73 e0       	ldi	r23, 0x03	; 3
 1ce:	0e 94 16 03 	call	0x62c	; 0x62c <__divmodhi4>
 1d2:	69 83       	std	Y+1, r22	; 0x01
	}
	//wyœwietlenie minusa dla ujemnych
	if (number<0){      
 1d4:	33 23       	and	r19, r19
 1d6:	2c f4       	brge	.+10     	; 0x1e2 <display_number+0x2a>
		digits[0] = 10;             
 1d8:	8a e0       	ldi	r24, 0x0A	; 10
 1da:	89 83       	std	Y+1, r24	; 0x01
		number = -number;
 1dc:	31 95       	neg	r19
 1de:	21 95       	neg	r18
 1e0:	31 09       	sbc	r19, r1
	}
	//reszty z dzielenia wyœwietlane jako cyfry
	digits[1] = (number / 100) % 10; 
 1e2:	c9 01       	movw	r24, r18
 1e4:	64 e6       	ldi	r22, 0x64	; 100
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	0e 94 16 03 	call	0x62c	; 0x62c <__divmodhi4>
 1ec:	cb 01       	movw	r24, r22
 1ee:	ea e0       	ldi	r30, 0x0A	; 10
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	bf 01       	movw	r22, r30
 1f4:	0e 94 16 03 	call	0x62c	; 0x62c <__divmodhi4>
 1f8:	8a 83       	std	Y+2, r24	; 0x02
	digits[2] = (number / 10) % 10;
 1fa:	c9 01       	movw	r24, r18
 1fc:	bf 01       	movw	r22, r30
 1fe:	0e 94 16 03 	call	0x62c	; 0x62c <__divmodhi4>
 202:	28 2f       	mov	r18, r24
 204:	cb 01       	movw	r24, r22
 206:	bf 01       	movw	r22, r30
 208:	0e 94 16 03 	call	0x62c	; 0x62c <__divmodhi4>
 20c:	8b 83       	std	Y+3, r24	; 0x03
	digits[3] = number % 10;
 20e:	2c 83       	std	Y+4, r18	; 0x04

	display_digit(digits[position], position);
 210:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <__data_end>
 214:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 218:	e1 e0       	ldi	r30, 0x01	; 1
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	ec 0f       	add	r30, r28
 21e:	fd 1f       	adc	r31, r29
 220:	e8 0f       	add	r30, r24
 222:	f1 1d       	adc	r31, r1
 224:	80 81       	ld	r24, Z
 226:	0e 94 bc 00 	call	0x178	; 0x178 <display_digit>
	
}
 22a:	0f 90       	pop	r0
 22c:	0f 90       	pop	r0
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <__vector_4>:

//przerwania na poruszenie enkodera
ISR(PCINT1_vect) {
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	2f 93       	push	r18
 244:	3f 93       	push	r19
 246:	4f 93       	push	r20
 248:	5f 93       	push	r21
 24a:	6f 93       	push	r22
 24c:	7f 93       	push	r23
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
 252:	af 93       	push	r26
 254:	bf 93       	push	r27
 256:	cf 93       	push	r28
 258:	ef 93       	push	r30
 25a:	ff 93       	push	r31
    // Odczytaj bie¿¹cy stan CLK
    uint8_t currentStateCLK = PINC & (1 << 0);
 25c:	c6 b1       	in	r28, 0x06	; 6
 25e:	c1 70       	andi	r28, 0x01	; 1
	wait_ms(DEBOUNCE_TIME); // zapobieganie glitchom podczas przekrêcania
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 a4 00 	call	0x148	; 0x148 <wait_ms>
	
	//przypadek dla programu 0 kiedy switch na enkoderze jest wciœniêty	
	if (((PINC&(1<<2))==0)&(state==0)){
 268:	86 b1       	in	r24, 0x06	; 6
 26a:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <state>
 26e:	86 95       	lsr	r24
 270:	86 95       	lsr	r24
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	89 27       	eor	r24, r25
 276:	81 70       	andi	r24, 0x01	; 1
 278:	21 11       	cpse	r18, r1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	89 23       	and	r24, r25
 27e:	69 f1       	breq	.+90     	; 0x2da <__vector_4+0xa2>
		if (currentStateCLK != lastStateCLK) {     // Sprawdzenie czy zmieni³o siê CLK
 280:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <lastStateCLK>
 284:	c8 17       	cp	r28, r24
 286:	09 f4       	brne	.+2      	; 0x28a <__vector_4+0x52>
 288:	53 c0       	rjmp	.+166    	; 0x330 <__vector_4+0xf8>
			uint8_t stateDT = PINC & (1 << 1); // Pobranie wartoœci DT
 28a:	86 b1       	in	r24, 0x06	; 6
 28c:	82 70       	andi	r24, 0x02	; 2
			// Okreœlenie kierunku obrotu enkodera CLK zmienia siê z 1 na 0
			if (currentStateCLK == 0) {  
 28e:	c1 11       	cpse	r28, r1
 290:	14 c0       	rjmp	.+40     	; 0x2ba <__vector_4+0x82>
				if (stateDT == 0) {
 292:	51 f4       	brne	.+20     	; 0x2a8 <__vector_4+0x70>
					encoderValue=encoderValue+10; // Obrót ze wskazówkami zegara
 294:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 298:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 29c:	0a 96       	adiw	r24, 0x0a	; 10
 29e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <encoderValue+0x1>
 2a2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <encoderValue>
 2a6:	09 c0       	rjmp	.+18     	; 0x2ba <__vector_4+0x82>
				} else {
					encoderValue=encoderValue-10; // Obrót w przeciwnym kierunku do wskazówek zegara
 2a8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 2ac:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 2b0:	0a 97       	sbiw	r24, 0x0a	; 10
 2b2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <encoderValue+0x1>
 2b6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <encoderValue>
				}
			}
			target=encoderValue*5;
 2ba:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 2be:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 2c2:	9c 01       	movw	r18, r24
 2c4:	22 0f       	add	r18, r18
 2c6:	33 1f       	adc	r19, r19
 2c8:	22 0f       	add	r18, r18
 2ca:	33 1f       	adc	r19, r19
 2cc:	82 0f       	add	r24, r18
 2ce:	93 1f       	adc	r25, r19
 2d0:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <target+0x1>
 2d4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <target>
 2d8:	2b c0       	rjmp	.+86     	; 0x330 <__vector_4+0xf8>
		}
	}else{  
		if (currentStateCLK != lastStateCLK) {     // Sprawdzenie czy zmieni³o siê CLK
 2da:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <lastStateCLK>
 2de:	c8 17       	cp	r28, r24
 2e0:	39 f1       	breq	.+78     	; 0x330 <__vector_4+0xf8>
			uint8_t stateDT = PINC & (1 << 1); // Pobranie wartoœci DT
 2e2:	86 b1       	in	r24, 0x06	; 6
 2e4:	82 70       	andi	r24, 0x02	; 2
			// Okreœlenie kierunku obrotu enkodera CLK zmienia siê z 1 na 0     
			if (currentStateCLK == 0) {  
 2e6:	c1 11       	cpse	r28, r1
 2e8:	14 c0       	rjmp	.+40     	; 0x312 <__vector_4+0xda>
				if (stateDT == 0) {
 2ea:	51 f4       	brne	.+20     	; 0x300 <__vector_4+0xc8>
					encoderValue++; // Obrót ze wskazówkami zegara
 2ec:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 2f0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 2f4:	01 96       	adiw	r24, 0x01	; 1
 2f6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <encoderValue+0x1>
 2fa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <encoderValue>
 2fe:	09 c0       	rjmp	.+18     	; 0x312 <__vector_4+0xda>
				} else {
					encoderValue--; // Obrót w przeciwnym kierunku do wskazówek zegara
 300:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 304:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <encoderValue+0x1>
 30e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <encoderValue>
				}
			}
			target=encoderValue*5;
 312:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 316:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 31a:	9c 01       	movw	r18, r24
 31c:	22 0f       	add	r18, r18
 31e:	33 1f       	adc	r19, r19
 320:	22 0f       	add	r18, r18
 322:	33 1f       	adc	r19, r19
 324:	82 0f       	add	r24, r18
 326:	93 1f       	adc	r25, r19
 328:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <target+0x1>
 32c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <target>
		}
	}
	// ograniczenie wartoœci enkoder dla programu 1 i 2, od 0 do 9
	if((state==1)|(state==2)){
 330:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <state>
 334:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <state>
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	09 f0       	breq	.+2      	; 0x340 <__vector_4+0x108>
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	22 30       	cpi	r18, 0x02	; 2
 344:	09 f0       	breq	.+2      	; 0x348 <__vector_4+0x110>
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	89 2b       	or	r24, r25
 34a:	b1 f0       	breq	.+44     	; 0x378 <__vector_4+0x140>
		if (encoderValue>9){
 34c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 350:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 354:	0a 97       	sbiw	r24, 0x0a	; 10
 356:	34 f0       	brlt	.+12     	; 0x364 <__vector_4+0x12c>
				encoderValue=9;
 358:	89 e0       	ldi	r24, 0x09	; 9
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <encoderValue+0x1>
 360:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <encoderValue>
			}
			if (encoderValue<0){
 364:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 368:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 36c:	99 23       	and	r25, r25
 36e:	24 f4       	brge	.+8      	; 0x378 <__vector_4+0x140>
				encoderValue=0;
 370:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <encoderValue+0x1>
 374:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <encoderValue>
			}
	}
    lastStateCLK = currentStateCLK; // Aktualizacja ostatniego stanu CLK
 378:	c0 93 12 01 	sts	0x0112, r28	; 0x800112 <lastStateCLK>
	
	if(encoderValue>9999){
 37c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 380:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 384:	80 31       	cpi	r24, 0x10	; 16
 386:	97 42       	sbci	r25, 0x27	; 39
 388:	44 f0       	brlt	.+16     	; 0x39a <__vector_4+0x162>
		encoderValue=0;
 38a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <encoderValue+0x1>
 38e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <encoderValue>
		steps = 0;
 392:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <steps+0x1>
 396:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <steps>
	}
	if (encoderValue<-999){
 39a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 39e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 3a2:	89 31       	cpi	r24, 0x19	; 25
 3a4:	9c 4f       	sbci	r25, 0xFC	; 252
 3a6:	44 f4       	brge	.+16     	; 0x3b8 <__vector_4+0x180>
		encoderValue =0;
 3a8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <encoderValue+0x1>
 3ac:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <encoderValue>
		steps = 0;
 3b0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <steps+0x1>
 3b4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <steps>
	}
}
 3b8:	ff 91       	pop	r31
 3ba:	ef 91       	pop	r30
 3bc:	cf 91       	pop	r28
 3be:	bf 91       	pop	r27
 3c0:	af 91       	pop	r26
 3c2:	9f 91       	pop	r25
 3c4:	8f 91       	pop	r24
 3c6:	7f 91       	pop	r23
 3c8:	6f 91       	pop	r22
 3ca:	5f 91       	pop	r21
 3cc:	4f 91       	pop	r20
 3ce:	3f 91       	pop	r19
 3d0:	2f 91       	pop	r18
 3d2:	0f 90       	pop	r0
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	0f 90       	pop	r0
 3d8:	1f 90       	pop	r1
 3da:	18 95       	reti

000003dc <__vector_27>:

//przerwania na wciœniecie przycisku
ISR(PCINT3_vect){
 3dc:	1f 92       	push	r1
 3de:	0f 92       	push	r0
 3e0:	0f b6       	in	r0, 0x3f	; 63
 3e2:	0f 92       	push	r0
 3e4:	11 24       	eor	r1, r1
 3e6:	8f 93       	push	r24
	if ((PINE & (1 << 0))==0){
 3e8:	60 99       	sbic	0x0c, 0	; 12
 3ea:	0e c0       	rjmp	.+28     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		state = 0;
 3ec:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <state>
		encoderValue =0;
 3f0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <encoderValue+0x1>
 3f4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <encoderValue>
		steps = 0;
 3f8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <steps+0x1>
 3fc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <steps>
		target = 0;
 400:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <target+0x1>
 404:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <target>
	}
	if ((PINE & (1 << 1))==0){
 408:	61 99       	sbic	0x0c, 1	; 12
 40a:	07 c0       	rjmp	.+14     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		state = 1;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
		encoderValue =0;
 412:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <encoderValue+0x1>
 416:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <encoderValue>
	}
	if ((PINE & (1 << 2))==0){
 41a:	62 99       	sbic	0x0c, 2	; 12
 41c:	07 c0       	rjmp	.+14     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		state = 2;
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
		encoderValue =0;
 424:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <encoderValue+0x1>
 428:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <encoderValue>
	}
	if ((PINE & (1 << 3))==0){
 42c:	63 99       	sbic	0x0c, 3	; 12
 42e:	03 c0       	rjmp	.+6      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		state = 3;
 430:	83 e0       	ldi	r24, 0x03	; 3
 432:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
	}
}
 436:	8f 91       	pop	r24
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <__vector_14>:

//przerwanie na wyœwietlenie pojedynczej cyfry
ISR(TIMER0_COMPA_vect) {
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	2f 93       	push	r18
 44e:	3f 93       	push	r19
 450:	4f 93       	push	r20
 452:	5f 93       	push	r21
 454:	6f 93       	push	r22
 456:	7f 93       	push	r23
 458:	8f 93       	push	r24
 45a:	9f 93       	push	r25
 45c:	af 93       	push	r26
 45e:	bf 93       	push	r27
 460:	ef 93       	push	r30
 462:	ff 93       	push	r31
	display_number(encoderValue);
 464:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderValue>
 468:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderValue+0x1>
 46c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <display_number>
	if (position==3){
 470:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 474:	83 30       	cpi	r24, 0x03	; 3
 476:	19 f4       	brne	.+6      	; 0x47e <__vector_14+0x3c>
		position=0;
 478:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 47c:	05 c0       	rjmp	.+10     	; 0x488 <__vector_14+0x46>
	}else{
		position++;
 47e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 482:	8f 5f       	subi	r24, 0xFF	; 255
 484:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	}
}
 488:	ff 91       	pop	r31
 48a:	ef 91       	pop	r30
 48c:	bf 91       	pop	r27
 48e:	af 91       	pop	r26
 490:	9f 91       	pop	r25
 492:	8f 91       	pop	r24
 494:	7f 91       	pop	r23
 496:	6f 91       	pop	r22
 498:	5f 91       	pop	r21
 49a:	4f 91       	pop	r20
 49c:	3f 91       	pop	r19
 49e:	2f 91       	pop	r18
 4a0:	0f 90       	pop	r0
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	0f 90       	pop	r0
 4a6:	1f 90       	pop	r1
 4a8:	18 95       	reti

000004aa <stepMotor>:

void stepMotor(int step) {
	switch (step) {
 4aa:	83 30       	cpi	r24, 0x03	; 3
 4ac:	91 05       	cpc	r25, r1
 4ae:	99 f0       	breq	.+38     	; 0x4d6 <stepMotor+0x2c>
 4b0:	34 f4       	brge	.+12     	; 0x4be <stepMotor+0x14>
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	91 05       	cpc	r25, r1
 4b6:	49 f0       	breq	.+18     	; 0x4ca <stepMotor+0x20>
 4b8:	02 97       	sbiw	r24, 0x02	; 2
 4ba:	51 f0       	breq	.+20     	; 0x4d0 <stepMotor+0x26>
 4bc:	08 95       	ret
 4be:	84 30       	cpi	r24, 0x04	; 4
 4c0:	91 05       	cpc	r25, r1
 4c2:	61 f0       	breq	.+24     	; 0x4dc <stepMotor+0x32>
 4c4:	05 97       	sbiw	r24, 0x05	; 5
 4c6:	69 f0       	breq	.+26     	; 0x4e2 <stepMotor+0x38>
 4c8:	08 95       	ret
		case 1:
		PORTB = (1 << 0);
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	85 b9       	out	0x05, r24	; 5
		break;
 4ce:	08 95       	ret
		
		case 2:
		PORTB = (1 << 1);
 4d0:	82 e0       	ldi	r24, 0x02	; 2
 4d2:	85 b9       	out	0x05, r24	; 5
		break;
 4d4:	08 95       	ret
		
		case 3:
		PORTB = (1 << 2);
 4d6:	84 e0       	ldi	r24, 0x04	; 4
 4d8:	85 b9       	out	0x05, r24	; 5
		break;
 4da:	08 95       	ret
		
		case 4:
		PORTB = (1 << 3);
 4dc:	88 e0       	ldi	r24, 0x08	; 8
 4de:	85 b9       	out	0x05, r24	; 5
		break;
 4e0:	08 95       	ret
		
		case 5: // od³¹czenie silnika
		PORTB =0x00;
 4e2:	15 b8       	out	0x05, r1	; 5
 4e4:	08 95       	ret

000004e6 <main>:
	}
}

int main(void) {

    setup(); // Ustawienie portów i przerwañ
 4e6:	0e 94 79 00 	call	0xf2	; 0xf2 <setup>
	    
    sei(); // W³¹cz przerwania globalne
 4ea:	78 94       	sei
	
	int i= 0;
 4ec:	c0 e0       	ldi	r28, 0x00	; 0
 4ee:	d0 e0       	ldi	r29, 0x00	; 0
	int speed;
    
    while (1) {
		// obrót do stanu enkodera z minimalnym opóŸnieniem
		if(state==0){		
 4f0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <state>
 4f4:	88 23       	and	r24, r24
 4f6:	c1 f0       	breq	.+48     	; 0x528 <main+0x42>
 4f8:	45 c0       	rjmp	.+138    	; 0x584 <main+0x9e>
			while(target>steps){
				steps++;
 4fa:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <steps>
 4fe:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <steps+0x1>
 502:	01 96       	adiw	r24, 0x01	; 1
 504:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <steps+0x1>
 508:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <steps>
				if(i==4){
 50c:	c4 30       	cpi	r28, 0x04	; 4
 50e:	d1 05       	cpc	r29, r1
 510:	11 f0       	breq	.+4      	; 0x516 <main+0x30>
					i=1;
				}else{
					i++;
 512:	21 96       	adiw	r28, 0x01	; 1
 514:	02 c0       	rjmp	.+4      	; 0x51a <main+0x34>
		// obrót do stanu enkodera z minimalnym opóŸnieniem
		if(state==0){		
			while(target>steps){
				steps++;
				if(i==4){
					i=1;
 516:	c1 e0       	ldi	r28, 0x01	; 1
 518:	d0 e0       	ldi	r29, 0x00	; 0
				}else{
					i++;
				}
				stepMotor(i);
 51a:	ce 01       	movw	r24, r28
 51c:	0e 94 55 02 	call	0x4aa	; 0x4aa <stepMotor>
				wait_ms(2);
 520:	82 e0       	ldi	r24, 0x02	; 2
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 a4 00 	call	0x148	; 0x148 <wait_ms>
	int speed;
    
    while (1) {
		// obrót do stanu enkodera z minimalnym opóŸnieniem
		if(state==0){		
			while(target>steps){
 528:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <target>
 52c:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <target+0x1>
 530:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <steps>
 534:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <steps+0x1>
 538:	82 17       	cp	r24, r18
 53a:	93 07       	cpc	r25, r19
 53c:	f4 f2       	brlt	.-68     	; 0x4fa <main+0x14>
 53e:	17 c0       	rjmp	.+46     	; 0x56e <main+0x88>
				}
				stepMotor(i);
				wait_ms(2);
			}
			while(target<steps){
				steps--;
 540:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <steps>
 544:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <steps+0x1>
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <steps+0x1>
 54e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <steps>
				if(i<=1){
 552:	c2 30       	cpi	r28, 0x02	; 2
 554:	d1 05       	cpc	r29, r1
 556:	14 f0       	brlt	.+4      	; 0x55c <main+0x76>
					i=4;
				}else{
					i--;
 558:	21 97       	sbiw	r28, 0x01	; 1
 55a:	02 c0       	rjmp	.+4      	; 0x560 <main+0x7a>
				wait_ms(2);
			}
			while(target<steps){
				steps--;
				if(i<=1){
					i=4;
 55c:	c4 e0       	ldi	r28, 0x04	; 4
 55e:	d0 e0       	ldi	r29, 0x00	; 0
				}else{
					i--;
				}
				stepMotor(i);
 560:	ce 01       	movw	r24, r28
 562:	0e 94 55 02 	call	0x4aa	; 0x4aa <stepMotor>
				wait_ms(2);	
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 a4 00 	call	0x148	; 0x148 <wait_ms>
					i++;
				}
				stepMotor(i);
				wait_ms(2);
			}
			while(target<steps){
 56e:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <target>
 572:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <target+0x1>
 576:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <steps>
 57a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <steps+0x1>
 57e:	28 17       	cp	r18, r24
 580:	39 07       	cpc	r19, r25
 582:	f4 f2       	brlt	.-68     	; 0x540 <main+0x5a>
				wait_ms(2);	
			}
		}
		
		//sta³y obrót ze wskazówkami zegara
		if(state==1){			
 584:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <state>
 588:	81 30       	cpi	r24, 0x01	; 1
 58a:	f9 f4       	brne	.+62     	; 0x5ca <main+0xe4>
			speed = 10 - encoderValue;
 58c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <encoderValue>
 590:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <encoderValue+0x1>
 594:	8a e0       	ldi	r24, 0x0A	; 10
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	7c 01       	movw	r14, r24
 59a:	e2 1a       	sub	r14, r18
 59c:	f3 0a       	sbc	r15, r19
			stepMotor(i);
 59e:	ce 01       	movw	r24, r28
 5a0:	0e 94 55 02 	call	0x4aa	; 0x4aa <stepMotor>
			
			if(i==4){
 5a4:	c4 30       	cpi	r28, 0x04	; 4
 5a6:	d1 05       	cpc	r29, r1
 5a8:	11 f0       	breq	.+4      	; 0x5ae <main+0xc8>
				i=1;
			}else{
				i++;
 5aa:	21 96       	adiw	r28, 0x01	; 1
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <main+0xcc>
		if(state==1){			
			speed = 10 - encoderValue;
			stepMotor(i);
			
			if(i==4){
				i=1;
 5ae:	c1 e0       	ldi	r28, 0x01	; 1
 5b0:	d0 e0       	ldi	r29, 0x00	; 0
			}else{
				i++;
			}		
			//opó¿nienie do kontroli prêdkoœci
			for(uint8_t t = 0; t<speed; t++ ){
 5b2:	10 e0       	ldi	r17, 0x00	; 0
 5b4:	05 c0       	rjmp	.+10     	; 0x5c0 <main+0xda>
				wait_ms(2);
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 a4 00 	call	0x148	; 0x148 <wait_ms>
				i=1;
			}else{
				i++;
			}		
			//opó¿nienie do kontroli prêdkoœci
			for(uint8_t t = 0; t<speed; t++ ){
 5be:	1f 5f       	subi	r17, 0xFF	; 255
 5c0:	81 2f       	mov	r24, r17
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	8e 15       	cp	r24, r14
 5c6:	9f 05       	cpc	r25, r15
 5c8:	b4 f3       	brlt	.-20     	; 0x5b6 <main+0xd0>
				wait_ms(2);
			}
		}
		
		//sta³³y obrót w kierunku przeciwnym do wskazówek zegara
		if(state==2){	
 5ca:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <state>
 5ce:	82 30       	cpi	r24, 0x02	; 2
 5d0:	f9 f4       	brne	.+62     	; 0x610 <main+0x12a>
			speed = 10 - encoderValue;
 5d2:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <encoderValue>
 5d6:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <encoderValue+0x1>
 5da:	8a e0       	ldi	r24, 0x0A	; 10
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	7c 01       	movw	r14, r24
 5e0:	e2 1a       	sub	r14, r18
 5e2:	f3 0a       	sbc	r15, r19
			stepMotor(i);
 5e4:	ce 01       	movw	r24, r28
 5e6:	0e 94 55 02 	call	0x4aa	; 0x4aa <stepMotor>
			
			if(i<=1){
 5ea:	c2 30       	cpi	r28, 0x02	; 2
 5ec:	d1 05       	cpc	r29, r1
 5ee:	14 f0       	brlt	.+4      	; 0x5f4 <main+0x10e>
				i=4;
			}else{
				i--;
 5f0:	21 97       	sbiw	r28, 0x01	; 1
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <main+0x112>
		if(state==2){	
			speed = 10 - encoderValue;
			stepMotor(i);
			
			if(i<=1){
				i=4;
 5f4:	c4 e0       	ldi	r28, 0x04	; 4
 5f6:	d0 e0       	ldi	r29, 0x00	; 0
			}else{
				i--;
			}
			//opó¿nienie do kontroli prêdkoœci
			for(uint8_t t = 0; t<speed; t++ ){
 5f8:	10 e0       	ldi	r17, 0x00	; 0
 5fa:	05 c0       	rjmp	.+10     	; 0x606 <main+0x120>
				wait_ms(2);
 5fc:	82 e0       	ldi	r24, 0x02	; 2
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 a4 00 	call	0x148	; 0x148 <wait_ms>
				i=4;
			}else{
				i--;
			}
			//opó¿nienie do kontroli prêdkoœci
			for(uint8_t t = 0; t<speed; t++ ){
 604:	1f 5f       	subi	r17, 0xFF	; 255
 606:	81 2f       	mov	r24, r17
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	8e 15       	cp	r24, r14
 60c:	9f 05       	cpc	r25, r15
 60e:	b4 f3       	brlt	.-20     	; 0x5fc <main+0x116>
				wait_ms(2);
			}
		}
		
		//zatrzymanie programów i od³¹czenie silnika 
		if(state==3){
 610:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <state>
 614:	83 30       	cpi	r24, 0x03	; 3
 616:	09 f0       	breq	.+2      	; 0x61a <main+0x134>
 618:	6b cf       	rjmp	.-298    	; 0x4f0 <main+0xa>
			encoderValue=0;
 61a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <encoderValue+0x1>
 61e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <encoderValue>
			stepMotor(5);
 622:	85 e0       	ldi	r24, 0x05	; 5
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	0e 94 55 02 	call	0x4aa	; 0x4aa <stepMotor>
 62a:	62 cf       	rjmp	.-316    	; 0x4f0 <main+0xa>

0000062c <__divmodhi4>:
 62c:	97 fb       	bst	r25, 7
 62e:	07 2e       	mov	r0, r23
 630:	16 f4       	brtc	.+4      	; 0x636 <__divmodhi4+0xa>
 632:	00 94       	com	r0
 634:	07 d0       	rcall	.+14     	; 0x644 <__divmodhi4_neg1>
 636:	77 fd       	sbrc	r23, 7
 638:	09 d0       	rcall	.+18     	; 0x64c <__divmodhi4_neg2>
 63a:	0e 94 2a 03 	call	0x654	; 0x654 <__udivmodhi4>
 63e:	07 fc       	sbrc	r0, 7
 640:	05 d0       	rcall	.+10     	; 0x64c <__divmodhi4_neg2>
 642:	3e f4       	brtc	.+14     	; 0x652 <__divmodhi4_exit>

00000644 <__divmodhi4_neg1>:
 644:	90 95       	com	r25
 646:	81 95       	neg	r24
 648:	9f 4f       	sbci	r25, 0xFF	; 255
 64a:	08 95       	ret

0000064c <__divmodhi4_neg2>:
 64c:	70 95       	com	r23
 64e:	61 95       	neg	r22
 650:	7f 4f       	sbci	r23, 0xFF	; 255

00000652 <__divmodhi4_exit>:
 652:	08 95       	ret

00000654 <__udivmodhi4>:
 654:	aa 1b       	sub	r26, r26
 656:	bb 1b       	sub	r27, r27
 658:	51 e1       	ldi	r21, 0x11	; 17
 65a:	07 c0       	rjmp	.+14     	; 0x66a <__udivmodhi4_ep>

0000065c <__udivmodhi4_loop>:
 65c:	aa 1f       	adc	r26, r26
 65e:	bb 1f       	adc	r27, r27
 660:	a6 17       	cp	r26, r22
 662:	b7 07       	cpc	r27, r23
 664:	10 f0       	brcs	.+4      	; 0x66a <__udivmodhi4_ep>
 666:	a6 1b       	sub	r26, r22
 668:	b7 0b       	sbc	r27, r23

0000066a <__udivmodhi4_ep>:
 66a:	88 1f       	adc	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	5a 95       	dec	r21
 670:	a9 f7       	brne	.-22     	; 0x65c <__udivmodhi4_loop>
 672:	80 95       	com	r24
 674:	90 95       	com	r25
 676:	bc 01       	movw	r22, r24
 678:	cd 01       	movw	r24, r26
 67a:	08 95       	ret

0000067c <_exit>:
 67c:	f8 94       	cli

0000067e <__stop_program>:
 67e:	ff cf       	rjmp	.-2      	; 0x67e <__stop_program>
