
c1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000164  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a5f  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000988  00000000  00000000  00000caf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000385  00000000  00000000  00001637  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000019bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c9  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ca  00000000  00000000  00001eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001f83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  c4:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <wait_ms>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <avr/delay.h>

void wait_ms(uint16_t milliseconds) {
    while (milliseconds > 0) {
  cc:	10 c0       	rjmp	.+32     	; 0xee <wait_ms+0x22>
        // Za³aduj wartoœæ pocz¹tkow¹ do Timer1
        TCNT1 = 0xFFF0; // 65520
  ce:	20 ef       	ldi	r18, 0xF0	; 240
  d0:	3f ef       	ldi	r19, 0xFF	; 255
  d2:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  d6:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

        // Uruchom Timer1 z preskalerem 1024
        TCCR1B = (1 << 2) | (1 << 0);
  da:	25 e0       	ldi	r18, 0x05	; 5
  dc:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

        // Poczekaj na ustawienie flagi przepe³nienia
        while (!(TIFR1 & (1 << TOV1)));
  e0:	b0 9b       	sbis	0x16, 0	; 22
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <wait_ms+0x14>

        // Zatrzymaj Timer1
        TCCR1B = 0;
  e4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

        // Wyczyœæ flagê przepe³nienia
        TIFR1 = (1 << TOV1);
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	26 bb       	out	0x16, r18	; 22

        // Zmniejsz licznik milisekund
        milliseconds--;
  ec:	01 97       	sbiw	r24, 0x01	; 1
#define F_CPU 16000000UL
#include <avr/io.h>
#include <avr/delay.h>

void wait_ms(uint16_t milliseconds) {
    while (milliseconds > 0) {
  ee:	00 97       	sbiw	r24, 0x00	; 0
  f0:	71 f7       	brne	.-36     	; 0xce <wait_ms+0x2>
        TIFR1 = (1 << TOV1);

        // Zmniejsz licznik milisekund
        milliseconds--;
    }
}
  f2:	08 95       	ret

000000f4 <main>:

int main()
{
	unsigned int stan = 1;	
	unsigned char val=0;
	DDRB=0xFF; //Set port A as output
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	84 b9       	out	0x04, r24	; 4
	DDRC=0x00;
  f8:	17 b8       	out	0x07, r1	; 7
	PORTC=0xff;
  fa:	88 b9       	out	0x08, r24	; 8


int main()
{
	unsigned int stan = 1;	
	unsigned char val=0;
  fc:	10 e0       	ldi	r17, 0x00	; 0
}


int main()
{
	unsigned int stan = 1;	
  fe:	c1 e0       	ldi	r28, 0x01	; 1
 100:	d0 e0       	ldi	r29, 0x00	; 0
	DDRB=0xFF; //Set port A as output
	DDRC=0x00;
	PORTC=0xff;
	while(1)
	{
		if ((PINC & (1<<3)) == 0){
 102:	33 99       	sbic	0x06, 3	; 6
 104:	02 c0       	rjmp	.+4      	; 0x10a <main+0x16>
			stan = 1;
 106:	c1 e0       	ldi	r28, 0x01	; 1
 108:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (PINC == 0x7B){
 10a:	86 b1       	in	r24, 0x06	; 6
 10c:	8b 37       	cpi	r24, 0x7B	; 123
 10e:	11 f4       	brne	.+4      	; 0x114 <main+0x20>
			stan = 2;
 110:	c2 e0       	ldi	r28, 0x02	; 2
 112:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (PINC == 0x7D){
 114:	86 b1       	in	r24, 0x06	; 6
 116:	8d 37       	cpi	r24, 0x7D	; 125
 118:	11 f4       	brne	.+4      	; 0x11e <main+0x2a>
			stan = 3;
 11a:	c3 e0       	ldi	r28, 0x03	; 3
 11c:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (PINC == 0x7E){
 11e:	86 b1       	in	r24, 0x06	; 6
 120:	8e 37       	cpi	r24, 0x7E	; 126
 122:	11 f4       	brne	.+4      	; 0x128 <main+0x34>
			val = 0;
			PORTB = val;
 124:	15 b8       	out	0x05, r1	; 5
		}
		if (PINC == 0x7D){
			stan = 3;
		}
		if (PINC == 0x7E){
			val = 0;
 126:	10 e0       	ldi	r17, 0x00	; 0
			PORTB = val;
		}
		if (stan==1){
 128:	c1 30       	cpi	r28, 0x01	; 1
 12a:	d1 05       	cpc	r29, r1
 12c:	31 f4       	brne	.+12     	; 0x13a <main+0x46>
		val++; //Increment value
 12e:	1f 5f       	subi	r17, 0xFF	; 255
		PORTB=val; //Send new value to port A
 130:	15 b9       	out	0x05, r17	; 5
		//_delay_ms(1000);
		wait_ms(1000);
 132:	88 ee       	ldi	r24, 0xE8	; 232
 134:	93 e0       	ldi	r25, 0x03	; 3
 136:	0e 94 66 00 	call	0xcc	; 0xcc <wait_ms>
		}
		if (stan==2){
 13a:	c2 30       	cpi	r28, 0x02	; 2
 13c:	d1 05       	cpc	r29, r1
 13e:	59 f4       	brne	.+22     	; 0x156 <main+0x62>
			val--; //Increment value
 140:	11 50       	subi	r17, 0x01	; 1
			PORTB=val; //Send new value to port A
 142:	15 b9       	out	0x05, r17	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	83 ed       	ldi	r24, 0xD3	; 211
 148:	90 e3       	ldi	r25, 0x30	; 48
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0x56>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x60>
 154:	00 00       	nop
			_delay_ms(1000);
		}
		if (stan==3){
 156:	c3 30       	cpi	r28, 0x03	; 3
 158:	d1 05       	cpc	r29, r1
 15a:	99 f6       	brne	.-90     	; 0x102 <main+0xe>
			 //Increment value
			PORTB=val; //Send new value to port A
 15c:	15 b9       	out	0x05, r17	; 5
 15e:	d1 cf       	rjmp	.-94     	; 0x102 <main+0xe>

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
