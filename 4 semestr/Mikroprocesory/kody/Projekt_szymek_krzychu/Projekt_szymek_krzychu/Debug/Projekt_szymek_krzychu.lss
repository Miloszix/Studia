
Projekt_szymek_krzychu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000332  000003c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000332  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080010a  0080010a  000003d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b73  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ec  00000000  00000000  00000ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003fc  00000000  00000000  000019df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000559  00000000  00000000  00001ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b1  00000000  00000000  00002401  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000025b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_4>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_7>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 e3       	ldi	r30, 0x32	; 50
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 30       	cpi	r26, 0x0A	; 10
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	aa e0       	ldi	r26, 0x0A	; 10
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a3 31       	cpi	r26, 0x13	; 19
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 65 01 	call	0x2ca	; 0x2ca <main>
  ea:	0c 94 97 01 	jmp	0x32e	; 0x32e <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <setup>:
volatile uint8_t digits[4];
volatile uint8_t position=0;
volatile uint8_t number;

void setup(void) {
	DDRC = 0x00;
  f2:	17 b8       	out	0x07, r1	; 7
    PORTC = 0xff;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	88 b9       	out	0x08, r24	; 8
	DDRB = 0xff;
  f8:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xff;
  fa:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  fc:	1b b8       	out	0x0b, r1	; 11
    
    lastStateCLK = PINC & (1 << 0);  //pocz¹tkowy stan CLK
  fe:	86 b1       	in	r24, 0x06	; 6
 100:	81 70       	andi	r24, 0x01	; 1
 102:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <lastStateCLK>
    
    // Konfiguracja przerwañ
    PCICR |= (1 << PCIE1);
 106:	e8 e6       	ldi	r30, 0x68	; 104
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	80 83       	st	Z, r24
    PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10);
 110:	ec e6       	ldi	r30, 0x6C	; 108
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	87 60       	ori	r24, 0x07	; 7
 118:	80 83       	st	Z, r24
	
    TCCR2A |= (1 << WGM21);
 11a:	e0 eb       	ldi	r30, 0xB0	; 176
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	82 60       	ori	r24, 0x02	; 2
 122:	80 83       	st	Z, r24
    TCCR2B |= (1 << CS22) | (1 << CS21); // Ustawienie preskalera na 256
 124:	e1 eb       	ldi	r30, 0xB1	; 177
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	86 60       	ori	r24, 0x06	; 6
 12c:	80 83       	st	Z, r24
    OCR2A = 61; //16000000/(256*1000) = 61
 12e:	8d e3       	ldi	r24, 0x3D	; 61
 130:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    TIMSK2 |= (1 << OCIE2A);
 134:	e0 e7       	ldi	r30, 0x70	; 112
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	82 60       	ori	r24, 0x02	; 2
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <show_digit>:
    0b10010000  // 9
};

void show_digit(uint8_t digit_value, uint8_t position) {
	// Wy³¹czenie cyfr
	PORTB = 0xff;
 140:	9f ef       	ldi	r25, 0xFF	; 255
 142:	95 b9       	out	0x05, r25	; 5
	// ustawienie segmentów wed³ug powy¿szej konfiguracji
	PORTD = digit[digit_value];
 144:	e8 2f       	mov	r30, r24
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	e0 50       	subi	r30, 0x00	; 0
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	80 81       	ld	r24, Z
 14e:	8b b9       	out	0x0b, r24	; 11
	// selekcja odpowiedniej cyfry
	switch (position) {
 150:	61 30       	cpi	r22, 0x01	; 1
 152:	49 f0       	breq	.+18     	; 0x166 <show_digit+0x26>
 154:	28 f0       	brcs	.+10     	; 0x160 <show_digit+0x20>
 156:	62 30       	cpi	r22, 0x02	; 2
 158:	49 f0       	breq	.+18     	; 0x16c <show_digit+0x2c>
 15a:	63 30       	cpi	r22, 0x03	; 3
 15c:	51 f0       	breq	.+20     	; 0x172 <show_digit+0x32>
 15e:	08 95       	ret
		case 0:
		PORTB = ~(1 << 0);
 160:	8e ef       	ldi	r24, 0xFE	; 254
 162:	85 b9       	out	0x05, r24	; 5
		break;
 164:	08 95       	ret
		
		case 1:
		PORTB = ~(1 << 1);
 166:	8d ef       	ldi	r24, 0xFD	; 253
 168:	85 b9       	out	0x05, r24	; 5
		break;
 16a:	08 95       	ret
		
		case 2:
		PORTB = ~(1 << 2);
 16c:	8b ef       	ldi	r24, 0xFB	; 251
 16e:	85 b9       	out	0x05, r24	; 5
		break;
 170:	08 95       	ret
		
		case 3:
		PORTB &= ~(1 << 3);
 172:	85 b1       	in	r24, 0x05	; 5
 174:	87 7f       	andi	r24, 0xF7	; 247
 176:	85 b9       	out	0x05, r24	; 5
 178:	08 95       	ret

0000017a <__vector_7>:
		break;
	}
}

ISR(TIMER2_COMPA_vect) {
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	4f 93       	push	r20
 18a:	5f 93       	push	r21
 18c:	6f 93       	push	r22
 18e:	7f 93       	push	r23
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	af 93       	push	r26
 196:	bf 93       	push	r27
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
		//reszty z dzielenia wyœwietlane jako cyfry
		digits[0] = number / 1000;
 19c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <number>
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	68 ee       	ldi	r22, 0xE8	; 232
 1a4:	73 e0       	ldi	r23, 0x03	; 3
 1a6:	0e 94 6f 01 	call	0x2de	; 0x2de <__divmodhi4>
 1aa:	ee e0       	ldi	r30, 0x0E	; 14
 1ac:	f1 e0       	ldi	r31, 0x01	; 1
 1ae:	60 83       	st	Z, r22
		digits[1] = (number / 100) % 10;
 1b0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <number>
 1b4:	99 e2       	ldi	r25, 0x29	; 41
 1b6:	89 9f       	mul	r24, r25
 1b8:	91 2d       	mov	r25, r1
 1ba:	11 24       	eor	r1, r1
 1bc:	8d ec       	ldi	r24, 0xCD	; 205
 1be:	92 95       	swap	r25
 1c0:	9f 70       	andi	r25, 0x0F	; 15
 1c2:	91 83       	std	Z+1, r25	; 0x01
		digits[2] = (number / 10) % 10;
 1c4:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <number>
 1c8:	28 9f       	mul	r18, r24
 1ca:	21 2d       	mov	r18, r1
 1cc:	11 24       	eor	r1, r1
 1ce:	26 95       	lsr	r18
 1d0:	26 95       	lsr	r18
 1d2:	26 95       	lsr	r18
 1d4:	28 9f       	mul	r18, r24
 1d6:	91 2d       	mov	r25, r1
 1d8:	11 24       	eor	r1, r1
 1da:	96 95       	lsr	r25
 1dc:	96 95       	lsr	r25
 1de:	96 95       	lsr	r25
 1e0:	99 0f       	add	r25, r25
 1e2:	39 2f       	mov	r19, r25
 1e4:	33 0f       	add	r19, r19
 1e6:	33 0f       	add	r19, r19
 1e8:	93 0f       	add	r25, r19
 1ea:	29 1b       	sub	r18, r25
 1ec:	22 83       	std	Z+2, r18	; 0x02
		digits[3] = number % 10;
 1ee:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <number>
 1f2:	28 9f       	mul	r18, r24
 1f4:	81 2d       	mov	r24, r1
 1f6:	11 24       	eor	r1, r1
 1f8:	86 95       	lsr	r24
 1fa:	86 95       	lsr	r24
 1fc:	86 95       	lsr	r24
 1fe:	88 0f       	add	r24, r24
 200:	98 2f       	mov	r25, r24
 202:	99 0f       	add	r25, r25
 204:	99 0f       	add	r25, r25
 206:	89 0f       	add	r24, r25
 208:	28 1b       	sub	r18, r24
 20a:	23 83       	std	Z+3, r18	; 0x03

		show_digit(digits[position], position);
 20c:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
 210:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	e2 5f       	subi	r30, 0xF2	; 242
 218:	fe 4f       	sbci	r31, 0xFE	; 254
 21a:	80 81       	ld	r24, Z
 21c:	0e 94 a0 00 	call	0x140	; 0x140 <show_digit>
		
	if (position==3){
 220:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 224:	83 30       	cpi	r24, 0x03	; 3
 226:	19 f4       	brne	.+6      	; 0x22e <__vector_7+0xb4>
		position=0;
 228:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 22c:	05 c0       	rjmp	.+10     	; 0x238 <__vector_7+0xbe>
		}else{
		position++;
 22e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 232:	8f 5f       	subi	r24, 0xFF	; 255
 234:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	}
}
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	7f 91       	pop	r23
 246:	6f 91       	pop	r22
 248:	5f 91       	pop	r21
 24a:	4f 91       	pop	r20
 24c:	3f 91       	pop	r19
 24e:	2f 91       	pop	r18
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <__vector_4>:

ISR(PCINT1_vect) {
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	2f 93       	push	r18
 266:	3f 93       	push	r19
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
	// Odczytaj bie¿¹cy stan CLK
	uint8_t currentStateCLK = PINC & (1 << 0);
 26c:	86 b1       	in	r24, 0x06	; 6
 26e:	81 70       	andi	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 270:	92 e4       	ldi	r25, 0x42	; 66
 272:	9a 95       	dec	r25
 274:	f1 f7       	brne	.-4      	; 0x272 <__vector_4+0x18>
 276:	00 c0       	rjmp	.+0      	; 0x278 <__vector_4+0x1e>
	_delay_us(DEBOUNCE); // zapobieganie glitchom podczas przekrêcania
	
		if (currentStateCLK != lastStateCLK) {     // Sprawdzenie czy zmieni³o siê CLK
 278:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <lastStateCLK>
 27c:	89 17       	cp	r24, r25
 27e:	d1 f0       	breq	.+52     	; 0x2b4 <__vector_4+0x5a>
			uint8_t stateDT = PINC & (1 << 1); // Pobranie wartoœci DT
 280:	96 b1       	in	r25, 0x06	; 6
 282:	92 70       	andi	r25, 0x02	; 2
			// Okreœlenie kierunku obrotu enkodera CLK zmienia siê z 1 na 0
			if (currentStateCLK == 0) {
 284:	81 11       	cpse	r24, r1
 286:	16 c0       	rjmp	.+44     	; 0x2b4 <__vector_4+0x5a>
				if (stateDT == 0) {
 288:	59 f4       	brne	.+22     	; 0x2a0 <__vector_4+0x46>
					encoderValue++; // Obrót ze wskazówkami zegara
 28a:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <encoderValue>
 28e:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <encoderValue+0x1>
 292:	2f 5f       	subi	r18, 0xFF	; 255
 294:	3f 4f       	sbci	r19, 0xFF	; 255
 296:	30 93 0c 01 	sts	0x010C, r19	; 0x80010c <encoderValue+0x1>
 29a:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <encoderValue>
 29e:	0a c0       	rjmp	.+20     	; 0x2b4 <__vector_4+0x5a>
				} else {
					encoderValue--; // Obrót w przeciwnym kierunku do wskazówek zegara
 2a0:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <encoderValue>
 2a4:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <encoderValue+0x1>
 2a8:	21 50       	subi	r18, 0x01	; 1
 2aa:	31 09       	sbc	r19, r1
 2ac:	30 93 0c 01 	sts	0x010C, r19	; 0x80010c <encoderValue+0x1>
 2b0:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <encoderValue>
				}
			}
		}
	lastStateCLK = currentStateCLK; // Aktualizacja ostatniego stanu CLK
 2b4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <lastStateCLK>
}
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	3f 91       	pop	r19
 2be:	2f 91       	pop	r18
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <main>:


int main(void)
{
	setup();
 2ca:	0e 94 79 00 	call	0xf2	; 0xf2 <setup>
	sei();
 2ce:	78 94       	sei
		
    while (1) 
    {
		number=encoderValue;
 2d0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <encoderValue>
 2d4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <encoderValue+0x1>
 2d8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <number>
 2dc:	f9 cf       	rjmp	.-14     	; 0x2d0 <main+0x6>

000002de <__divmodhi4>:
 2de:	97 fb       	bst	r25, 7
 2e0:	07 2e       	mov	r0, r23
 2e2:	16 f4       	brtc	.+4      	; 0x2e8 <__divmodhi4+0xa>
 2e4:	00 94       	com	r0
 2e6:	07 d0       	rcall	.+14     	; 0x2f6 <__divmodhi4_neg1>
 2e8:	77 fd       	sbrc	r23, 7
 2ea:	09 d0       	rcall	.+18     	; 0x2fe <__divmodhi4_neg2>
 2ec:	0e 94 83 01 	call	0x306	; 0x306 <__udivmodhi4>
 2f0:	07 fc       	sbrc	r0, 7
 2f2:	05 d0       	rcall	.+10     	; 0x2fe <__divmodhi4_neg2>
 2f4:	3e f4       	brtc	.+14     	; 0x304 <__divmodhi4_exit>

000002f6 <__divmodhi4_neg1>:
 2f6:	90 95       	com	r25
 2f8:	81 95       	neg	r24
 2fa:	9f 4f       	sbci	r25, 0xFF	; 255
 2fc:	08 95       	ret

000002fe <__divmodhi4_neg2>:
 2fe:	70 95       	com	r23
 300:	61 95       	neg	r22
 302:	7f 4f       	sbci	r23, 0xFF	; 255

00000304 <__divmodhi4_exit>:
 304:	08 95       	ret

00000306 <__udivmodhi4>:
 306:	aa 1b       	sub	r26, r26
 308:	bb 1b       	sub	r27, r27
 30a:	51 e1       	ldi	r21, 0x11	; 17
 30c:	07 c0       	rjmp	.+14     	; 0x31c <__udivmodhi4_ep>

0000030e <__udivmodhi4_loop>:
 30e:	aa 1f       	adc	r26, r26
 310:	bb 1f       	adc	r27, r27
 312:	a6 17       	cp	r26, r22
 314:	b7 07       	cpc	r27, r23
 316:	10 f0       	brcs	.+4      	; 0x31c <__udivmodhi4_ep>
 318:	a6 1b       	sub	r26, r22
 31a:	b7 0b       	sbc	r27, r23

0000031c <__udivmodhi4_ep>:
 31c:	88 1f       	adc	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	5a 95       	dec	r21
 322:	a9 f7       	brne	.-22     	; 0x30e <__udivmodhi4_loop>
 324:	80 95       	com	r24
 326:	90 95       	com	r25
 328:	bc 01       	movw	r22, r24
 32a:	cd 01       	movw	r24, r26
 32c:	08 95       	ret

0000032e <_exit>:
 32e:	f8 94       	cli

00000330 <__stop_program>:
 330:	ff cf       	rjmp	.-2      	; 0x330 <__stop_program>
