
Projekt_szymek_krzychu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000077a  0000080e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000077a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080011a  0080011a  00000828  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000858  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e45  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a03  00000000  00000000  00001745  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000726  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00002870  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b7  00000000  00000000  000029fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000585  00000000  00000000  00002fb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003538  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_4>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_7>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f7 e0       	ldi	r31, 0x07	; 7
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 31       	cpi	r26, 0x1A	; 26
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	aa e1       	ldi	r26, 0x1A	; 26
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a2 33       	cpi	r26, 0x32	; 50
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 4f 02 	call	0x49e	; 0x49e <main>
  ea:	0c 94 bb 03 	jmp	0x776	; 0x776 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <wait_ms>:
	//}

}

void wait_ms(uint16_t milliseconds) {
	while (milliseconds > 0) {
  f2:	14 c0       	rjmp	.+40     	; 0x11c <wait_ms+0x2a>
		// Ustaw Timer1 w tryb CTC
		TCCR1A = 0; // Wyzerowanie rejestru kontrolnego A
  f4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10); // WGM12: CTC tryb, CS11 | CS10: Preskaler 64
  f8:	2b e0       	ldi	r18, 0x0B	; 11
  fa:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

		// Ustaw wartoœæ porównania dla OCR1A, aby uzyskaæ 1 ms
		OCR1A = 249; // Liczba cykli na 1 ms - 1
  fe:	29 ef       	ldi	r18, 0xF9	; 249
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 106:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

		// Wyczyœæ licznik
		TCNT1 = 0;
 10a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 10e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

		// Poczekaj na ustawienie flagi porównania
		while (!(TIFR1 & (1 << OCF1A)));
 112:	b1 9b       	sbis	0x16, 1	; 22
 114:	fe cf       	rjmp	.-4      	; 0x112 <wait_ms+0x20>

		// Wyczyœæ flagê porównania
		TIFR1 = (1 << OCF1A);
 116:	22 e0       	ldi	r18, 0x02	; 2
 118:	26 bb       	out	0x16, r18	; 22

		// Zmniejsz licznik milisekund
		milliseconds--;
 11a:	01 97       	sbiw	r24, 0x01	; 1
	//}

}

void wait_ms(uint16_t milliseconds) {
	while (milliseconds > 0) {
 11c:	00 97       	sbiw	r24, 0x00	; 0
 11e:	51 f7       	brne	.-44     	; 0xf4 <wait_ms+0x2>
		TIFR1 = (1 << OCF1A);

		// Zmniejsz licznik milisekund
		milliseconds--;
	}
}
 120:	08 95       	ret

00000122 <eeprom_write_byte>:

void eeprom_write_byte(uint16_t address, uint8_t data) {
	while (EECR & (1 << EEPE)); //czekanie a¿ poprzedni zapis jest zakoñczony
 122:	f9 99       	sbic	0x1f, 1	; 31
 124:	fe cf       	rjmp	.-4      	; 0x122 <eeprom_write_byte>
	EEAR = address;  //gdzie ma zapisywaæ
 126:	92 bd       	out	0x22, r25	; 34
 128:	81 bd       	out	0x21, r24	; 33
	EEDR = data;     // co ma zapisywaæ
 12a:	60 bd       	out	0x20, r22	; 32
	EECR |= (1 << EEMPE); //write master enable czyli w³¹cza mo¿liwoœæ zapisu
 12c:	8f b3       	in	r24, 0x1f	; 31
 12e:	84 60       	ori	r24, 0x04	; 4
 130:	8f bb       	out	0x1f, r24	; 31
	EECR |= (1 << EEPE);  //write enable czyli zapisuje
 132:	8f b3       	in	r24, 0x1f	; 31
 134:	82 60       	ori	r24, 0x02	; 2
 136:	8f bb       	out	0x1f, r24	; 31
 138:	08 95       	ret

0000013a <eeprom_read_byte>:
}

uint8_t eeprom_read_byte(uint16_t address) {
	while (EECR & (1 << EEPE)); // to samo co poprzednio
 13a:	f9 99       	sbic	0x1f, 1	; 31
 13c:	fe cf       	rjmp	.-4      	; 0x13a <eeprom_read_byte>
	EEAR = address; //sk¹d czyta
 13e:	92 bd       	out	0x22, r25	; 34
 140:	81 bd       	out	0x21, r24	; 33
	EECR |= (1 << EERE);  // read enable
 142:	8f b3       	in	r24, 0x1f	; 31
 144:	81 60       	ori	r24, 0x01	; 1
 146:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // zwrot wartoœci
 148:	80 b5       	in	r24, 0x20	; 32
}
 14a:	08 95       	ret

0000014c <eeprom_write_array>:
//zapisanie tablicy
void eeprom_write_array(uint16_t address, int* data, uint8_t length) {
 14c:	ef 92       	push	r14
 14e:	ff 92       	push	r15
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	7c 01       	movw	r14, r24
 15a:	8b 01       	movw	r16, r22
 15c:	d4 2f       	mov	r29, r20
	for (uint8_t i = 0; i < length; i++) {
 15e:	c0 e0       	ldi	r28, 0x00	; 0
 160:	0d c0       	rjmp	.+26     	; 0x17c <eeprom_write_array+0x30>
		eeprom_write_byte(address + i, (uint8_t)data[i]);
 162:	8c 2f       	mov	r24, r28
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	fc 01       	movw	r30, r24
 168:	ee 0f       	add	r30, r30
 16a:	ff 1f       	adc	r31, r31
 16c:	e0 0f       	add	r30, r16
 16e:	f1 1f       	adc	r31, r17
 170:	60 81       	ld	r22, Z
 172:	8e 0d       	add	r24, r14
 174:	9f 1d       	adc	r25, r15
 176:	0e 94 91 00 	call	0x122	; 0x122 <eeprom_write_byte>
	EECR |= (1 << EERE);  // read enable
	return EEDR; // zwrot wartoœci
}
//zapisanie tablicy
void eeprom_write_array(uint16_t address, int* data, uint8_t length) {
	for (uint8_t i = 0; i < length; i++) {
 17a:	cf 5f       	subi	r28, 0xFF	; 255
 17c:	cd 17       	cp	r28, r29
 17e:	88 f3       	brcs	.-30     	; 0x162 <eeprom_write_array+0x16>
		eeprom_write_byte(address + i, (uint8_t)data[i]);
	}
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	ff 90       	pop	r15
 18a:	ef 90       	pop	r14
 18c:	08 95       	ret

0000018e <eeprom_read_array>:
//odczyt tablicy
void eeprom_read_array(uint16_t address, int* data, uint8_t length) {
 18e:	cf 92       	push	r12
 190:	df 92       	push	r13
 192:	ef 92       	push	r14
 194:	ff 92       	push	r15
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	6c 01       	movw	r12, r24
 1a0:	7b 01       	movw	r14, r22
 1a2:	d4 2f       	mov	r29, r20
	for (uint8_t i = 0; i < length; i++) {
 1a4:	c0 e0       	ldi	r28, 0x00	; 0
 1a6:	10 c0       	rjmp	.+32     	; 0x1c8 <eeprom_read_array+0x3a>
		data[i] = (int)eeprom_read_byte(address + i);
 1a8:	8c 2f       	mov	r24, r28
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	8c 01       	movw	r16, r24
 1ae:	00 0f       	add	r16, r16
 1b0:	11 1f       	adc	r17, r17
 1b2:	0e 0d       	add	r16, r14
 1b4:	1f 1d       	adc	r17, r15
 1b6:	8c 0d       	add	r24, r12
 1b8:	9d 1d       	adc	r25, r13
 1ba:	0e 94 9d 00 	call	0x13a	; 0x13a <eeprom_read_byte>
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	f8 01       	movw	r30, r16
 1c2:	91 83       	std	Z+1, r25	; 0x01
 1c4:	80 83       	st	Z, r24
		eeprom_write_byte(address + i, (uint8_t)data[i]);
	}
}
//odczyt tablicy
void eeprom_read_array(uint16_t address, int* data, uint8_t length) {
	for (uint8_t i = 0; i < length; i++) {
 1c6:	cf 5f       	subi	r28, 0xFF	; 255
 1c8:	cd 17       	cp	r28, r29
 1ca:	70 f3       	brcs	.-36     	; 0x1a8 <eeprom_read_array+0x1a>
		data[i] = (int)eeprom_read_byte(address + i);
	}
}
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	ff 90       	pop	r15
 1d6:	ef 90       	pop	r14
 1d8:	df 90       	pop	r13
 1da:	cf 90       	pop	r12
 1dc:	08 95       	ret

000001de <setup>:
volatile int8_t lastencoderValue = 0;
volatile int8_t direction = 1;
volatile int8_t lastdirection = 1;

void setup(void) {
	DDRC = 0x00;
 1de:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xff;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	88 b9       	out	0x08, r24	; 8
	DDRB = 0xff;
 1e4:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xff;
 1e6:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 1e8:	1b b8       	out	0x0b, r1	; 11
	
	lastStateCLK = PINC & (1 << 0);  // pocz¹tkowy stan CLK
 1ea:	86 b1       	in	r24, 0x06	; 6
 1ec:	81 70       	andi	r24, 0x01	; 1
 1ee:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <lastStateCLK>
	
	// Konfiguracja przerwañ
	PCICR |= (1 << PCIE1); // w³¹czenie przerwañ dla pinów C
 1f2:	e8 e6       	ldi	r30, 0x68	; 104
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	82 60       	ori	r24, 0x02	; 2
 1fa:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT10); // w³¹czenie na pojedynczych pinach
 1fc:	ec e6       	ldi	r30, 0x6C	; 108
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	85 60       	ori	r24, 0x05	; 5
 204:	80 83       	st	Z, r24
	
	// konfiguracja timera2
	TCCR2A |= (1 << WGM21); // ustawienie w tryb ctc
 206:	e0 eb       	ldi	r30, 0xB0	; 176
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	82 60       	ori	r24, 0x02	; 2
 20e:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22) | (1 << CS21); // Ustawienie preskalera na 256
 210:	e1 eb       	ldi	r30, 0xB1	; 177
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	86 60       	ori	r24, 0x06	; 6
 218:	80 83       	st	Z, r24
	OCR2A = 61; // 16000000/(256*1000) = 61
 21a:	8d e3       	ldi	r24, 0x3D	; 61
 21c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 |= (1 << OCIE2A); // w³¹czenie przerwania przez porównanie
 220:	e0 e7       	ldi	r30, 0x70	; 112
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	82 60       	ori	r24, 0x02	; 2
 228:	80 83       	st	Z, r24

	// Odczytaj kod z EEPROM
	eeprom_read_array(0x0F, code, 6);
 22a:	46 e0       	ldi	r20, 0x06	; 6
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	62 e0       	ldi	r22, 0x02	; 2
 230:	71 e0       	ldi	r23, 0x01	; 1
 232:	8f e0       	ldi	r24, 0x0F	; 15
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 c7 00 	call	0x18e	; 0x18e <eeprom_read_array>
 23a:	08 95       	ret

0000023c <show_digit>:
	0b01000001, // U
	0b01000111  // L
};

void show_digit(uint8_t digit_value, uint8_t position) {
	PORTB = 0xff;
 23c:	9f ef       	ldi	r25, 0xFF	; 255
 23e:	95 b9       	out	0x05, r25	; 5
	PORTD = digit[digit_value];
 240:	e8 2f       	mov	r30, r24
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	e2 5f       	subi	r30, 0xF2	; 242
 246:	fe 4f       	sbci	r31, 0xFE	; 254
 248:	80 81       	ld	r24, Z
 24a:	8b b9       	out	0x0b, r24	; 11
	switch (position) {
 24c:	61 30       	cpi	r22, 0x01	; 1
 24e:	49 f0       	breq	.+18     	; 0x262 <show_digit+0x26>
 250:	28 f0       	brcs	.+10     	; 0x25c <show_digit+0x20>
 252:	62 30       	cpi	r22, 0x02	; 2
 254:	49 f0       	breq	.+18     	; 0x268 <show_digit+0x2c>
 256:	63 30       	cpi	r22, 0x03	; 3
 258:	51 f0       	breq	.+20     	; 0x26e <show_digit+0x32>
 25a:	08 95       	ret
		case 0:
		PORTB = ~(1 << 0);
 25c:	8e ef       	ldi	r24, 0xFE	; 254
 25e:	85 b9       	out	0x05, r24	; 5
		break;
 260:	08 95       	ret
		case 1:
		PORTB = ~(1 << 1);
 262:	8d ef       	ldi	r24, 0xFD	; 253
 264:	85 b9       	out	0x05, r24	; 5
		break;
 266:	08 95       	ret
		case 2:
		PORTB = ~(1 << 2);
 268:	8b ef       	ldi	r24, 0xFB	; 251
 26a:	85 b9       	out	0x05, r24	; 5
		break;
 26c:	08 95       	ret
		case 3:
		PORTB &= ~(1 << 3);
 26e:	85 b1       	in	r24, 0x05	; 5
 270:	87 7f       	andi	r24, 0xF7	; 247
 272:	85 b9       	out	0x05, r24	; 5
 274:	08 95       	ret

00000276 <__vector_7>:
		break;
	}
}

ISR(TIMER2_COMPA_vect) {
 276:	1f 92       	push	r1
 278:	0f 92       	push	r0
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	0f 92       	push	r0
 27e:	11 24       	eor	r1, r1
 280:	2f 93       	push	r18
 282:	3f 93       	push	r19
 284:	4f 93       	push	r20
 286:	5f 93       	push	r21
 288:	6f 93       	push	r22
 28a:	7f 93       	push	r23
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
 290:	af 93       	push	r26
 292:	bf 93       	push	r27
 294:	ef 93       	push	r30
 296:	ff 93       	push	r31
	if ((state == 0)||(state==3)) {
 298:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <state>
 29c:	88 23       	and	r24, r24
 29e:	29 f0       	breq	.+10     	; 0x2aa <__vector_7+0x34>
 2a0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <state>
 2a4:	83 30       	cpi	r24, 0x03	; 3
 2a6:	09 f0       	breq	.+2      	; 0x2aa <__vector_7+0x34>
 2a8:	4f c0       	rjmp	.+158    	; 0x348 <__vector_7+0xd2>
		digits[0] = currentDigit / 1000;
 2aa:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <currentDigit>
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	68 ee       	ldi	r22, 0xE8	; 232
 2b2:	73 e0       	ldi	r23, 0x03	; 3
 2b4:	0e 94 93 03 	call	0x726	; 0x726 <__divmodhi4>
 2b8:	ed e2       	ldi	r30, 0x2D	; 45
 2ba:	f1 e0       	ldi	r31, 0x01	; 1
 2bc:	60 83       	st	Z, r22
		digits[1] = (currentDigit / 100) % 10;
 2be:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <currentDigit>
 2c2:	99 e2       	ldi	r25, 0x29	; 41
 2c4:	89 9f       	mul	r24, r25
 2c6:	91 2d       	mov	r25, r1
 2c8:	11 24       	eor	r1, r1
 2ca:	8d ec       	ldi	r24, 0xCD	; 205
 2cc:	92 95       	swap	r25
 2ce:	9f 70       	andi	r25, 0x0F	; 15
 2d0:	91 83       	std	Z+1, r25	; 0x01
		digits[2] = (currentDigit / 10) % 10;
 2d2:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <currentDigit>
 2d6:	28 9f       	mul	r18, r24
 2d8:	21 2d       	mov	r18, r1
 2da:	11 24       	eor	r1, r1
 2dc:	26 95       	lsr	r18
 2de:	26 95       	lsr	r18
 2e0:	26 95       	lsr	r18
 2e2:	28 9f       	mul	r18, r24
 2e4:	91 2d       	mov	r25, r1
 2e6:	11 24       	eor	r1, r1
 2e8:	96 95       	lsr	r25
 2ea:	96 95       	lsr	r25
 2ec:	96 95       	lsr	r25
 2ee:	99 0f       	add	r25, r25
 2f0:	39 2f       	mov	r19, r25
 2f2:	33 0f       	add	r19, r19
 2f4:	33 0f       	add	r19, r19
 2f6:	93 0f       	add	r25, r19
 2f8:	29 1b       	sub	r18, r25
 2fa:	22 83       	std	Z+2, r18	; 0x02
		digits[3] = currentDigit % 10;
 2fc:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <currentDigit>
 300:	28 9f       	mul	r18, r24
 302:	81 2d       	mov	r24, r1
 304:	11 24       	eor	r1, r1
 306:	86 95       	lsr	r24
 308:	86 95       	lsr	r24
 30a:	86 95       	lsr	r24
 30c:	88 0f       	add	r24, r24
 30e:	98 2f       	mov	r25, r24
 310:	99 0f       	add	r25, r25
 312:	99 0f       	add	r25, r25
 314:	89 0f       	add	r24, r25
 316:	28 1b       	sub	r18, r24
 318:	23 83       	std	Z+3, r18	; 0x03
		show_digit(digits[position], position);
 31a:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <position>
 31e:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <position>
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	e3 5d       	subi	r30, 0xD3	; 211
 326:	fe 4f       	sbci	r31, 0xFE	; 254
 328:	80 81       	ld	r24, Z
 32a:	0e 94 1e 01 	call	0x23c	; 0x23c <show_digit>
		if (position == 3) {
 32e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <position>
 332:	83 30       	cpi	r24, 0x03	; 3
 334:	19 f4       	brne	.+6      	; 0x33c <__vector_7+0xc6>
			position = 0;
 336:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <position>
 33a:	15 c0       	rjmp	.+42     	; 0x366 <__vector_7+0xf0>
			} else {
			position++;
 33c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <position>
 340:	8f 5f       	subi	r24, 0xFF	; 255
 342:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <position>
 346:	0f c0       	rjmp	.+30     	; 0x366 <__vector_7+0xf0>
		}
		} else if (state == 1) {
 348:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <state>
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	21 f4       	brne	.+8      	; 0x358 <__vector_7+0xe2>
		PORTB = 0x00;
 350:	15 b8       	out	0x05, r1	; 5
		PORTD = digit[10];
 352:	81 e4       	ldi	r24, 0x41	; 65
 354:	8b b9       	out	0x0b, r24	; 11
 356:	07 c0       	rjmp	.+14     	; 0x366 <__vector_7+0xf0>
		} else if (state == 2) {
 358:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <state>
 35c:	82 30       	cpi	r24, 0x02	; 2
 35e:	19 f4       	brne	.+6      	; 0x366 <__vector_7+0xf0>
		PORTB = 0x00;
 360:	15 b8       	out	0x05, r1	; 5
		PORTD = digit[11];
 362:	87 e4       	ldi	r24, 0x47	; 71
 364:	8b b9       	out	0x0b, r24	; 11
	}
}
 366:	ff 91       	pop	r31
 368:	ef 91       	pop	r30
 36a:	bf 91       	pop	r27
 36c:	af 91       	pop	r26
 36e:	9f 91       	pop	r25
 370:	8f 91       	pop	r24
 372:	7f 91       	pop	r23
 374:	6f 91       	pop	r22
 376:	5f 91       	pop	r21
 378:	4f 91       	pop	r20
 37a:	3f 91       	pop	r19
 37c:	2f 91       	pop	r18
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <__vector_4>:

ISR(PCINT1_vect) {
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	2f 93       	push	r18
 394:	3f 93       	push	r19
 396:	4f 93       	push	r20
 398:	5f 93       	push	r21
 39a:	6f 93       	push	r22
 39c:	7f 93       	push	r23
 39e:	8f 93       	push	r24
 3a0:	9f 93       	push	r25
 3a2:	af 93       	push	r26
 3a4:	bf 93       	push	r27
 3a6:	ef 93       	push	r30
 3a8:	ff 93       	push	r31
	uint8_t currentStateCLK = PINC & (1 << 0);
 3aa:	86 b1       	in	r24, 0x06	; 6
 3ac:	81 70       	andi	r24, 0x01	; 1
	if (currentStateCLK != lastStateCLK) {
 3ae:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <lastStateCLK>
 3b2:	89 17       	cp	r24, r25
 3b4:	d1 f0       	breq	.+52     	; 0x3ea <__vector_4+0x62>
		uint8_t stateDT = PINC & (1 << 1);
 3b6:	96 b1       	in	r25, 0x06	; 6
 3b8:	92 70       	andi	r25, 0x02	; 2
		if (currentStateCLK == 0) {
 3ba:	81 11       	cpse	r24, r1
 3bc:	16 c0       	rjmp	.+44     	; 0x3ea <__vector_4+0x62>
			if (stateDT == 0) {
 3be:	59 f4       	brne	.+22     	; 0x3d6 <__vector_4+0x4e>
				encoderValue++;
 3c0:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <encoderValue>
 3c4:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <encoderValue+0x1>
 3c8:	2f 5f       	subi	r18, 0xFF	; 255
 3ca:	3f 4f       	sbci	r19, 0xFF	; 255
 3cc:	30 93 20 01 	sts	0x0120, r19	; 0x800120 <encoderValue+0x1>
 3d0:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <encoderValue>
 3d4:	0a c0       	rjmp	.+20     	; 0x3ea <__vector_4+0x62>
				} else {
				encoderValue--;
 3d6:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <encoderValue>
 3da:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <encoderValue+0x1>
 3de:	21 50       	subi	r18, 0x01	; 1
 3e0:	31 09       	sbc	r19, r1
 3e2:	30 93 20 01 	sts	0x0120, r19	; 0x800120 <encoderValue+0x1>
 3e6:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <encoderValue>
			}
		}
	}
	lastStateCLK = currentStateCLK;
 3ea:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <lastStateCLK>
	wait_ms(delay);
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 79 00 	call	0xf2	; 0xf2 <wait_ms>
	
	if ((state==2)&&((PINC&(1<<2)))==0){
 3f6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <state>
 3fa:	82 30       	cpi	r24, 0x02	; 2
 3fc:	e9 f4       	brne	.+58     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 3fe:	32 99       	sbic	0x06, 2	; 6
 400:	1b c0       	rjmp	.+54     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
		encoderValue=0;
 402:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <encoderValue+0x1>
 406:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <encoderValue>
		lastencoderValue=0;
 40a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
		state=0;
 40e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <state>
		step=0;
 412:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <step>
		direction=1;
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <direction>
		for (int i = 0; i < 6; i++) {
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	08 c0       	rjmp	.+16     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			number[i] = 0;
 422:	fc 01       	movw	r30, r24
 424:	ee 0f       	add	r30, r30
 426:	ff 1f       	adc	r31, r31
 428:	ef 5d       	subi	r30, 0xDF	; 223
 42a:	fe 4f       	sbci	r31, 0xFE	; 254
 42c:	11 82       	std	Z+1, r1	; 0x01
 42e:	10 82       	st	Z, r1
		encoderValue=0;
		lastencoderValue=0;
		state=0;
		step=0;
		direction=1;
		for (int i = 0; i < 6; i++) {
 430:	01 96       	adiw	r24, 0x01	; 1
 432:	86 30       	cpi	r24, 0x06	; 6
 434:	91 05       	cpc	r25, r1
 436:	ac f3       	brlt	.-22     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
			number[i] = 0;
		}
	}
	if ((state==1)&&((PINC&(1<<2)))==0){
 438:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <state>
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	f1 f4       	brne	.+60     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 440:	32 99       	sbic	0x06, 2	; 6
 442:	1c c0       	rjmp	.+56     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
		encoderValue=0;
 444:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <encoderValue+0x1>
 448:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <encoderValue>
		lastencoderValue=0;
 44c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
		state=3;
 450:	83 e0       	ldi	r24, 0x03	; 3
 452:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <state>
		step=0;
 456:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <step>
		direction=1;
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <direction>
		for (int i = 0; i < 6; i++) {
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	08 c0       	rjmp	.+16     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
			number[i] = 0;
 466:	fc 01       	movw	r30, r24
 468:	ee 0f       	add	r30, r30
 46a:	ff 1f       	adc	r31, r31
 46c:	ef 5d       	subi	r30, 0xDF	; 223
 46e:	fe 4f       	sbci	r31, 0xFE	; 254
 470:	11 82       	std	Z+1, r1	; 0x01
 472:	10 82       	st	Z, r1
		encoderValue=0;
		lastencoderValue=0;
		state=3;
		step=0;
		direction=1;
		for (int i = 0; i < 6; i++) {
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	86 30       	cpi	r24, 0x06	; 6
 478:	91 05       	cpc	r25, r1
 47a:	ac f3       	brlt	.-22     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
	}

	//if (state == 3) {
	//	eeprom_write_array(0x00, code, 6);
	//}
}
 47c:	ff 91       	pop	r31
 47e:	ef 91       	pop	r30
 480:	bf 91       	pop	r27
 482:	af 91       	pop	r26
 484:	9f 91       	pop	r25
 486:	8f 91       	pop	r24
 488:	7f 91       	pop	r23
 48a:	6f 91       	pop	r22
 48c:	5f 91       	pop	r21
 48e:	4f 91       	pop	r20
 490:	3f 91       	pop	r19
 492:	2f 91       	pop	r18
 494:	0f 90       	pop	r0
 496:	0f be       	out	0x3f, r0	; 63
 498:	0f 90       	pop	r0
 49a:	1f 90       	pop	r1
 49c:	18 95       	reti

0000049e <main>:

int main(void) {
	setup();
 49e:	0e 94 ef 00 	call	0x1de	; 0x1de <setup>
	sei();
 4a2:	78 94       	sei
	currentDigit = 0;
 4a4:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <currentDigit>
	for (int i = 0; i < 6; i++) {
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	08 c0       	rjmp	.+16     	; 0x4be <main+0x20>
		number[i] = 0;
 4ae:	fc 01       	movw	r30, r24
 4b0:	ee 0f       	add	r30, r30
 4b2:	ff 1f       	adc	r31, r31
 4b4:	ef 5d       	subi	r30, 0xDF	; 223
 4b6:	fe 4f       	sbci	r31, 0xFE	; 254
 4b8:	11 82       	std	Z+1, r1	; 0x01
 4ba:	10 82       	st	Z, r1

int main(void) {
	setup();
	sei();
	currentDigit = 0;
	for (int i = 0; i < 6; i++) {
 4bc:	01 96       	adiw	r24, 0x01	; 1
 4be:	86 30       	cpi	r24, 0x06	; 6
 4c0:	91 05       	cpc	r25, r1
 4c2:	ac f3       	brlt	.-22     	; 0x4ae <main+0x10>
		number[i] = 0;
	}

	while (1) {
		if((encoderValue!=lastencoderValue)&&((state==0)||(state==3))){
 4c4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 4c8:	08 2e       	mov	r0, r24
 4ca:	00 0c       	add	r0, r0
 4cc:	99 0b       	sbc	r25, r25
 4ce:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <encoderValue>
 4d2:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <encoderValue+0x1>
 4d6:	82 17       	cp	r24, r18
 4d8:	93 07       	cpc	r25, r19
 4da:	09 f4       	brne	.+2      	; 0x4de <main+0x40>
 4dc:	85 c0       	rjmp	.+266    	; 0x5e8 <main+0x14a>
 4de:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <state>
 4e2:	88 23       	and	r24, r24
 4e4:	29 f0       	breq	.+10     	; 0x4f0 <main+0x52>
 4e6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <state>
 4ea:	83 30       	cpi	r24, 0x03	; 3
 4ec:	09 f0       	breq	.+2      	; 0x4f0 <main+0x52>
 4ee:	7c c0       	rjmp	.+248    	; 0x5e8 <main+0x14a>
			if (lastencoderValue < encoderValue) {
 4f0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 4f4:	08 2e       	mov	r0, r24
 4f6:	00 0c       	add	r0, r0
 4f8:	99 0b       	sbc	r25, r25
 4fa:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <encoderValue>
 4fe:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <encoderValue+0x1>
 502:	82 17       	cp	r24, r18
 504:	93 07       	cpc	r25, r19
 506:	1c f4       	brge	.+6      	; 0x50e <main+0x70>
				direction = 1;
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <direction>
			}
			if (lastencoderValue > encoderValue) {
 50e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 512:	08 2e       	mov	r0, r24
 514:	00 0c       	add	r0, r0
 516:	99 0b       	sbc	r25, r25
 518:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <encoderValue>
 51c:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <encoderValue+0x1>
 520:	28 17       	cp	r18, r24
 522:	39 07       	cpc	r19, r25
 524:	1c f4       	brge	.+6      	; 0x52c <main+0x8e>
				direction = -1;
 526:	8f ef       	ldi	r24, 0xFF	; 255
 528:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <direction>
			}
			if (lastdirection != direction) {
 52c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 530:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <direction>
 534:	98 17       	cp	r25, r24
 536:	51 f1       	breq	.+84     	; 0x58c <main+0xee>
				if (state == 3){
 538:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <state>
 53c:	83 30       	cpi	r24, 0x03	; 3
 53e:	91 f4       	brne	.+36     	; 0x564 <main+0xc6>
					code[step]=number[step];
 540:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <step>
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <step>
 54a:	b0 e0       	ldi	r27, 0x00	; 0
 54c:	aa 0f       	add	r26, r26
 54e:	bb 1f       	adc	r27, r27
 550:	af 5d       	subi	r26, 0xDF	; 223
 552:	be 4f       	sbci	r27, 0xFE	; 254
 554:	8d 91       	ld	r24, X+
 556:	9c 91       	ld	r25, X
 558:	ee 0f       	add	r30, r30
 55a:	ff 1f       	adc	r31, r31
 55c:	ee 5f       	subi	r30, 0xFE	; 254
 55e:	fe 4f       	sbci	r31, 0xFE	; 254
 560:	91 83       	std	Z+1, r25	; 0x01
 562:	80 83       	st	Z, r24
				}
				step++;
 564:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <step>
 568:	8f 5f       	subi	r24, 0xFF	; 255
 56a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <step>
				lastdirection = direction;
 56e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <direction>
 572:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				encoderValue = 0;
 576:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <encoderValue+0x1>
 57a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <encoderValue>
				lastencoderValue = encoderValue;
 57e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <encoderValue>
 582:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <encoderValue+0x1>
 586:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 58a:	2e c0       	rjmp	.+92     	; 0x5e8 <main+0x14a>
				} else {
				lastencoderValue = encoderValue;
 58c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <encoderValue>
 590:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <encoderValue+0x1>
 594:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
				number[step] = abs(encoderValue);
 598:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <step>
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <encoderValue>
 5a2:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <encoderValue+0x1>
 5a6:	99 23       	and	r25, r25
 5a8:	1c f4       	brge	.+6      	; 0x5b0 <main+0x112>
 5aa:	91 95       	neg	r25
 5ac:	81 95       	neg	r24
 5ae:	91 09       	sbc	r25, r1
 5b0:	ee 0f       	add	r30, r30
 5b2:	ff 1f       	adc	r31, r31
 5b4:	ef 5d       	subi	r30, 0xDF	; 223
 5b6:	fe 4f       	sbci	r31, 0xFE	; 254
 5b8:	91 83       	std	Z+1, r25	; 0x01
 5ba:	80 83       	st	Z, r24
				if (state == 3){
 5bc:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <state>
 5c0:	83 30       	cpi	r24, 0x03	; 3
 5c2:	91 f4       	brne	.+36     	; 0x5e8 <main+0x14a>
					code[step]=number[step];
 5c4:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <step>
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <step>
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
 5d0:	aa 0f       	add	r26, r26
 5d2:	bb 1f       	adc	r27, r27
 5d4:	af 5d       	subi	r26, 0xDF	; 223
 5d6:	be 4f       	sbci	r27, 0xFE	; 254
 5d8:	8d 91       	ld	r24, X+
 5da:	9c 91       	ld	r25, X
 5dc:	ee 0f       	add	r30, r30
 5de:	ff 1f       	adc	r31, r31
 5e0:	ee 5f       	subi	r30, 0xFE	; 254
 5e2:	fe 4f       	sbci	r31, 0xFE	; 254
 5e4:	91 83       	std	Z+1, r25	; 0x01
 5e6:	80 83       	st	Z, r24
				}
				
			}
		}
		
		if (number[step] >= 100 || number[step] <= -100) {
 5e8:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <step>
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	ee 0f       	add	r30, r30
 5f0:	ff 1f       	adc	r31, r31
 5f2:	ef 5d       	subi	r30, 0xDF	; 223
 5f4:	fe 4f       	sbci	r31, 0xFE	; 254
 5f6:	80 81       	ld	r24, Z
 5f8:	91 81       	ldd	r25, Z+1	; 0x01
 5fa:	84 36       	cpi	r24, 0x64	; 100
 5fc:	91 05       	cpc	r25, r1
 5fe:	64 f4       	brge	.+24     	; 0x618 <main+0x17a>
 600:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <step>
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	ee 0f       	add	r30, r30
 608:	ff 1f       	adc	r31, r31
 60a:	ef 5d       	subi	r30, 0xDF	; 223
 60c:	fe 4f       	sbci	r31, 0xFE	; 254
 60e:	80 81       	ld	r24, Z
 610:	91 81       	ldd	r25, Z+1	; 0x01
 612:	8d 39       	cpi	r24, 0x9D	; 157
 614:	9f 4f       	sbci	r25, 0xFF	; 255
 616:	9c f4       	brge	.+38     	; 0x63e <main+0x1a0>
			encoderValue = 0;
 618:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <encoderValue+0x1>
 61c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <encoderValue>
			lastencoderValue = encoderValue;
 620:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <encoderValue>
 624:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <encoderValue+0x1>
 628:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
			number[step] = 0;
 62c:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <step>
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	ee 0f       	add	r30, r30
 634:	ff 1f       	adc	r31, r31
 636:	ef 5d       	subi	r30, 0xDF	; 223
 638:	fe 4f       	sbci	r31, 0xFE	; 254
 63a:	11 82       	std	Z+1, r1	; 0x01
 63c:	10 82       	st	Z, r1
		}
		
		currentDigit = (number[step]);
 63e:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <step>
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	ee 0f       	add	r30, r30
 646:	ff 1f       	adc	r31, r31
 648:	ef 5d       	subi	r30, 0xDF	; 223
 64a:	fe 4f       	sbci	r31, 0xFE	; 254
 64c:	80 81       	ld	r24, Z
 64e:	91 81       	ldd	r25, Z+1	; 0x01
 650:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <currentDigit>
		
		if (step == 6) {
 654:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <step>
 658:	86 30       	cpi	r24, 0x06	; 6
 65a:	b9 f5       	brne	.+110    	; 0x6ca <main+0x22c>
 65c:	13 c0       	rjmp	.+38     	; 0x684 <main+0x1e6>
			uint8_t correct = 1;
			for (int i = 0; i < 6; i++) {
				if (number[i] != code[i]) {
 65e:	c9 01       	movw	r24, r18
 660:	88 0f       	add	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	fc 01       	movw	r30, r24
 666:	ef 5d       	subi	r30, 0xDF	; 223
 668:	fe 4f       	sbci	r31, 0xFE	; 254
 66a:	40 81       	ld	r20, Z
 66c:	51 81       	ldd	r21, Z+1	; 0x01
 66e:	fc 01       	movw	r30, r24
 670:	ee 5f       	subi	r30, 0xFE	; 254
 672:	fe 4f       	sbci	r31, 0xFE	; 254
 674:	80 81       	ld	r24, Z
 676:	91 81       	ldd	r25, Z+1	; 0x01
 678:	48 17       	cp	r20, r24
 67a:	59 07       	cpc	r21, r25
 67c:	51 f4       	brne	.+20     	; 0x692 <main+0x1f4>
		
		currentDigit = (number[step]);
		
		if (step == 6) {
			uint8_t correct = 1;
			for (int i = 0; i < 6; i++) {
 67e:	2f 5f       	subi	r18, 0xFF	; 255
 680:	3f 4f       	sbci	r19, 0xFF	; 255
 682:	02 c0       	rjmp	.+4      	; 0x688 <main+0x1ea>
 684:	20 e0       	ldi	r18, 0x00	; 0
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	26 30       	cpi	r18, 0x06	; 6
 68a:	31 05       	cpc	r19, r1
 68c:	44 f3       	brlt	.-48     	; 0x65e <main+0x1c0>
		}
		
		currentDigit = (number[step]);
		
		if (step == 6) {
			uint8_t correct = 1;
 68e:	c1 e0       	ldi	r28, 0x01	; 1
 690:	01 c0       	rjmp	.+2      	; 0x694 <main+0x1f6>
			for (int i = 0; i < 6; i++) {
				if (number[i] != code[i]) {
					correct = 0;
 692:	c0 e0       	ldi	r28, 0x00	; 0
					break;
				}
			}
			if (correct==1) {
 694:	c1 30       	cpi	r28, 0x01	; 1
 696:	79 f4       	brne	.+30     	; 0x6b6 <main+0x218>
				eeprom_write_array(0x0F, code, 6);
 698:	46 e0       	ldi	r20, 0x06	; 6
 69a:	62 e0       	ldi	r22, 0x02	; 2
 69c:	71 e0       	ldi	r23, 0x01	; 1
 69e:	8f e0       	ldi	r24, 0x0F	; 15
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 a6 00 	call	0x14c	; 0x14c <eeprom_write_array>
				state = 1;
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <state>
				step++;
 6ac:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <step>
 6b0:	8f 5f       	subi	r24, 0xFF	; 255
 6b2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <step>
			}
			if(correct==0){
 6b6:	c1 11       	cpse	r28, r1
 6b8:	08 c0       	rjmp	.+16     	; 0x6ca <main+0x22c>
				state = 2;
 6ba:	82 e0       	ldi	r24, 0x02	; 2
 6bc:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <state>
				step++;
 6c0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <step>
 6c4:	8f 5f       	subi	r24, 0xFF	; 255
 6c6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <step>
			}
		}
		if((state == 1)&&(encoderValue!=lastencoderValue)){
 6ca:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <state>
 6ce:	81 30       	cpi	r24, 0x01	; 1
 6d0:	09 f0       	breq	.+2      	; 0x6d4 <main+0x236>
 6d2:	f8 ce       	rjmp	.-528    	; 0x4c4 <main+0x26>
 6d4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 6d8:	08 2e       	mov	r0, r24
 6da:	00 0c       	add	r0, r0
 6dc:	99 0b       	sbc	r25, r25
 6de:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <encoderValue>
 6e2:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <encoderValue+0x1>
 6e6:	82 17       	cp	r24, r18
 6e8:	93 07       	cpc	r25, r19
 6ea:	09 f4       	brne	.+2      	; 0x6ee <main+0x250>
 6ec:	eb ce       	rjmp	.-554    	; 0x4c4 <main+0x26>
			encoderValue=0;
 6ee:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <encoderValue+0x1>
 6f2:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <encoderValue>
			lastencoderValue=0;
 6f6:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
			state=0;
 6fa:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <state>
			step=0;
 6fe:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <step>
			direction=1;
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <direction>
			for (int i = 0; i < 6; i++) {
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	08 c0       	rjmp	.+16     	; 0x71e <main+0x280>
				number[i] = 0;
 70e:	fc 01       	movw	r30, r24
 710:	ee 0f       	add	r30, r30
 712:	ff 1f       	adc	r31, r31
 714:	ef 5d       	subi	r30, 0xDF	; 223
 716:	fe 4f       	sbci	r31, 0xFE	; 254
 718:	11 82       	std	Z+1, r1	; 0x01
 71a:	10 82       	st	Z, r1
			encoderValue=0;
			lastencoderValue=0;
			state=0;
			step=0;
			direction=1;
			for (int i = 0; i < 6; i++) {
 71c:	01 96       	adiw	r24, 0x01	; 1
 71e:	86 30       	cpi	r24, 0x06	; 6
 720:	91 05       	cpc	r25, r1
 722:	ac f3       	brlt	.-22     	; 0x70e <main+0x270>
 724:	cf ce       	rjmp	.-610    	; 0x4c4 <main+0x26>

00000726 <__divmodhi4>:
 726:	97 fb       	bst	r25, 7
 728:	07 2e       	mov	r0, r23
 72a:	16 f4       	brtc	.+4      	; 0x730 <__divmodhi4+0xa>
 72c:	00 94       	com	r0
 72e:	07 d0       	rcall	.+14     	; 0x73e <__divmodhi4_neg1>
 730:	77 fd       	sbrc	r23, 7
 732:	09 d0       	rcall	.+18     	; 0x746 <__divmodhi4_neg2>
 734:	0e 94 a7 03 	call	0x74e	; 0x74e <__udivmodhi4>
 738:	07 fc       	sbrc	r0, 7
 73a:	05 d0       	rcall	.+10     	; 0x746 <__divmodhi4_neg2>
 73c:	3e f4       	brtc	.+14     	; 0x74c <__divmodhi4_exit>

0000073e <__divmodhi4_neg1>:
 73e:	90 95       	com	r25
 740:	81 95       	neg	r24
 742:	9f 4f       	sbci	r25, 0xFF	; 255
 744:	08 95       	ret

00000746 <__divmodhi4_neg2>:
 746:	70 95       	com	r23
 748:	61 95       	neg	r22
 74a:	7f 4f       	sbci	r23, 0xFF	; 255

0000074c <__divmodhi4_exit>:
 74c:	08 95       	ret

0000074e <__udivmodhi4>:
 74e:	aa 1b       	sub	r26, r26
 750:	bb 1b       	sub	r27, r27
 752:	51 e1       	ldi	r21, 0x11	; 17
 754:	07 c0       	rjmp	.+14     	; 0x764 <__udivmodhi4_ep>

00000756 <__udivmodhi4_loop>:
 756:	aa 1f       	adc	r26, r26
 758:	bb 1f       	adc	r27, r27
 75a:	a6 17       	cp	r26, r22
 75c:	b7 07       	cpc	r27, r23
 75e:	10 f0       	brcs	.+4      	; 0x764 <__udivmodhi4_ep>
 760:	a6 1b       	sub	r26, r22
 762:	b7 0b       	sbc	r27, r23

00000764 <__udivmodhi4_ep>:
 764:	88 1f       	adc	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	5a 95       	dec	r21
 76a:	a9 f7       	brne	.-22     	; 0x756 <__udivmodhi4_loop>
 76c:	80 95       	com	r24
 76e:	90 95       	com	r25
 770:	bc 01       	movw	r22, r24
 772:	cd 01       	movw	r24, r26
 774:	08 95       	ret

00000776 <_exit>:
 776:	f8 94       	cli

00000778 <__stop_program>:
 778:	ff cf       	rjmp	.-2      	; 0x778 <__stop_program>
