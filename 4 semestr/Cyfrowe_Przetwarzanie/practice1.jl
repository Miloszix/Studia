##zad1
begin
    function rozwiazanie_1(;
        fp::Float64=385.71,
        t1::Float64=5.39,
        N::Int=54,
    )
    ramp_wave(t) = 2*rem(t,1,RoundNearest)
    sawtooth_wave(t) = -2 * rem(t,1, RoundNearest)
    triangle_wave(t) = ifelse(mod(t+1/4, 1.0)< 1/2, 4mod(t+1/4, 1.0)-1,-4mod(t+1/4,1.0)+3)
    square_wabe(t) = ifelse(mod(t,1)<0.5,1,-1)
    energy(x)=sum(abs2, x)
    power(x)= energy(x)/length(x)
    rms(x)= sqrt(power(x))

    g = sawtooth_wave
    t = range( start=t1, step=(1/fp), length=N)
    y = 1.8 * g.(4.8 .* t .-0.5)

    return rms(y)
    end
    out1=rozwiazanie_1()
end
##rozw1
begin
    function rozw1(
        fp::Float64 = 275.4,
        t1::Float64 = 7.14,
        N::Int = 990,
    )

    rampwave(t)= 2* rem(t,1,RoundNearest)
    trianglewave(t)= ifelse(mod(t+1/4, 1)<1/2,4mod(t+1/4,1)-1,4mod(t+1/4,1)-3)
    squarewave(t)=ifelse(mod(t,1)<1/2,1,-1)
    energy1(x)=sum(abs2,x)
    power1(x)=energy1(x)/length(x)
    rms1(x)=sqrt(power1(x))
      
        g=trianglewave
        t=range(start=t1, step=(1/fp), length=N)
        y =0.2*g.(2.1.*t.-0.8)

        return energy1(y)

    end
    out1 = rozw1()
end

begin
    function rozwiazanie_1(;
        fp::Float64 = 149.38,
        t1::Float64 = 3.92,
        N::Int = 19,
    )
    rampwave(t)=2*rem(t,1,RoundNearest)
    energy(x)=sum(abs2,x)
    power(x)=energy(x)/length(x)
    rms(x)=sqrt(power(x))

    g = rampwave
    t = range(start=t1, step=(1/fp),length=N)
    y=3.5*g.(1.1 .*t .-1)
        missing
    return(rms(y))
    end
    out = rozwiazanie_1() 
end

##zad 2
begin
function rozwiazanie_2(;
    m::Vector{Float64} = [0.9, 0.9006, 0.9012, 0.9018, 0.9024, 0.903, 0.9036, 0.9042, 0.9048, 0.9054, 0.906, 0.9066, 0.9072, 0.9078, 0.9084, 0.909, 0.9096, 0.9102, 0.9108, 0.9114, 0.912, 0.9126, 0.9132, 0.9138, 0.9144, 0.915, 0.9156, 0.9162, 0.9168, 0.9174, 0.918, 0.9186, 0.9192, 0.9198, 0.9204, 0.921, 0.9216, 0.9222, 0.9228, 0.9234, 0.924, 0.9246, 0.9252, 0.9258, 0.9264, 0.927, 0.9276, 0.9282, 0.9288, 0.9294, 0.93, 0.9306, 0.9312, 0.9318, 0.9324, 0.933, 0.9336, 0.9342, 0.9348, 0.9354, 0.936, 0.9366],
    s::Vector{Float64} = [0.325, 0.1889, 0.1077, 0.0439, 0.753, 0.14, 0.0874, 0.9302, 0.3295, 0.3133, 0.0251, 0.7461, 0.789, 0.8118, 0.2812, 0.1842, 0.2146, 0.7614, 0.8531, 0.9176, 0.4703, 0.3589, 0.5964, 0.1687, 0.0462, 0.7169, 0.9599, 0.9929, 0.4917, 0.4996, 0.1596, 0.3737, 0.6306, 0.7574, 0.4192, 0.7193, 0.7613, 0.0041, 0.0244, 0.2929, 0.1948, 0.9827, 0.1149, 0.9915, 0.5461, 0.4918, 0.2342, 0.6548, 0.7084, 0.9898, 0.8635, 0.2133, 0.5999, 0.8036, 0.5048, 0.1552, 0.2904, 0.4823, 0.0449, 0.7898, 0.7075, 0.5416],
    t::Vector{Float64} = [0.93342, 0.91896, 0.9315, 0.91026, 0.90018, 0.9162, 0.93366, 0.93318, 0.91104, 0.91962, 0.93342, 0.9066, 0.9237],
)
    n = length(m)
    g = 0

    for i in eachindex(t)
        for j in 1:n
            
            g+=s[j]*sinc((t[i]-m[j])/(m[2]-m[1]))
        end
        
    end

    return g
end
    rozwiazanie_2()
end



begin
    function rozwiazanie_2(;
m::Vector{Float64} = [-3.0, -2.9957, -2.9914, -2.9871, -2.9828, -2.9785, -2.9742, -2.9699, -2.9656, -2.9613, -2.957, -2.9527, -2.9484, -2.9441, -2.9398, -2.9355, -2.9312, -2.9269, -2.9226, -2.9183, -2.914, -2.9097, -2.9054, -2.9011, -2.8968, -2.8925, -2.8882, -2.8839, -2.8796, -2.8753, -2.871, -2.8667, -2.8624, -2.8581, -2.8538, -2.8495, -2.8452, -2.8409, -2.8366, -2.8323, -2.828, -2.8237, -2.8194, -2.8151, -2.8108, -2.8065, -2.8022, -2.7979, -2.7936, -2.7893, -2.785, -2.7807, -2.7764, -2.7721, -2.7678, -2.7635, -2.7592, -2.7549, -2.7506, -2.7463, -2.742, -2.7377, -2.7334, -2.7291, -2.7248, -2.7205, -2.7162, -2.7119, -2.7076, -2.7033, -2.699, -2.6947, -2.6904, -2.6861, -2.6818, -2.6775, -2.6732, -2.6689, -2.6646, -2.6603, -2.656, -2.6517, -2.6474, -2.6431, -2.6388, -2.6345, -2.6302, -2.6259, -2.6216, -2.6173],
s::Vector{Float64} = [0.1734, 0.0051, 0.7411, 0.9336, 0.63, 0.8657, 0.4378, 0.7144, 0.4069, 0.5707, 0.4507, 0.5162, 0.916, 0.8624, 0.0689, 0.3263, 0.7843, 0.4078, 0.5912, 0.7185, 0.0269, 0.0006, 0.8878, 0.9254, 0.5988, 0.6113, 0.2881, 0.7037, 0.1185, 0.4622, 0.1277, 0.9019, 0.4247, 0.7636, 0.5986, 0.1433, 0.0438, 0.8799, 0.46, 0.5724, 0.3467, 0.8197, 0.6974, 0.2512, 0.0892, 0.6904, 0.2939, 0.2022, 0.7382, 0.0708, 0.1646, 0.1127, 0.4232, 0.2843, 0.9898, 0.609, 0.0666, 0.613, 0.6309, 0.334, 0.1616, 0.6389, 0.1142, 0.2356, 0.6688, 0.829, 0.5908, 0.2684, 0.8233, 0.4745, 0.3736, 0.6231, 0.402, 0.4541, 0.4987, 0.7541, 0.2192, 0.5571, 0.2586, 0.9417, 0.3565, 0.6522, 0.02, 0.1003, 0.3761, 0.4915, 0.3469, 0.978, 0.2223, 0.8752],
t::Vector{Float64} = [-2.97635, -2.90454, -2.69169, -2.77683, -2.65944],
)
        n = length(m)
        g = 0

        for i in eachindex(t)
            for j in 1:n
                g+=s[j]*sinc((t[i]-m[j])/(m[2]-m[1]))
            end 
            
        end
        return g
end

rozwiazanie_2()
    
end


begin
    function rozwiazanie_2(;
        m::Vector{Float64} = [3.1, 3.109, 3.118, 3.127, 3.136, 3.145, 3.154, 3.163, 3.172, 3.181, 3.19, 3.199, 3.208, 3.217, 3.226, 3.235, 3.244, 3.253, 3.262, 3.271, 3.28, 3.289, 3.298, 3.307, 3.316, 3.325, 3.334, 3.343, 3.352, 3.361, 3.37, 3.379, 3.388, 3.397, 3.406, 3.415, 3.424, 3.433, 3.442, 3.451, 3.46, 3.469, 3.478, 3.487, 3.496, 3.505, 3.514, 3.523, 3.532, 3.541, 3.55, 3.559, 3.568, 3.577, 3.586, 3.595, 3.604, 3.613, 3.622, 3.631, 3.64, 3.649, 3.658, 3.667, 3.676, 3.685, 3.694, 3.703, 3.712, 3.721, 3.73, 3.739, 3.748, 3.757, 3.766, 3.775, 3.784, 3.793, 3.802, 3.811, 3.82, 3.829, 3.838, 3.847, 3.856, 3.865, 3.874],
        s::Vector{Float64} = [0.4142, 0.2988, 0.0306, 0.8581, 0.0885, 0.7181, 0.5899, 0.2866, 0.8537, 0.0308, 0.9399, 0.5017, 0.6345, 0.702, 0.3415, 0.2043, 0.6211, 0.9988, 0.4922, 0.6271, 0.8026, 0.1179, 0.1871, 0.2973, 0.1991, 0.1734, 0.472, 0.3992, 0.2162, 0.0878, 0.7583, 0.5365, 0.1274, 0.554, 0.8966, 0.3111, 0.8029, 0.1886, 0.0494, 0.4318, 0.3193, 0.5036, 0.6283, 0.4453, 0.5191, 0.0037, 0.2612, 0.5511, 0.8392, 0.2527, 0.3356, 0.2525, 0.8416, 0.6335, 0.5491, 0.3081, 0.0194, 0.8063, 0.9749, 0.9346, 0.4488, 0.1389, 0.7424, 0.507, 0.2464, 0.6327, 0.7463, 0.0816, 0.5989, 0.7117, 0.2471, 0.0148, 0.3814, 0.5266, 0.8289, 0.0893, 0.7459, 0.501, 0.7161, 0.7214, 0.0205, 0.4786, 0.8922, 0.3127, 0.3142, 0.4614, 0.5494],
        t::Vector{Float64} = [3.3601, 3.7849, 3.3844, 3.7363, 3.6841, 3.2179, 3.2809, 3.442, 3.1279, 3.7741],
    )
        n = length(m)
        g =0

        for i in eachindex(t)
            for j in 1:n

                g+= s[j]*sinc((t[i]-m[j])/(m[2]-m[1]))

                
            end
            
        end
        return g
    end
    rozwiazanie_2()
end


begin
    function rozwiazanie_2(;
        m::Vector{Float64} = [-2.5, -2.4936, -2.4872, -2.4808, -2.4744, -2.468, -2.4616, -2.4552, -2.4488, -2.4424, -2.436, -2.4296, -2.4232, -2.4168, -2.4104, -2.404, -2.3976, -2.3912, -2.3848, -2.3784, -2.372, -2.3656, -2.3592, -2.3528, -2.3464, -2.34, -2.3336, -2.3272, -2.3208, -2.3144, -2.308, -2.3016, -2.2952, -2.2888, -2.2824, -2.276, -2.2696, -2.2632, -2.2568, -2.2504, -2.244, -2.2376, -2.2312, -2.2248, -2.2184, -2.212, -2.2056, -2.1992, -2.1928, -2.1864, -2.18, -2.1736, -2.1672, -2.1608, -2.1544, -2.148, -2.1416, -2.1352, -2.1288, -2.1224, -2.116, -2.1096, -2.1032, -2.0968, -2.0904, -2.084, -2.0776, -2.0712, -2.0648, -2.0584, -2.052, -2.0456],
        s::Vector{Float64} = [0.3861, 0.9663, 0.1092, 0.5858, 0.5006, 0.3579, 0.1985, 0.925, 0.4579, 0.7387, 0.3977, 0.4443, 0.5909, 0.4713, 0.5756, 0.5586, 0.6514, 0.642, 0.264, 0.0056, 0.2327, 0.5715, 0.7586, 0.1911, 0.4414, 0.376, 0.5351, 0.2477, 0.4355, 0.5241, 0.5552, 0.6832, 0.826, 0.5479, 0.3937, 0.1736, 0.9086, 0.1479, 0.9724, 0.6679, 0.4782, 0.1605, 0.1933, 0.3252, 0.7968, 0.0836, 0.0841, 0.3778, 0.2307, 0.8444, 0.4131, 0.2822, 0.6006, 0.477, 0.1575, 0.1422, 0.9569, 0.6474, 0.3777, 0.1851, 0.6534, 0.77, 0.8676, 0.846, 0.639, 0.3029, 0.8695, 0.9046, 0.6852, 0.4535, 0.6888, 0.9151],
        t::Vector{Float64} = [-2.40336, -2.08208, -2.34064, -2.29648, -2.45008, -2.41872, -2.47248, -2.44944, -2.17232, -2.1512, -2.5],
    )
    n=length(m)
    g=0

        for i in eachindex(t)
            for j in 1:n

                g+=s[j]*sinc((t[i]-m[j])/(m[2]-m[1]))
                
            end 
            
        end
        return g
    end
    rozwiazanie_2()
end

begin
    function rozwiazanie_2(;
        m::Vector{Float64} = [-2.3, -2.2919, -2.2838, -2.2757, -2.2676, -2.2595, -2.2514, -2.2433, -2.2352, -2.2271, -2.219, -2.2109, -2.2028, -2.1947, -2.1866, -2.1785, -2.1704, -2.1623, -2.1542, -2.1461, -2.138, -2.1299, -2.1218, -2.1137, -2.1056, -2.0975, -2.0894, -2.0813, -2.0732, -2.0651, -2.057, -2.0489, -2.0408, -2.0327, -2.0246, -2.0165, -2.0084, -2.0003, -1.9922, -1.9841, -1.976, -1.9679, -1.9598, -1.9517, -1.9436, -1.9355, -1.9274, -1.9193, -1.9112, -1.9031, -1.895, -1.8869, -1.8788, -1.8707, -1.8626, -1.8545, -1.8464, -1.8383, -1.8302, -1.8221, -1.814, -1.8059, -1.7978, -1.7897, -1.7816, -1.7735, -1.7654, -1.7573, -1.7492, -1.7411, -1.733, -1.7249, -1.7168, -1.7087, -1.7006, -1.6925, -1.6844, -1.6763, -1.6682, -1.6601, -1.652, -1.6439, -1.6358, -1.6277, -1.6196, -1.6115, -1.6034],
        s::Vector{Float64} = [0.0766, 0.0736, 0.8217, 0.8769, 0.86, 0.4125, 0.0329, 0.7946, 0.3489, 0.7449, 0.7498, 0.2178, 0.7723, 0.4699, 0.7814, 0.7547, 0.6015, 0.4316, 0.9228, 0.0077, 0.8898, 0.821, 0.8099, 0.4036, 0.5685, 0.2761, 0.724, 0.0179, 0.4899, 0.9501, 0.0135, 0.7614, 0.2612, 0.4678, 0.8147, 0.0664, 0.2872, 0.6126, 0.8177, 0.081, 0.9567, 0.9894, 0.1132, 0.0849, 0.1822, 0.3355, 0.3084, 0.714, 0.3475, 0.7877, 0.1092, 0.0572, 0.7108, 0.4931, 0.8255, 0.7042, 0.4647, 0.6115, 0.2773, 0.0764, 0.2603, 0.121, 0.9632, 0.6078, 0.4526, 0.5061, 0.9361, 0.8716, 0.1318, 0.6341, 0.1497, 0.1455, 0.4069, 0.1423, 0.1465, 0.3852, 0.7301, 0.8534, 0.1366, 0.5097, 0.5324, 0.1027, 0.3616, 0.3009, 0.7195, 0.9567, 0.2373],
        t::Vector{Float64} = [-2.0084, -1.95899, -1.67063, -1.64795, -2.19713, -1.87799, -2.02784],
    )
        n = length(m)
        g=0

        for i in eachindex(t)
            for j in 1:n

                g+=s[j]*sinc((t[i]-m[j])/(m[2]-m[1]))
                
            end 
            
        end
        return g
    end
    rozwiazanie_2()
end

begin
    function rozwiazanie_1(;
        fp::Float64 = 106.66,
        t1::Float64 = 3.06,
        N::Int = 975,
    )
        opad(t)=-2*rem(t,1,RoundNearest)
        energy(x)=sum(abs2,x)
        power(x)= energy(x)/length(x)
        rms(x)=sqrt(power(x))

        g=opad
        t =range(start=t1, step=(1/fp),length=N)
        y=1.7*g.(3.2.*t.-2.0)
        
        return rms(y)
    end
    rozwiazanie_1()
end

begin
    function rozwiazanie_3(;
        a::Float64 = -5.6,
        b::Float64 = 1.8,
        x::Vector{Float64} = [-4.62699, -4.37437, -3.97607, -3.60133, -3.30005, -2.9048, -2.55221, -2.23254, -1.83642, -1.49903, -1.16686, -0.76727, -0.44695, -0.10138, 0.30691, 0.59554, 0.96708, 1.41163, 1.51903, -5.30066, -5.31212, -4.77276, -4.52279, -4.15854, -3.75374, -3.45772, -3.0799, -2.7045, -2.39475, -2.0083, -1.65016, -1.33292, -0.93704, -0.59563, -0.27256, 0.13891, 0.45363, 0.78367, 1.24175, 1.45272, 1.80453, -5.60673, -4.9336, -4.65939, -4.34104, -3.91329, -3.60884, -3.25594, -2.86128, -2.55129],
    )

        N=4
        L=range(start=a,stop=b,length=N^2)
        energy(x)=sum(abs2, x)
        power(x)=energy(x)/length(x)
        rms(x)=sqrt(power(x))
        
        quantize(L)=x -> L[argmin(abs.(-L .+ x))]
        q =quantize(L)
        x_quatized= q.(x)
        error = x .- x_quatized

        return rms(error)

    end
    out =rozwiazanie_3()
end

begin
    function rozwiazanie_3(;
        a::Float64 = -0.28,
        b::Float64 = 0.11,
        x::Vector{Float64} = [0.112, 0.10669, 0.10138, 0.09607, 0.09075, 0.08544, 0.08013, 0.07482, 0.06951, 0.0642, 0.05888, 0.05357, 0.04826, 0.04295, 0.03764, 0.03233, 0.02702, 0.0217, 0.01639, 0.01108, 0.00577, 0.00046, -0.00485, -0.01017, -0.01548, -0.02079, -0.0261, -0.03141, -0.03672, -0.04203, -0.04735, -0.05266, -0.05797, -0.06328, -0.06859, -0.0739, -0.07922, -0.08453, -0.08984, -0.09515, -0.10046, -0.10577, -0.11108, -0.1164, -0.12171, -0.12702, -0.13233, -0.13764, -0.14295, -0.14827, -0.15358, -0.15889, -0.1642, -0.16951, -0.17482, -0.18013, -0.18545, -0.19076, -0.19607, -0.20138, -0.20669, -0.212, -0.21732, -0.22263, -0.22794, -0.23325, -0.23856, -0.24387, -0.24918, -0.2545, -0.25981, -0.26512, -0.27043, -0.27574],
    )
        N=10
        L=range(start=a,stop=b,length=2^N)
        energy(x)=sum(abs2,x)
        power(x)=energy(x)/length(x)
        rms(x)=sqrt(power(x))

        quantize(L)=x -> L[argmin(abs.(-L .+x))]
        q = quantize(L)
        x_quatized = q.(x)
        error=x .- x_quatized

        return rms(error)


        missing
    end
    out = rozwiazanie_3()
end

begin
    function rozwiazanie_3(;
        a::Float64 = -1.4,
        b::Float64 = 2.2,
        x::Vector{Float64} = [1.16, 1.37134, 1.58267, 1.79401, 2.00535, 2.21668, 2.17198, 1.96064, 1.7493, 1.53797, 1.32663, 1.11529, 0.90396, 0.69262, 0.48128, 0.26995, 0.05861, -0.15273, -0.36406, -0.5754, -0.78674, -0.99807, -1.20941, -1.42075, -1.36791, -1.15658, -0.94524, -0.7339, -0.52257, -0.31123, -0.09989, 0.11144, 0.32278, 0.53412, 0.74545, 0.95679, 1.16813, 1.37947, 1.5908, 1.80214, 2.01348, 2.22481, 2.16385, 1.95251, 1.74118, 1.52984, 1.3185, 1.10717, 0.89583, 0.68449, 0.47316, 0.26182, 0.05048, -0.16086, -0.37219, -0.58353, -0.79487, -1.0062, -1.21754, -1.42888, -1.35979, -1.14845, -0.93711, -0.72578, -0.51444, -0.3031, -0.09176, 0.11957, 0.33091, 0.54225, 0.75358, 0.96492, 1.17626, 1.38759, 1.59893, 1.81027, 2.0216, 2.23294, 2.15572, 1.94439, 1.73305, 1.52171, 1.31037, 1.09904, 0.8877, 0.67636, 0.46503, 0.25369, 0.04235, -0.16898, -0.38032, -0.59166, -0.80299, -1.01433, -1.22567],
    )
        N=4
        L=range(start=a,stop=b,length=2^N)
        energy(x)=sum(abs2,x)
        power(x)=energy(x)/length(x)
        rms(x)=sqrt(power(x))

        quantize(L)=x -> L[argmin(abs.(-L .+x))]
        q = quantize(L)
        x_quatized = q.(x)
        error=x .- x_quatized

        return rms(error)
    end
    out = rozwiazanie_3()
end

begin
    function rozwiazanie_3(;
        a::Float64 = -3.4,
        b::Float64 = -0.24,
        x::Vector{Float64} = [-2.76, -2.71145, -2.66291, -2.61436, -2.56582, -2.51727, -2.46872, -2.42018, -2.37163, -2.32308, -2.27454, -2.22599, -2.17745, -2.1289, -2.08035, -2.03181, -1.98326, -1.93472, -1.88617, -1.83762, -1.78908, -1.74053, -1.69198, -1.64344, -1.59489, -1.54635, -1.4978, -1.44925, -1.40071, -1.35216, -1.30362, -1.25507, -1.20652, -1.15798, -1.10943, -1.06088, -1.01234, -0.96379, -0.91525, -0.8667, -0.81815, -0.76961, -0.72106, -0.67252, -0.62397, -0.57542, -0.52688, -0.47833, -0.42979, -0.38124, -0.33269, -0.28415, -0.2356, -3.38705, -3.33851, -3.28996, -3.24142, -3.19287, -3.14432, -3.09578, -3.04723, -2.99869, -2.95014, -2.90159, -2.85305, -2.8045, -2.75595, -2.70741, -2.65886, -2.61032, -2.56177, -2.51322, -2.46468, -2.41613, -2.36759, -2.31904, -2.27049, -2.22195, -2.1734, -2.12485, -2.07631, -2.02776],
    )
        N=3
        L=range(start=a,stop=b,length=2^N)

        energy(x)=sum(abs2,x)
        power(x)=energy(x)/length(x)
        rms(x)=sqrt(power(x))

        quantize(L)=x -> L[argmin(abs.(-L .+ x))]
        q = quantize(L)
        x_quatized= q.(x)
        error= x .- x_quatized

        return power(error)
    end
    out= rozwiazanie_3()
end

begin
    function rozwiazanie_3(;
        a::Float64 = -1.7,
        b::Float64 = 2.6,
        x::Vector{Float64} = [2.04274, 2.29908, 2.50656, -1.68307, -1.43437, -1.08724, -0.75993, -0.47413, -0.19599, 0.10816, 0.42797, 0.73031, 1.01087, 1.30153, 1.62211, 1.94403, 2.22016, 2.44209, -1.12373, -1.54084, -1.20381, -0.86404, -0.56621, -0.29066, 0.00357, 0.32183, 0.63272, 0.91814, 1.20141, 1.51273, 1.83982, 2.13488, 2.37272, 2.56034, -1.63261, -1.32061, -0.97341, -0.66097, -0.38288, -0.09798, 0.21472, 0.53187, 0.8251, 1.10483, 1.40547, 1.73183, 2.04274, 2.29908, 2.50656, -1.68307, -1.43437, -1.08724, -0.75993, -0.47413, -0.19599, 0.10816, 0.42797],
    )
        N=4
        L=range(start=a,stop=b,length=(2^N))
        
        energy(x)=sum(abs2,x)
        power(x)=energy(x)/length(X)
        rms(x)=sqrt(power(x))

        quantize(L)=x -> L[argmin(abs.(-L .+x))]
        q=quantize(L)
        x_quantized = q.(x)
        error= x .- x_quantized
        return energy(error)
    end

    out = rozwiazanie_3()

end

begin
    function rozwiazanie_3(;
        a::Float64 = -1.8,
        b::Float64 = 5.3,
        x::Vector{Float64} = [5.084, 5.25938, -1.76523, -1.58985, -1.41446, -1.23908, -1.06369, -0.88831, -0.71292, -0.53754, -0.36215, -0.18677, -0.01138, 0.164, 0.33938, 0.51477, 0.69015, 0.86554, 1.04092, 1.21631, 1.39169, 1.56708, 1.74246, 1.91785, 2.09323, 2.26862, 2.444, 2.61938, 2.79477, 2.97015, 3.14554, 3.32092, 3.49631, 3.67169, 3.84708, 4.02246, 4.19785, 4.37323, 4.54862, 4.724, 4.89938, 5.07477, 5.25015, -1.77446, -1.59908, -1.42369, -1.24831, -1.07292, -0.89754, -0.72215, -0.54677, -0.37138, -0.196, -0.02062, 0.15477, 0.33015, 0.50554, 0.68092, 0.85631, 1.03169],
    )
        N=7
        L=range(start=a,stop=b,length=2^N)

        quantized(L)= x -> L[argmin(abs.(-L .+ x))]
        q = quantized(L)
        x_quantized=q.(x)
        error=x .- x_quantized

        energy(x)=sum(abs2,x)
        power(x)= energy(x)/length(x)
        rms(x)= sqrt(power(x))
        return rms(error)
    end
    out = rozwiazanie_3()
end

begin
    function rozwiazanie_3(;
        a::Float64 = -0.19,
        b::Float64 = 0.59,
        x::Vector{Float64} = [-0.152, -0.16165, -0.0753, 0.01105, 0.0974, 0.18375, 0.2701, 0.35644, 0.44279, 0.52914, 0.58451, 0.49816, 0.41181, 0.32546, 0.23911, 0.15276, 0.06641, -0.01994, -0.10629, -0.19263, -0.12102, -0.03467, 0.05168, 0.13803, 0.22438, 0.31073, 0.39708, 0.48343, 0.56978, 0.54387, 0.45752, 0.37117, 0.28483, 0.19848, 0.11213, 0.02578, -0.06057, -0.14692, -0.16673, -0.08038, 0.00597, 0.09232, 0.17867, 0.26502, 0.35137, 0.43771, 0.52406, 0.58959, 0.50324, 0.41689, 0.33054, 0.24419, 0.15784],
    )
        N= 6
        L = range(start=a,stop=b,length=2^N)

        quntize(L)=x -> L[argmin(abs.(-L .+x))]
        q = quntize(L)
        x_q = q.(x)
        error = x .-x_q

        energy(x)= sum(abs2,x)
        power(x)=energy(x)/length(x)
        rms(x)=sqrt(power(x))

        return rms(error)
    end
    out = rozwiazanie_3()
end

begin
    function rozwiazanie_3(;
        a::Float64 = -3.4,
        b::Float64 = -0.24,
        x::Vector{Float64} = [-2.76, -2.71145, -2.66291, -2.61436, -2.56582, -2.51727, -2.46872, -2.42018, -2.37163, -2.32308, -2.27454, -2.22599, -2.17745, -2.1289, -2.08035, -2.03181, -1.98326, -1.93472, -1.88617, -1.83762, -1.78908, -1.74053, -1.69198, -1.64344, -1.59489, -1.54635, -1.4978, -1.44925, -1.40071, -1.35216, -1.30362, -1.25507, -1.20652, -1.15798, -1.10943, -1.06088, -1.01234, -0.96379, -0.91525, -0.8667, -0.81815, -0.76961, -0.72106, -0.67252, -0.62397, -0.57542, -0.52688, -0.47833, -0.42979, -0.38124, -0.33269, -0.28415, -0.2356, -3.38705, -3.33851, -3.28996, -3.24142, -3.19287, -3.14432, -3.09578, -3.04723, -2.99869, -2.95014, -2.90159, -2.85305, -2.8045, -2.75595, -2.70741, -2.65886, -2.61032, -2.56177, -2.51322, -2.46468, -2.41613, -2.36759, -2.31904, -2.27049, -2.22195, -2.1734, -2.12485, -2.07631, -2.02776],
    )
        N=3
        L = range(start=a, stop=b,length=2^N)

        quantize(L)=x -> L[argmin(abs.(-L .+ x))]
        q = quantize(L)
        x_q= q.(x)
        error= x .- x_q

        energy(x)= sum(abs2, x)
        power(x) = energy(x)/length(x)
        rms(x)=sqrt(power(x))

        return power(error)

    end

    out=rozwiazanie_3()
end

begin
    function rozwiazanie_1(;
        fp::Float64 = 187.34,
        t1::Float64 = -1.41,
        N::Int = 505,
    )
        ramp(t)= 2*rem(t,1, RoundNearest)
        energy(x)= sum(abs2, x)
        power(x) = energy(x)/length(x)
        rms(x)=sqrt(power(x))
        g=ramp
        t=range(start=t1, step=(1/fp),length=N)
        y = 1.2*g.(4.7.*t.-4.4)

        return rms(y)

    end

    out = rozwiazanie_1()
end

begin
    function rozwiazanie_2(;
        m::Vector{Float64} = [2.4, 2.4043, 2.4086, 2.4129, 2.4172, 2.4215, 2.4258, 2.4301, 2.4344, 2.4387, 2.443, 2.4473, 2.4516, 2.4559, 2.4602, 2.4645, 2.4688, 2.4731, 2.4774, 2.4817, 2.486, 2.4903, 2.4946, 2.4989, 2.5032, 2.5075, 2.5118, 2.5161, 2.5204, 2.5247, 2.529, 2.5333, 2.5376, 2.5419, 2.5462, 2.5505, 2.5548, 2.5591, 2.5634, 2.5677, 2.572, 2.5763, 2.5806, 2.5849, 2.5892, 2.5935, 2.5978, 2.6021, 2.6064, 2.6107, 2.615, 2.6193, 2.6236, 2.6279, 2.6322, 2.6365, 2.6408, 2.6451, 2.6494, 2.6537, 2.658, 2.6623, 2.6666, 2.6709, 2.6752, 2.6795, 2.6838, 2.6881, 2.6924],
        s::Vector{Float64} = [0.8404, 0.2933, 0.5888, 0.6373, 0.4682, 0.3064, 0.9456, 0.6406, 0.863, 0.3552, 0.3891, 0.4303, 0.5521, 0.8929, 0.0843, 0.9179, 0.1141, 0.1841, 0.3071, 0.32, 0.0695, 0.9511, 0.5841, 0.8316, 0.5257, 0.5385, 0.5837, 0.4666, 0.4673, 0.999, 0.7174, 0.9582, 0.7385, 0.9678, 0.5822, 0.6037, 0.7591, 0.542, 0.9974, 0.3602, 0.1516, 0.6336, 0.5362, 0.1776, 0.8354, 0.1281, 0.9501, 0.7945, 0.8844, 0.7102, 0.0785, 0.2121, 0.6112, 0.8673, 0.1144, 0.6485, 0.5152, 0.9454, 0.3892, 0.0453, 0.6165, 0.4096, 0.7903, 0.3034, 0.252, 0.3629, 0.7081, 0.5965, 0.6357],
        t::Vector{Float64} = [2.43655, 2.42451, 2.46665, 2.62016, 2.42709, 2.63908, 2.59393, 2.4301, 2.53631, 2.59651, 2.5204, 2.50492],
    )
        n=length(m)
        g=0

        for i in eachindex(t)
            for j in 1:n

                g+=s[j]*sinc((t[i]-m[j])/(m[2]-m[1]))
                
            end
            
        end
        return g
    end
    out = rozwiazanie_2()
end

begin
    function rozwiazanie_2(;
        m::Vector{Float64} = [2.4, 2.4052, 2.4104, 2.4156, 2.4208, 2.426, 2.4312, 2.4364, 2.4416, 2.4468, 2.452, 2.4572, 2.4624, 2.4676, 2.4728, 2.478, 2.4832, 2.4884, 2.4936, 2.4988, 2.504, 2.5092, 2.5144, 2.5196, 2.5248, 2.53, 2.5352, 2.5404, 2.5456, 2.5508, 2.556, 2.5612, 2.5664, 2.5716, 2.5768, 2.582, 2.5872, 2.5924, 2.5976, 2.6028, 2.608, 2.6132, 2.6184, 2.6236, 2.6288, 2.634, 2.6392, 2.6444, 2.6496, 2.6548, 2.66, 2.6652, 2.6704, 2.6756, 2.6808, 2.686, 2.6912, 2.6964, 2.7016, 2.7068, 2.712, 2.7172, 2.7224, 2.7276],
        s::Vector{Float64} = [0.608, 0.6042, 0.7933, 0.2741, 0.6927, 0.9804, 0.5716, 0.2151, 0.2704, 0.2515, 0.152, 0.7341, 0.2315, 0.2353, 0.4688, 0.1476, 0.6178, 0.2568, 0.5456, 0.2026, 0.4849, 0.1746, 0.6529, 0.9512, 0.5369, 0.1929, 0.0498, 0.3875, 0.4101, 0.0314, 0.5902, 0.4296, 0.2512, 0.7152, 0.1867, 0.4247, 0.5746, 0.3765, 0.1397, 0.4132, 0.6632, 0.8843, 0.8844, 0.5359, 0.2907, 0.2976, 0.8738, 0.6387, 0.6404, 0.9921, 0.2918, 0.4723, 0.4703, 0.2775, 0.7089, 0.8504, 0.8892, 0.6085, 0.177, 0.7786, 0.5449, 0.5421, 0.1092, 0.9767],
        t::Vector{Float64} = [2.69536, 2.61684, 2.70056],
    )
        n = length(m)
        g=0

        for i in eachindex(t)
            for j in 1:n
                g+=s[j]*sinc((t[i]-m[j])/(m[2]-m[1]))
            end 
            
        end
        return g
    end
    out = rozwiazanie_2()
end

begin
    function dft(x)
        N=length(x)
        zeta=exp(-2*pi*im/N)
        [
        sum((x[n+1]*zeta^(n*k) for n in 0:N-1)) for k in 0:N-1
        ]
    end
    function rozwiazanie_4(;
        fp::Int = 1760,
        x::Vector{ComplexF64} = ComplexF64[0.64 + 1.16im, 0.37 - 0.11im, -0.19 + 0.32im, 0.65 - 0.11im, -0.26 + 0.64im, 0.74 + 0.11im, 0.42 + 0.34im, 0.07 - 0.05im, -0.71 + 0.37im, 0.71 + 0.55im, -0.57 - 0.15im, 0.26 + 0.54im, 0.12 + 0.03im, -0.86 + 0.21im, 0.19 - 0.04im, -0.01 - 0.83im, -0.38 - 0.73im, -0.41 + 0.27im, 1.55 - 0.26im, -0.68 - 0.94im, 1.3 + 0.88im, -0.35 - 0.07im, -0.05 - 0.86im, -0.36 - 0.17im, -0.36 - 0.32im, -1.11 + 0.1im, -0.02 - 0.6im, -0.06 - 0.28im, -0.55 - 0.78im, 0.18 + 1.58im, -0.1 - 0.27im, -0.05 - 0.6im, -0.72 - 0.75im, 0.72 + 0.29im, 0.02 + 0.29im, -0.2 + 0.38im, -1.47 + 0.89im, 1.53 + 0.82im, 1.32 + 1.71im, 0.25 - 0.18im, -0.16 - 0.88im, 1.0 + 0.35im, 0.31 + 1.26im, 0.19 + 0.37im],
        f::Vector{Int} = [-800, -560, -40, 120, 720, 800],
    )
        x_dft=dft(x)
        f_dft=f./(fp/length(x))

        result=zeros(Float64, length(f_dft))
        for i in eachindex(f_dft)
            index::Int64=f_dft[i]
            if index<0
                index=length(x)+index
            end
            result[i]=angle(x_dft[index+1])
            #result[i]=abs(x_dft[index+1])/length(x)
    
        end
    return sum(result)
        
    end
    out=rozwiazanie_4()
end

begin
    function dft(x)
        N = length(x)
        zeta = exp(-2*pi*im/N)

        [
            sum((x[n+1]*zeta^(n*k) for n in 0:N-1)) for k in 0:N-1
        ]
        
    end
    function rozwiazanie_4(;
        fp::Int = 1330,
        x::Vector{ComplexF64} = ComplexF64[-0.19 - 0.25im, 0.6 + 0.28im, -0.99 + 0.4im, 0.42 - 0.15im, 0.57 - 0.76im, -0.47 - 0.74im, 0.81 - 0.28im, -0.54 - 0.76im, 0.23 + 0.28im, -0.6 + 0.35im, -0.38 + 0.28im, 0.45 + 0.64im, -0.45 + 1.04im, 1.25 - 0.39im, -0.84 - 2.55im, 0.93 - 0.16im, -0.13 - 1.62im, -0.27 + 0.25im, 0.73 + 0.95im, -0.0 + 0.39im, 0.84 - 0.51im, -1.25 - 1.03im, 1.12 - 0.1im, 0.87 - 0.15im, -0.22 - 0.72im, 0.54 - 0.04im, -0.44 + 1.54im, 0.49 - 0.7im, -1.47 - 1.39im, 0.31 + 0.47im, -0.23 - 0.66im, 1.31 + 0.56im, 0.7 - 0.19im, -0.75 - 0.19im, -0.43 + 0.24im],
        f::Vector{Int} = [-608, 228, 304, 342, 532],
    )

    x_dft=dft(x)
    f_dft=f./(fp/length(x))
    result=zeros(Float64, length(f_dft))

    for i in eachindex(f_dft)
        index::Int64=f_dft[i]
        if index < 0
            index=length(x)+index
        end
        result[i]=abs(x_dft[index+1])/length(x)
        
    end
    return sum(result)
    end

    out=rozwiazanie_4()

end

begin
    function dft(x)
        N=length(x)
        zeta=exp(-2*pi*im/N)

        [
            sum((x[n+1]*zeta^(n*k) for n in 0:N-1)) for k in 0:N-1
        ]
        
    end

    function rozwiazanie_4(;
        fp::Int = 1794,
        x::Vector{ComplexF64} = ComplexF64[-0.55 - 0.93im, -0.7 + 0.95im, -1.08 + 1.51im, -0.42 - 0.43im, -0.29 - 0.14im, 0.98 - 0.43im, 0.63 + 0.2im, 0.88 + 0.74im, 1.12 + 0.06im, 0.71 - 0.01im, -0.61 + 0.24im, 0.53 - 0.49im, -0.78 - 0.57im, 0.27 - 0.39im, 0.93 + 0.26im, -0.61 - 0.28im, -1.15 - 1.36im, -0.91 - 1.23im, 0.71 - 0.95im, 0.88 + 0.44im, -0.18 + 0.38im, 0.69 - 0.19im, 1.58 - 0.26im, -0.23 + 0.2im, 1.15 - 0.64im, -0.1 - 0.32im, -0.24 - 1.55im, -0.14 - 0.44im, 0.2 + 0.62im, -0.9 + 1.22im, -0.35 + 0.32im, 0.68 + 0.96im, -0.06 - 0.26im, 0.1 - 0.16im, 0.34 - 0.46im, -0.18 - 0.17im, -0.09 + 0.02im, 1.04 + 0.84im, 0.36 - 0.14im],
        f::Vector{Int} = [-782, -552, -276, -230, 322, 690, 736],
    )
        x_dft=dft(x)
        f_dft=f./(fp/length(x))
        result=zeros(Float64, length(f_dft))

        for i in eachindex(f_dft)
            index::Int64=f_dft[i]
            if index<0
                index=length(x)+index
            end
            result[i]=angle(x_dft[index+1])
        end

        return sum(result)
    end

    out=rozwiazanie_4()
    
    
end

begin
    function dft(x)
        N=length(x)
        zeta=exp(-2*pi*im/N)

        [
            sum((x[n+1]*zeta^(n*k) for n in 0:N-1)) for k in 0:N-1
        ]
        
    end
    function rozwiazanie_4(;
        fp::Int = 468,
        x::Vector{ComplexF64} = ComplexF64[-0.33 - 0.52im, 0.15 + 0.43im, -0.07 - 0.15im, -1.76 - 0.63im, -0.8 - 0.06im, 2.17 + 0.92im, -0.86 + 0.2im, -0.03 - 0.28im, 0.08 + 0.11im, -0.24 + 1.49im, -0.88 - 0.53im, -0.29 - 1.04im, -0.19 + 0.17im, 0.02 + 1.9im, -1.0 - 0.29im, 0.4 - 0.84im, 0.11 - 0.69im, -0.91 - 0.89im, 0.58 + 1.29im, -0.08 + 0.81im, -0.22 - 0.2im, 0.08 - 0.05im, 0.44 - 0.2im, -0.38 - 0.36im, -0.44 + 0.93im, -0.45 - 0.52im, -0.52 + 0.83im, -1.19 - 0.0im, -0.2 - 0.52im, -0.45 + 0.19im, 0.09 + 0.24im, -0.67 - 0.4im, -0.28 - 0.85im, -0.52 + 1.61im, 0.42 + 1.07im, 0.44 - 0.36im, -0.01 - 0.36im, 1.0 + 0.04im, -0.08 + 1.02im],
        f::Vector{Int} = [-216, -168, -132, 0, 36, 96, 216],
    )
        x_dft=dft(x)
        f_dft=f./(fp/length(x))
        result=zeros(Float64, length(f_dft))

        for i in eachindex(f_dft)
            index::Int64=f_dft[i]
            if index<0
                index = length(x)+index
            end

            result[i]=angle(x_dft[index+1])  
        end
        return sum(result)
    end
    out=rozwiazanie_4()

end

begin
    function dft(x)
        N=length(x)
        zeta=exp(-2*pi*im/N)

        [
            sum((x[n+1]*zeta^(n*k) for n in 0:N-1)) for k in 0:N-1
        ]
    end
    function rozwiazanie_4(;
        fp::Int = 138,
        x::Vector{ComplexF64} = ComplexF64[-0.28 - 0.28im, 0.01 - 0.48im, 0.25 + 0.54im, -1.53 - 0.31im, -0.24 + 0.27im, -1.01 + 0.34im, 0.84 - 0.72im, 0.15 + 0.3im, 0.23 + 0.13im, -0.58 - 1.07im, -1.7 + 1.42im, -1.42 - 0.48im, -1.17 + 0.43im, -0.5 - 0.16im, -0.87 - 0.74im, 1.18 + 1.77im, 0.78 + 0.44im, 0.62 + 0.79im, -0.78 + 0.62im, 0.2 + 0.06im, 0.59 + 0.67im, 0.01 - 0.53im, -0.64 - 0.9im, 1.46 + 1.32im, 1.01 + 0.55im, -1.07 + 0.92im, 0.34 - 0.07im, -1.06 - 0.34im, -0.16 - 0.02im, -0.26 + 0.41im, -0.19 + 0.01im, -0.56 + 0.5im, 0.94 - 0.09im, 0.16 + 0.34im, 0.08 + 0.79im, -0.07 - 0.08im, 0.01 - 1.18im, 1.22 + 0.37im, -0.49 - 0.67im, 0.18 + 0.78im, -0.01 - 0.84im, -0.84 - 0.14im, -0.09 - 0.49im, -0.5 + 0.22im, 1.11 + 0.16im, 0.11 + 0.05im],
        f::Vector{Int} = [-51, -42, -6, 3, 24, 30, 69],
    )
        x_dft=dft(x)
        f_dft=f./(fp/length(x))
        result=zeros(Float64, length(f_dft))

        for i in eachindex(f_dft)
            index::Int64=f_dft[i]
            if index<0
                index+=length(x)
            end
            result[i]=abs(x_dft[index+1]/length(x))
        end
        return sum(result)
    end
    out = rozwiazanie_4()
end

begin
    function dft(x)
       N=length(x)
       zeta=exp(-2*pi*im/N)

       [
        sum((x[n+1]*zeta^(n*k) for n in 0:N-1)) for k in 0:N-1
       ]
        
    end
    function rozwiazanie_4(;
        fp::Int = 160,
        x::Vector{ComplexF64} = ComplexF64[-0.71 - 0.67im, 0.15 - 0.85im, -1.15 - 0.16im, -0.51 + 1.15im, 0.61 - 1.01im, -0.47 - 0.54im, 0.26 + 0.03im, 1.11 - 0.05im, -0.35 - 0.77im, -0.38 + 0.27im, 1.07 + 1.06im, 0.49 - 0.43im, 0.39 - 0.11im, 0.42 - 0.95im, -0.29 - 0.24im, 0.34 + 0.05im, 1.19 - 1.17im, 0.36 + 0.76im, -0.14 + 1.48im, 0.4 + 0.12im, -1.17 - 0.24im, 0.53 - 0.15im, 0.18 + 0.11im, 0.19 - 0.5im, -0.95 + 0.56im, -0.02 - 0.37im, 0.72 + 0.22im, -0.55 - 0.22im, -1.31 + 0.84im, -1.31 + 0.3im, -0.01 - 0.56im, 0.48 + 0.72im],
        f::Vector{Int} = [-40, -25, -10, 45, 70],
    )
        x_dft=dft(x)
        f_dft=f./(fp/length(x))
        result=zeros(Float64, length(f_dft))

        for i in eachindex(f_dft)
            index::Int64=f_dft[i]
            if index<0
                index+=length(x)
            end
            #result[i]=abs(x_dft[index+1])/length(x)
            result[i]=angle(x_dft[index+1])
        end
        return sum(result)   
    end
    out = rozwiazanie_4()
end

begin
    function rozwiazanie_1(;
        fp::Float64 = 278.29,
        t1::Float64 = -2.88,
        N::Int = 301,
    )
        ramp(t)=2*rem(t,1,RoundNearest)
        energy(x)=sum(abs2,x)
        power(x)=energy(x)/length(x)
        rms(x)=sqrt(power(x))

        g=ramp
        t=range(start=t1, step=(1/fp), length=N)
        y=1.0*g.(2.9.*t.-3.1)

        return energy(y)

    end

    out = rozwiazanie_1()
    
end

begin
    function rozwiazanie_2(;
        m::Vector{Float64} = [1.0, 1.0025, 1.005, 1.0075, 1.01, 1.0125, 1.015, 1.0175, 1.02, 1.0225, 1.025, 1.0275, 1.03, 1.0325, 1.035, 1.0375, 1.04, 1.0425, 1.045, 1.0475, 1.05, 1.0525, 1.055, 1.0575, 1.06, 1.0625, 1.065, 1.0675, 1.07, 1.0725, 1.075, 1.0775, 1.08, 1.0825, 1.085, 1.0875, 1.09, 1.0925, 1.095, 1.0975, 1.1, 1.1025, 1.105, 1.1075, 1.11, 1.1125, 1.115, 1.1175, 1.12, 1.1225, 1.125, 1.1275, 1.13, 1.1325, 1.135, 1.1375, 1.14, 1.1425, 1.145, 1.1475, 1.15, 1.1525, 1.155, 1.1575, 1.16, 1.1625, 1.165, 1.1675, 1.17],
        s::Vector{Float64} = [0.3517, 0.2997, 0.6573, 0.8227, 0.4225, 0.5659, 0.8946, 0.2522, 0.2865, 0.6468, 0.6074, 0.9818, 0.2937, 0.7272, 0.2418, 0.2595, 0.2541, 0.0407, 0.216, 0.7856, 0.8385, 0.7585, 0.4408, 0.2631, 0.0319, 0.3072, 0.5807, 0.5471, 0.6033, 0.2834, 0.1259, 0.7809, 0.5905, 0.5604, 0.24, 0.6146, 0.9347, 0.1325, 0.3242, 0.0541, 0.5876, 0.0072, 0.4359, 0.6575, 0.9713, 0.5232, 0.5684, 0.8171, 0.5451, 0.1214, 0.9959, 0.5787, 0.1634, 0.4258, 0.3764, 0.275, 0.2927, 0.2448, 0.1558, 0.3494, 0.7365, 0.1755, 0.3507, 0.4629, 0.1587, 0.9461, 0.7639, 0.7869, 0.4684],
        t::Vector{Float64} = [1.06125, 1.093, 1.129, 1.14775, 1.12025, 1.122, 1.04, 1.115, 1.15375, 1.0125, 1.15075, 1.11325],
    )
        N=length(m)
        g=0
        for i in eachindex(t)
            for j in 1:N
                g+=s[j]*sinc((t[i]-m[j])/(m[2]-m[1]))
            end
        end
        return g
    end
    out = rozwiazanie_2()
end

begin
    function rozwiazanie_3(;
        a::Float64 = 0.41,
        b::Float64 = 1.6,
        x::Vector{Float64} = [0.7, 0.75515, 0.81031, 0.86546, 0.92061, 0.97577, 1.03092, 1.08607, 1.14123, 1.19638, 1.25153, 1.30669, 1.36184, 1.41699, 1.47214, 1.5273, 1.58245, 0.4376, 0.49276, 0.54791, 0.60306, 0.65822, 0.71337, 0.76852, 0.82368, 0.87883, 0.93398, 0.98914, 1.04429, 1.09944, 1.1546, 1.20975, 1.2649, 1.32006, 1.37521, 1.43036, 1.48552, 1.54067, 1.59582, 0.45097, 0.50613, 0.56128, 0.61643, 0.67159, 0.72674, 0.78189, 0.83705, 0.8922, 0.94735, 1.00251, 1.05766, 1.11281, 1.16797, 1.22312, 1.27827, 1.33343, 1.38858, 1.44373, 1.49889, 1.55404, 0.40919, 0.46435, 0.5195, 0.57465, 0.62981, 0.68496],
    )
        N=7
        L=range(start=a,stop=b,length=2^N)

        quantize(L)= x->L[argmin(abs.(-L.+x))]
        q=quantize(L)
        x_q=q.(x)
        error = x .-x_q

        energy(x)=sum(abs2,x)
        power(x)=energy(x)/length(x)
        rms(x)=sqrt(power(x))

        return energy(error)
    end
    out =rozwiazanie_3()
end

begin
    function rozwiazanie_3(;
        a::Float64 = 5.0e-5,
        b::Float64 = 0.99,
        x::Vector{Float64} = [0.42753, 0.28511, 0.52177, 0.13268, 0.32998, 0.82803, 0.30108, 0.88398, 0.93038, 0.43822, 0.9771, 0.05825, 0.82862, 0.48991, 0.32825, 0.13805, 0.7055, 5.0e-5, 0.64309, 0.8235, 0.93457, 0.88501, 0.87116, 0.40014, 0.67538, 0.0444, 0.94542, 0.51535, 0.9406, 0.28636, 0.82695, 0.59581, 0.06689, 0.09702, 0.42204, 0.61586, 0.7356, 0.22407, 0.94085, 0.28296, 0.3984, 0.81239, 0.87168, 0.94996, 0.4369, 0.52093, 0.42551, 0.33904, 0.85223, 0.47135, 0.55671, 0.00642, 0.21065, 0.22445, 0.95717, 0.73086, 0.64351, 0.71325, 0.36805, 0.96394, 0.98885, 0.13099, 0.3591, 0.67798],
    )
        N = 4
        L = range(start=a,stop= b, length=2^N)

        quantize(L)= x-> L[argmin(abs.(-L.+x))]
        q=quantize(L)
        x_q= q.(x)
        error= x .- x_q

        energy(x)=sum(abs2,x)
        power(x)=energy(x)/length(x)
        rms(x)=sqrt(power(x))

        return rms(error)


    end
    rozwiazanie_3()
end

begin
    function dft(x)
        N= length(x)
        zeta=exp(-2*pi*im/N)

        [
            sum((x[n+1]*zeta^(n*k) for n in 0:N-1)) for k in 0:N-1
        ]

        
    end

    function rozwiazanie_4(;
        fp::Int = 342,
        x::Vector{ComplexF64} = ComplexF64[-0.31 - 0.47im, -0.15 - 0.54im, 0.17 + 0.21im, 0.48 - 0.91im, -0.51 + 0.56im, 0.07 - 0.58im, -0.16 + 1.29im, 0.79 + 0.43im, 0.45 + 0.32im, -0.42 - 0.1im, -0.41 - 0.63im, 0.01 - 1.0im, 0.15 + 0.36im, 0.12 + 0.91im, -0.8 - 0.82im, -0.14 - 0.04im, 0.35 + 1.15im, -0.77 + 0.31im, 0.27 + 1.44im, 0.38 + 0.6im, -0.73 + 0.41im, -0.05 - 1.25im, -0.73 + 0.48im, 0.52 - 0.29im, -0.38 + 0.02im, -0.7 - 0.79im, -0.16 + 1.15im, 0.19 - 2.0im, 0.37 - 0.96im, -0.21 + 1.11im, -1.08 - 1.23im, -0.27 - 0.68im, 0.29 - 0.16im, 0.92 - 0.66im, 0.23 - 1.31im, 0.53 - 0.26im, 1.31 + 0.33im, -0.9 + 0.09im],
        f::Vector{Int} = [-108, -90, -72, -54],
    )
        x_dft=dft(x)
        f_dft =f./(fp/length(x))
        result=zeros(Float64,length(f_dft))

        for i in eachindex(f_dft)
            index::Int64=f_dft[i]
            if index<0
                index+=length(x)
            end
            result[i]= abs(x_dft[index+1])/length(x)
            
        end
        return sum(result)
    end
    rozwiazanie_4()
end

begin
    function rozwiazanie_5(;
        x::Vector{Float64} = [0.26, 0.26, -3.49, 2.93, -2.34, -3.11, 1.24, -2.57, 4.04, 0.15, 0.83, -2.39, 2.2, 2.97, 1.88, -4.71, -4.46, 3.21, 1.85, -1.23, -0.73, 0.31, 2.38, -4.24, -3.97, -3.9, 4.91, 1.82, 1.19, -1.96, 1.01, -4.79, -3.28, 3.73, -0.84, 4.65, 0.59, 1.04, 2.57, -3.97, -3.41, -1.41, -1.34, -4.34, -3.36, -2.61, 3.27, 3.52, 1.18, -0.94, 0.88, 3.36, 1.36, -3.11, 0.38, -2.11, -2.35, 1.63, 2.83, -2.69, -0.69, 3.39, 1.72, -3.83, 4.43, -0.38, 2.76, -2.07, -3.99],
        h::Vector{Float64} = [-3.47, 4.34, -0.58, 2.92, -2.35, 4.75, -0.9, -4.92, 3.03, 0.93, -0.59, -4.56, -2.96],
    )
        n=length(x)
        m=length(h)
        y=zeros(eltype(x), n+m-1)

        for i in 1:n
            for j in 1:m   
                y[i+j-1]+=x[i]*h[j]
            end
        end
        energy(x)=sum(abs2,x)
        power(x)=energy(x)/length(x)
        rms(x)=sqrt(power(x))

        return rms(y)
    end
    rozwiazanie_5()
end

begin
    function rozwiazanie_5(;
        x::Vector{Float64} = [-4.72, 0.61, 1.06, -1.95, 2.9, -2.89, -0.43, 4.98, -3.97, -4.42, -0.89, -4.54, -3.97, 1.79, -3.6, -2.17, -1.59, -1.11, -2.14, -0.54, -2.24, 2.87, 2.4, 4.4, 4.54, 1.41, -0.6, -2.79, 4.47, 4.22, -2.27, 0.52, -4.05, 1.45, -4.19, -1.67, 3.7, 1.17, -0.91, -4.18, -4.98, 0.74, 0.96, 2.51, 4.55, -4.1, 1.78, 3.71, -2.1, 1.97, 1.48, 0.25, -0.66, -4.61, 3.25, 2.31, 2.22, -1.5, 2.3, -4.54, -3.12, 2.39, 2.41],
        h::Vector{Float64} = [-4.37, -2.86, 2.19, -2.94, -2.47, -0.7, 4.9, -4.71, 2.72, 3.7, -0.33],
    )
        n = length(x)
        m= length(h)
        y = zeros(eltype(x),n+m-1)

        for i in 1:n
            for j in 1:m
                y[i+j-1]+=x[i]*h[j]
            end
        end
        energy(x)=sum(abs2,x)
        power(x)=energy(x)/length(x)
        rms(x)=sqrt(power(x))
        return rms(y)
    end
    rozwiazanie_5()
end

begin
    function rozwiazanie_5(;
        x::Vector{Float64} = [1.16, -2.75, -3.21, -1.33, -2.67, -1.18, -2.04, 1.46, -0.14, 2.81, -4.88, 4.43, 3.27, 2.76, 0.38, -2.96, 0.32, -0.55, -4.91, -2.14, -2.95, 0.32, 0.14, -0.17, -4.93, -2.14, 2.23, -0.9, -2.92, 1.76, 3.23, -4.61, -4.47, 1.96, -1.87, 4.01, 4.53, -0.94, -3.54, 2.1, 2.89, 0.54, -3.01, -1.5, 0.68, -1.39, -1.3, -2.05, 0.53, 1.34, -0.86, -2.79, -3.55],
        h::Vector{Float64} = [3.02, 2.04, -2.4, -0.9, 3.49, 4.93, -3.67, 3.5, 3.63, -2.28, 2.36, 1.2, 2.78],
    )
        n = length(x)
        m= length(h)
        y = zeros(eltype(x), m+n-1)

        for i in 1:n
            for j in 1:m
                y[i+j-1]+=x[i]*h[j]
            end
        end
        energy(x)=sum(abs2,x)
        power(x)=energy(x)/length(x)
        rms(x)=sqrt(power(x))
        srednia(x)=sum(y)/length(y)
        return srednia(y)

    end
    rozwiazanie_5()
end

begin
    function rozwiazanie_5(;
        x::Vector{Float64} = [4.57, 3.26, -2.19, -2.48, -3.82, 5.0, 2.57, 2.82, -2.21, -0.52, 0.44, -0.06, -4.27, 1.28, 3.95, 2.33, 3.96, -1.86, -3.83, 4.16, 1.73, 4.29, 2.74, -3.8, 1.79, -4.29, -1.53, 1.36, 4.5, 2.5, -3.01, -3.5, -3.14, 4.49, -4.41, -4.6, -3.97, -2.51, 2.18, -4.69, 1.26, -1.3, 3.09, -0.11, 4.99, -0.87, 1.2, -0.93, 1.0, -2.78, -1.49, 2.18, 0.85, 3.37, 4.54, 2.85, -2.56, 3.25, -2.23, -0.91, -4.34, 3.1, 1.25, 0.71, -1.03, -4.31, 2.95, -4.75],
        h::Vector{Float64} = [3.72, 1.32, -3.99, 4.54, -0.92, 1.44, 4.53, -3.52, -0.89, -3.79, -2.45, 3.09, -0.4, -3.7, 3.23, -2.73, -2.32, 3.7, 1.6, -2.9, -2.89, -2.33],
    )
        n=length(x)
        m=length(h)
        y=zeros(eltype(x), n+m-1)

        for i in 1:n
            for j in 1:m
                y[i+j-1]+=x[i]*h[j]
            end
        end
        energy(x)=sum(abs2,x)
        power(x)=energy(x)/length(x)
        rms(x)= sqrt(power(x))

        return rms(y)


    end
    rozwiazanie_5()
end

begin
    function rozwiazanie_1(;
        fp::Float64 = 340.6,
        t1::Float64 = -3.21,
        N::Int = 349,
    )
        triangle(t)=ifelse(mod(t+1/4,1)<1/2,4mod(t+1/4,1)-1,-4mod(t+1/4,1)+3)

        energy(x)=sum(abs2,x)
        power(x)=energy(x)/length(x)

        g = triangle
        t = range(start=t1,step=(1/fp), length=N)
        y=0.1*g.(3.5.*t.-1.4)

        return power(y)
    end
    rozwiazanie_1()
end

begin
    function rozwiazanie_2(;
        m::Vector{Float64} = [3.8, 3.8008, 3.8016, 3.8024, 3.8032, 3.804, 3.8048, 3.8056, 3.8064, 3.8072, 3.808, 3.8088, 3.8096, 3.8104, 3.8112, 3.812, 3.8128, 3.8136, 3.8144, 3.8152, 3.816, 3.8168, 3.8176, 3.8184, 3.8192, 3.82, 3.8208, 3.8216, 3.8224, 3.8232, 3.824, 3.8248, 3.8256, 3.8264, 3.8272, 3.828, 3.8288, 3.8296, 3.8304, 3.8312, 3.832, 3.8328, 3.8336, 3.8344, 3.8352, 3.836, 3.8368, 3.8376, 3.8384, 3.8392, 3.84],
        s::Vector{Float64} = [0.4961, 0.8525, 0.8261, 0.3343, 0.2017, 0.0157, 0.816, 0.8138, 0.805, 0.7451, 0.6843, 0.0937, 0.9753, 0.9161, 0.1839, 0.2725, 0.8366, 0.0864, 0.5142, 0.331, 0.0322, 0.3144, 0.4193, 0.1542, 0.0664, 0.9545, 0.2939, 0.0377, 0.6711, 0.0477, 0.0358, 0.7305, 0.1087, 0.5334, 0.4877, 0.0681, 0.8756, 0.5184, 0.078, 0.2711, 0.6703, 0.6601, 0.5963, 0.4388, 0.6095, 0.4044, 0.5865, 0.6744, 0.0821, 0.6301, 0.0483],
        t::Vector{Float64} = [3.8308, 3.818, 3.81392, 3.83472, 3.82872, 3.80024, 3.82736, 3.81256, 3.82512, 3.8328, 3.80088, 3.82872],
    )
        n=length(m)
        g = 0

        for i in eachindex(t)
            for j in 1:n
            g+=s[j]*sinc((t[i]-m[j])/(m[2]-m[1]))
            end
        end
        return sum(g)
    end
    rozwiazanie_2()
end

begin
    function rozwiazanie_3(;
        fp::Float64 = 201.9,
        t1::Float64 = -2.39,
        N::Int = 802,
    )
    ramp_wave(t::Real)::Real = 2*rem(t,1,RoundNearest)

    g = ramp_wave
    t = range(; start = t1, step = (1/fp), length = N)
    y = 0.5 * g.(1.1 .* t .- 3.7)
    
    energy(x::AbstractVector)::Real = sum(abs2,x)
    power(x::AbstractVector)::Real = energy(x)/ length(x)

    return power(y)

    end
    out_3=rozwiazanie_3()
end

begin
    function rozwiazanie_2(;
        m::Vector{Float64} = [2.0, 2.0098, 2.0196, 2.0294, 2.0392, 2.049, 2.0588, 2.0686, 2.0784, 2.0882, 2.098, 2.1078, 2.1176, 2.1274, 2.1372, 2.147, 2.1568, 2.1666, 2.1764, 2.1862, 2.196, 2.2058, 2.2156, 2.2254, 2.2352, 2.245, 2.2548, 2.2646, 2.2744, 2.2842, 2.294, 2.3038, 2.3136, 2.3234, 2.3332, 2.343, 2.3528, 2.3626, 2.3724, 2.3822, 2.392, 2.4018, 2.4116, 2.4214, 2.4312, 2.441, 2.4508, 2.4606, 2.4704, 2.4802, 2.49, 2.4998, 2.5096, 2.5194, 2.5292, 2.539, 2.5488, 2.5586],
        s::Vector{Float64} = [0.2854, 0.6262, 0.7587, 0.6926, 0.3455, 0.8024, 0.4046, 0.8052, 0.5554, 0.9309, 0.1597, 0.6149, 0.4294, 0.5625, 0.3277, 0.3964, 0.1917, 0.2022, 0.0688, 0.3796, 0.2473, 0.7549, 0.4543, 0.9389, 0.7158, 0.1696, 0.1821, 0.3521, 0.6292, 0.3004, 0.3786, 0.7637, 0.3563, 0.5322, 0.0838, 0.9391, 0.3775, 0.6533, 0.3146, 0.5745, 0.9493, 0.1878, 0.2527, 0.9387, 0.1214, 0.858, 0.0707, 0.0615, 0.2631, 0.8234, 0.8606, 0.9335, 0.8881, 0.5928, 0.2151, 0.5585, 0.7501, 0.7335],
        t::Vector{Float64} = [2.26558, 2.41846, 2.09996, 2.35476, 2.25774, 2.41748, 2.35966, 2.33516, 2.1323, 2.4214, 2.42924, 2.33222],
    )
        n=length(m)
        g=0

        for i in eachindex(t)
            for j in 1:n
                g+=s[j]*sinc((t[i]-m[j])/(m[2]-m[1]))                
            end 
            
        end
        return sum(g)
    end
    rozwiazanie_2()
end

begin
    function rozwiazanie_3(;
        a::Float64 = -4.9,
        b::Float64 = 3.3,
        x::Vector{Float64} = [3.256, 2.96759, 2.67917, 2.39076, 2.10234, 1.81393, 1.52551, 1.2371, 0.94868, 0.66027, 0.37185, 0.08344, -0.20498, -0.49339, -0.7818, -1.07022, -1.35863, -1.64705, -1.93546, -2.22388, -2.51229, -2.80071, -3.08912, -3.37754, -3.66595, -3.95437, -4.24278, -4.5312, -4.81961, -4.89198, -4.60356, -4.31515, -4.02673, -3.73832, -3.4499, -3.16149, -2.87307, -2.58466, -2.29624, -2.00783, -1.71941, -1.431, -1.14259, -0.85417, -0.56576, -0.27734, 0.01107, 0.29949, 0.5879, 0.87632, 1.16473, 1.45315, 1.74156, 2.02998, 2.31839, 2.6068, 2.89522],
    )
        N=10
        L = range(start=a,stop=b,length=2^N)
        quantize(L)=x->L[argmin(abs.(-L.+ x))]
        q = quantize(L)
        x_quantized = q.(x)
        error = x .- x_quantized

        energy(x)=sum(abs2,x)

        return energy(error)
    end
    rozwiazanie_3()
end

begin
    function rozwiazanie_3(;
        a::Float64 = -2.1,
        b::Float64 = 1.2,
        x::Vector{Float64} = [0.1975, 0.27576, 0.35528, 0.43639, 0.51928, 0.60404, 0.69059, 0.77884, 0.8689, 0.9618, 1.06328, 1.22384, -2.06562, -1.94817, -1.85841, -1.77571, -1.69649, -1.61935, -1.54337, -1.4678, -1.39202, -1.31549, -1.23786, -1.15893, -1.07866, -0.99722, -0.91489, -0.83206, -0.74916, -0.66662, -0.58479, -0.50392, -0.4241, -0.34529, -0.26727, -0.18973, -0.11225, -0.03439, 0.04425, 0.124, 0.20505, 0.28743, 0.37101, 0.45545, 0.54029, 0.62492, 0.70863, 0.79057, 0.86953, 0.94288, 0.99901, 0.46977, -1.96009, -1.90589, -1.83936, -1.76947, -1.69774, -1.62436, -1.54923, -1.47228, -1.39352, -1.3131, -1.23132, -1.14859, -1.06539, -0.9822, -0.89948, -0.81757, -0.73669, -0.6569, -0.57811, -0.50006, -0.42243, -0.34479, -0.26675],
    )
        N=9
        L=range(start=a,stop=b,length=2^N)
        quantize(L)=x->L[argmin(abs.(-L.+x))]
        q=quantize(L)
        x_q=q.(x)
        error=x .- x_q

        energy(x)=sum(abs2,x)
        power(x)=energy(x)/length(x)
        rms(x)= sqrt(power(x))

        return rms(error)
    end
    rozwiazanie_3()
end

begin
    function rozwiazanie_2(;
        m::Vector{Float64} = [-2.6, -2.5946, -2.5892, -2.5838, -2.5784, -2.573, -2.5676, -2.5622, -2.5568, -2.5514, -2.546, -2.5406, -2.5352, -2.5298, -2.5244, -2.519, -2.5136, -2.5082, -2.5028, -2.4974, -2.492, -2.4866, -2.4812, -2.4758, -2.4704, -2.465, -2.4596, -2.4542, -2.4488, -2.4434, -2.438, -2.4326, -2.4272, -2.4218, -2.4164, -2.411, -2.4056, -2.4002, -2.3948, -2.3894, -2.384, -2.3786, -2.3732, -2.3678, -2.3624, -2.357, -2.3516, -2.3462, -2.3408, -2.3354, -2.33, -2.3246, -2.3192, -2.3138, -2.3084, -2.303, -2.2976, -2.2922, -2.2868, -2.2814, -2.276, -2.2706, -2.2652, -2.2598, -2.2544, -2.249, -2.2436, -2.2382, -2.2328, -2.2274, -2.222, -2.2166, -2.2112, -2.2058, -2.2004, -2.195, -2.1896, -2.1842, -2.1788, -2.1734, -2.168, -2.1626, -2.1572, -2.1518],
        s::Vector{Float64} = [0.0526, 0.6492, 0.5345, 0.6477, 0.3847, 0.3147, 0.6482, 0.3322, 0.3622, 0.8858, 0.226, 0.9808, 0.2528, 0.5058, 0.7285, 0.6343, 0.1969, 0.9884, 0.489, 0.5825, 0.6696, 0.279, 0.1806, 0.396, 0.8279, 0.3731, 0.3115, 0.5715, 0.3897, 0.2029, 0.076, 0.515, 0.3615, 0.1866, 0.6468, 0.7308, 0.4152, 0.4385, 0.2573, 0.7524, 0.0961, 0.9896, 0.2363, 0.0499, 0.8751, 0.2336, 0.9315, 0.0654, 0.4776, 0.4863, 0.7587, 0.3477, 0.6674, 0.2571, 0.4468, 0.7449, 0.8601, 0.3398, 0.8176, 0.7829, 0.9045, 0.015, 0.6801, 0.1149, 0.5232, 0.8073, 0.3869, 0.8269, 0.2918, 0.9741, 0.1966, 0.6172, 0.7212, 0.3811, 0.8572, 0.8166, 0.3116, 0.1173, 0.3699, 0.9338, 0.1992, 0.35, 0.0889, 0.1888],
        t::Vector{Float64} = [-2.16314, -2.38886, -2.29652, -2.16098, -2.2247, -2.40884, -2.57624, -2.17934, -2.44718, -2.54168, -2.33648, -2.46014, -2.21012, -2.5865, -2.3381, -2.25872],
    )
        n = length(m)
        g=0

        for i in eachindex(t)
            for j in 1:n
                g+=s[j]*sinc((t[i]-m[j])/(m[2]-m[1]))
            end
        end

        return sum(g)

    end
    rozwiazanie_2()
end

begin
    function rozwiazanie_3(;
        a::Float64 = 3.5,
        b::Float64 = 3.5,
        x::Vector{Float64} = [3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54, 3.54],
    )
        N=8
        L=range(start=a,stop=b,length=2^N)
        quantize(L)=x-> L[argmin(abs.(-L.+x))]
        q = quantize(L)
        x_q = q.(x)
        error=x .- x_q

        energy(x)=sum(abs2,x)
        power(x)=energy(x)/length(x)
        rms(x)= sqrt(power(x))
        return rms(error)

    end
    rozwiazanie_3()
end

begin
    function dft(x)
        N=length(x)
        zeta=exp(-2*pi*im/N)

        [
            sum((x[n+1]*zeta^(n*k) for n in 0:N-1)) for k in 0:N-1
        ]
        
    end


    function rozwiazanie_4(;
        fp::Int = 992,
        x::Vector{ComplexF64} = ComplexF64[-0.1 + 0.61im, -0.24 - 0.37im, -1.13 - 0.18im, 0.1 + 0.06im, -0.54 - 0.04im, 0.58 - 0.54im, 1.63 + 0.46im, -0.21 - 0.99im, -0.16 - 0.56im, -0.58 + 0.48im, 0.95 + 0.95im, 1.18 + 0.02im, 1.43 - 0.52im, -1.55 - 0.71im, 0.67 - 0.93im, 1.29 + 1.2im, 1.35 + 0.22im, 0.2 - 0.59im, -0.01 + 0.77im, 0.02 - 0.2im, -0.55 + 0.16im, -0.28 + 0.34im, -0.24 - 0.41im, 0.59 - 0.51im, 1.0 + 0.13im, 0.49 - 0.49im, 0.42 - 0.91im, 1.36 + 0.85im, -0.25 + 0.54im, 0.07 - 0.46im, 0.21 - 0.11im, -0.73 + 0.19im],
        f::Vector{Int} = [-434, -155, 62, 403],
    )
        x_dft=dft(x)
        f_dft=f./(fp/length(x))
        result=zeros(Float64, length(f_dft))

        for i in eachindex(f_dft)
            index::Int64= f_dft[i]
            if index<0
                index+=length(x)
            end
            result[i]=abs(x_dft[1+index])/length(x)
        end
        return sum(result)

    end
    rozwiazanie_4()
end

begin
    function dft(x)
        N=length(x)
        zeta=exp(-2*pi*im/N)

        [
            sum(x[n+1]*zeta^(n*k) for n in 0:N-1) for k in 0:N-1
        ]
        
    end

    function rozwiazanie_4(;
        fp::Int = 156,
        x::Vector{ComplexF64} = ComplexF64[0.44 + 0.96im, 0.05 - 0.44im, -0.52 + 0.31im, -1.18 + 0.29im, -1.0 + 0.1im, 0.6 - 0.17im, 0.43 - 0.25im, 0.41 + 0.3im, 0.16 - 0.19im, -1.39 - 0.7im, -0.29 + 0.56im, 0.42 + 1.58im, -0.09 - 0.14im, -0.65 + 0.28im, 0.32 + 1.45im, 0.56 - 0.42im, 0.46 + 0.29im, 0.62 - 0.92im, 0.51 - 0.63im, -0.2 - 1.05im, -0.62 + 0.59im, -0.05 - 0.35im, 0.78 - 0.48im, -0.46 - 0.22im, -0.64 - 0.45im, -0.17 - 0.75im],
        f::Vector{Int} = [-66, 18, 30, 42, 48, 54],
    )
        x_dft=dft(x)
        f_dft=f./(fp/length(x))
        result=zeros(Float64, length(f_dft))

        for i in eachindex(f_dft)
            index::Int64=f_dft[i]
            if index<0
                index+=length(x)
            end
            result[i]=abs(x_dft[index+1])/length(x)
        end
        return sum(result)

    end  
    rozwiazanie_4()
end

begin
    function rozwiazanie_5(;
        x::Vector{Float64} = [2.57, 4.68, 0.91, 0.61, -0.77, 2.13, -0.82, -4.59, 1.22, 3.51, 3.87, -4.33, -2.97, -0.57, 1.8, 3.38, -2.12, 0.58, 0.74, 2.46, 3.92, 1.52, 3.6, 1.38, 1.47, -2.92, 1.64, -3.59, 3.3, -2.82, -3.58, 3.65, -0.54, -3.0, -3.75, -1.31, 4.06, 3.86, -3.41, -4.38, -3.18, -1.83, 3.8, -0.67, -3.5, -4.22, 3.27, 1.97, 3.87, 2.55, 2.26, 1.16, -1.9, -0.15],
        h::Vector{Float64} = [-4.67, -0.25, -1.65, -0.8, -3.23, -3.17, -1.89, 1.6, 4.76, 0.74, -1.41],
    )
        n = length(x)
        m = length(h)
        y= zeros(eltype(x), n+m-1)

            for i in 1:n
                for j in 1:m
                    y[i+j-1]+=x[i]*h[j]
                end
            end
        energy(x)= sum(abs2, x)
        power(x) = energy(x)/length(x)
        
        return power(y)

    end
    rozwiazanie_5()
end

begin
function rozwiazanie(;
    m::Vector{Float64} = [-3.9, -3.8901, -3.8802, -3.8703, -3.8604, -3.8505, -3.8406, -3.8307, -3.8208, -3.8109, -3.801, -3.7911, -3.7812, -3.7713, -3.7614, -3.7515, -3.7416, -3.7317, -3.7218, -3.7119, -3.702, -3.6921, -3.6822, -3.6723, -3.6624, -3.6525, -3.6426, -3.6327, -3.6228, -3.6129, -3.603, -3.5931, -3.5832, -3.5733, -3.5634, -3.5535, -3.5436, -3.5337, -3.5238, -3.5139, -3.504, -3.4941, -3.4842, -3.4743, -3.4644, -3.4545, -3.4446, -3.4347, -3.4248, -3.4149, -3.405, -3.3951, -3.3852, -3.3753, -3.3654, -3.3555, -3.3456, -3.3357, -3.3258, -3.3159, -3.306, -3.2961, -3.2862, -3.2763, -3.2664, -3.2565, -3.2466, -3.2367, -3.2268, -3.2169, -3.207, -3.1971, -3.1872, -3.1773, -3.1674, -3.1575, -3.1476, -3.1377, -3.1278],
    s::Vector{Float64} = [0.2975, 0.3037, 0.786, 0.463, 0.6645, 0.2939, 0.0432, 0.2818, 0.6751, 0.306, 0.3061, 0.7484, 0.1275, 0.2604, 0.0106, 0.7953, 0.648, 0.7917, 0.6776, 0.8919, 0.7077, 0.9514, 0.3391, 0.1622, 0.0785, 0.3339, 0.1887, 0.3812, 0.126, 0.4143, 0.721, 0.0387, 0.2857, 0.041, 0.2815, 0.5958, 0.1213, 0.9301, 0.1116, 0.3251, 0.2092, 0.6461, 0.2148, 0.0219, 0.5504, 0.5827, 0.8221, 0.9743, 0.8304, 0.5489, 0.168, 0.6279, 0.224, 0.9965, 0.3769, 0.0774, 0.6139, 0.3801, 0.6323, 0.1382, 0.8636, 0.3688, 0.6588, 0.9374, 0.4003, 0.6448, 0.0214, 0.6533, 0.4357, 0.6508, 0.0244, 0.9228, 0.82, 0.316, 0.8398, 0.8299, 0.7521, 0.9434, 0.9935],
    t::Vector{Float64} = [-3.30105, -3.26937, -3.64458, -3.58221, -3.89307, -3.58221, -3.74952, -3.79803, -3.60399, -3.43866, -3.25452, -3.18918, -3.29808],
)
    n=length(m)
    g = 0

    for i in eachindex(t)
        for j in 1:n
            g+=s[j]*sinc((t[i]-m[j])/(m[2]-m[1]))
        end
    end


    return sum(g)    
    end
    rozwiazanie()
    
end

begin
    function rozwiazanie_3(;
        a::Float64 = -1.0,
        b::Float64 = -0.75,
        x::Vector{Float64} = [-1.024, -1.021, -1.018, -1.01499, -1.01199, -1.00899, -1.00599, -1.00298, -0.99998, -0.99698, -0.99398, -0.99097, -0.98797, -0.98497, -0.98197, -0.97897, -0.97596, -0.97296, -0.96996, -0.96696, -0.96395, -0.96095, -0.95795, -0.95495, -0.95194, -0.94894, -0.94594, -0.94294, -0.93994, -0.93693, -0.93393, -0.93093, -0.92793, -0.92492, -0.92192, -0.91892, -0.91592, -0.91291, -0.90991, -0.90691, -0.90391, -0.90091, -0.8979, -0.8949, -0.8919, -0.8889, -0.88589, -0.88289, -0.87989, -0.87689, -0.87388, -0.87088, -0.86788, -0.86488, -0.86188, -0.85887, -0.85587, -0.85287, -0.84987, -0.84686, -0.84386, -0.84086, -0.83786, -0.83485, -0.83185, -0.82885, -0.82585, -0.82285, -0.81984, -0.81684, -0.81384, -0.81084, -0.80783, -0.80483, -0.80183, -0.79883, -0.79582, -0.79282, -0.78982, -0.78682, -0.78382, -0.78081, -0.77781, -0.77481, -0.77181, -0.7688, -0.7658, -0.7628, -0.7598, -0.75679, -0.75379, -0.75079, -0.74779],
    )
       N=10
       L=range(start=a,stop=b,length=2^N)

       quantize(L)=x->L[argmin(abs.(-L.+x))]
       q = quantize(L)
       x_q=q.(x)
       error= x .- x_q

       energy(x)=sum(abs2,x)
       return energy(error)
    end
    rozwiazanie_3()
end

begin
    function dft(x)
        N=length(x)
        zeta=exp(-2*pi*im/N)
        [
            sum(x[n+1]*zeta^(n*k) for n in 0:N-1) for k in 0:N-1
        ]
        
    end
    function rozwiazanie_4(;
        fp::Int = 2208,
        x::Vector{ComplexF64} = ComplexF64[0.02 + 0.2im, 0.32 - 0.16im, 0.93 + 0.62im, -1.12 - 0.24im, -0.29 - 0.43im, -0.69 - 0.51im, -0.56 + 0.22im, -0.61 + 0.32im, -0.68 - 0.35im, -0.8 + 0.07im, -1.07 - 0.6im, -0.41 + 0.6im, -0.08 - 0.1im, 0.34 - 0.03im, 1.24 - 0.31im, 1.21 - 0.07im, 0.61 - 0.5im, -0.12 - 0.15im, 0.2 + 0.84im, -0.07 - 1.33im, -0.2 + 0.51im, 0.05 + 1.19im, 0.33 - 0.26im, 0.5 + 0.69im, 0.95 - 0.14im, -0.86 - 0.5im, -1.04 - 0.69im, -0.48 - 1.3im, -0.46 - 0.6im, -0.69 + 0.26im, 0.46 - 0.43im, 0.77 - 1.16im, -0.03 - 0.17im, -0.21 - 0.09im, -0.06 + 0.44im, 0.1 + 1.04im, 0.04 - 0.61im, -1.28 + 0.85im, 0.74 - 0.11im, -0.9 - 0.14im, -0.15 - 0.04im, -0.54 + 0.98im, 1.45 - 0.07im, 0.16 + 0.16im, -1.02 + 0.54im, -0.07 + 1.43im],
        f::Vector{Int} = [-672, -432, -48, 576, 816, 864, 960],
    )
        x_dft=dft(x)
        f_dft=f./(fp/length(x))
        result=zeros(Float64, length(f_dft))

        for i in eachindex(f_dft)
            index::Int64=f_dft[i]
            if index<0
                index +=  length(x)
            end
        result[i]=angle(x_dft[index+1])
        end
        return sum(result)

    end
    rozwiazanie_4()
end

begin
    function rozwiazanie_5(;
        x::Vector{Float64} = [1.42, 1.03, -0.23, -3.69, -0.62, 0.17, -4.08, 0.48, 3.87, 0.66, -0.38, -4.48, -4.67, -3.45, -2.33, -1.44, -3.54, 1.24, -4.16, 1.39, -1.73, -3.9, 1.22, -2.45, 2.45, -4.29, -3.27, -4.09, -3.16, -2.97, -1.7, -2.49, 4.59, -4.33, 0.71, 0.67, 4.57, -2.02, 4.42, -4.75, 3.6, 0.59, 2.44, -0.98, 0.28, 1.89, -1.67, -2.97, -1.18, 0.55, 1.95, -1.03, 4.39, -0.26, -2.14, 3.63, -4.54],
        h::Vector{Float64} = [-0.94, -3.83, -2.69, 2.54, 0.63, 2.3, -0.74, 1.35, -1.51, -0.69, -4.0, 1.58, 3.73, -4.47, 4.73, -2.05, -1.2],
    )
        n = length(x)
        m= length(h)
        y=zeros(eltype(x), n+m-1)

        for i in 1:n
            for j in 1:m
                y[i+j-1]+=x[i]*h[j] 
                
            end 
            
        end

        mean(x)=sum(x)/length(x)

        return mean(y)

    end
    rozwiazanie_5()
end

begin
    function rozwiazanie_6(;
        b::Vector{Float64} = [0.033194692256649484, -0.07172135788881488, 0.09489407529227799, -0.0717213578888149, 0.03319469225664949],
        a::Vector{Float64} = [1.0, 1.5921708442156168, 1.3135098485645686, 0.49616221058458576, 0.07954938181884069],
        x::Vector{Float64} = [-0.56, -0.74, -0.59, -0.37, 0.43, -0.96, -0.25, -0.96, 0.0, -0.38, 0.17, 0.74, 0.16, 0.07, 0.47, 0.46, -0.53, -0.95],
        L::Int = 57,
    )
    N=length(x)
    M=length(b)
    K=length(a)

    y=zeros(Float64,L)

    for n in range(0,L-1)
        for m in range(0, M-1)
            if n-m>=0&&n-m<N
                y[n+1]+=b[m+1]*x[n-m+1]
            end
        end
        for k in range(1,K-1)
            if n-k>=0&&n-k<L
                y[n+1]-=a[k+1]*y[n-k+1]
            end
        end
    end
    return sum(y)/length(y)
    end
    rozwiazanie_6()
end

begin
    function rozwiazanie_6(;
        b::Vector{Float64} = [0.0006830617997875762, 0.0, -0.002732247199150305, 0.0, 0.004098370798725458, 0.0, -0.002732247199150305, 0.0, 0.0006830617997875762],
        a::Vector{Float64} = [1.0, -7.37091674220465, 24.026251956211986, -45.27230512968575, 53.96668951407274, -41.68654264214939, 20.378015424103637, -5.7627298698272735, 0.7215374894873829],
        x::Vector{Float64} = [0.01, -0.4, -0.66, -0.23, -0.27, 0.9, 0.17, 0.74, 0.44, -0.71, -0.32, 0.27, -0.04, 0.0, -0.72, -0.92, -0.14, -0.33, -0.76, -0.37],
        L::Int = 69,
    )
        N=length(x)
        M=length(b)
        K=length(a)

        y=zeros(Float64, L)

        for n in range(0, L-1)
            for m in range(0, M-1)
                if n-m>=0&&n-m<N
                    y[n+1]+=b[m+1]*x[n-m+1]
                end
            end
            for k in range(1, K-1)
                if n-k>=0&&n-k<L
                    y[n+1]-=a[k+1]*y[n-k+1]
                    
                end

                
            end
        end
        return sum(abs2,y)
    end
    rozwiazanie_6()
end

begin
    function rozwiazanie_6(;
        b::Vector{Float64} = [0.006500308975182436, -0.01036535620127051, 0.014167858331149323, -0.01036535620127051, 0.006500308975182438],
        a::Vector{Float64} = [1.0, -3.2044065131099924, 3.9156561020191143, -2.1540209163139146, 0.4492090912837656],
        x::Vector{Float64} = [-0.67, -0.97, -0.24, -0.51, -0.38, 0.92, 0.64, 0.48, -0.32, 0.36, -0.82, 0.22, 0.21, 0.78, 0.26, -0.9, 0.67, 0.91, -0.25, -0.4, 0.86, 0.04, -0.08, -0.09, 0.02, -0.52, -0.72, 0.91, 0.25, -0.99, 0.97, -0.12, 0.92, -0.61, 0.77, 0.03, 0.44, -0.54, 0.9, -0.99, -0.44],
        L::Int = 86,
    )
        N= length(x)
        M=length(b)
        K=length(a)

        y=zeros(Float64, L)

        for n in range(0,L-1)
            for m in range(0, M-1)
                if n-m>=0&&n-m<N
                    y[n+1]+=b[m+1]*x[n-m+1]
                end
            end
            for k in range(1, K-1)
                if n-k>=0&&n-k<L
                    y[n+1]-=a[k+1]*y[n-k+1]
                end
            end
        end

        return sum(abs2,y)

    end
    rozwiazanie_6()
end

begin
    function dft(x)
        N=length(x)
        zeta = exp(-2*pi*im/N)

        [
            sum(x[n+1]*zeta^(n*k) for n in 0:N-1) for k in 0:N-1
        ]
        
    end

    function rozwiazanie_4(;
        fp::Int = 1232,
        x::Vector{ComplexF64} = ComplexF64[-1.82 - 0.77im, 0.46 + 0.81im, 0.41 - 1.43im, -0.29 + 0.55im, -0.83 + 0.46im, -1.57 + 1.06im, -1.15 + 0.04im, -0.99 - 0.05im, -0.47 + 0.95im, 0.27 + 1.06im, 0.38 - 0.47im, -0.28 - 0.1im, -0.8 - 1.73im, -0.72 - 0.14im, 0.69 - 0.34im, 0.47 + 0.22im, -0.46 - 0.67im, 0.07 - 0.05im, 0.17 - 0.7im, 0.02 - 0.74im, 0.03 - 0.55im, 0.35 - 0.85im, 0.51 - 0.11im, -0.75 + 0.42im, -0.53 - 0.83im, 1.73 + 1.31im, -0.13 - 1.11im, -0.79 + 0.39im, 0.32 - 0.57im, -0.03 - 0.61im, 0.18 - 1.3im, 0.18 - 0.36im, 0.22 + 0.74im, -0.38 - 0.04im, 0.31 - 0.54im, -1.06 + 1.28im, -0.2 + 0.12im, 0.37 - 0.39im, -1.62 + 0.24im, -0.11 - 0.41im, 0.7 - 0.4im, 0.07 - 0.08im, -0.06 + 1.15im, -0.21 - 0.39im],
        f::Vector{Int} = [-560, -252, -224, 28, 168, 196],
    )
        x_dft=dft(x)
        f_dft=f./(fp/length(x))
        result=zeros(Float64, length(f_dft))

        for i in eachindex(f_dft)
            index::Int64=f_dft[i]
            if index<0
                index+=length(x)
            end
        result[i]=angle(x_dft[index+1]) 


        end
        return sum(result)
    end
    rozwiazanie_4()
end
begin
    function rozwiazanie_6(;
        b::Vector{Float64} = [0.03399559572629825, -0.08143691570781157, 0.10835803717016686, -0.08143691570781157, 0.03399559572629825],
        a::Vector{Float64} = [1.0, 1.5078153471706013, 1.2281717562003884, 0.4532205003119454, 0.0720871513205448],
        x::Vector{Float64} = [0.37, -0.93, -0.45, -0.46, 0.96, -0.93, -0.25, -0.28, -0.09, -0.98, -0.66, -0.48, 0.81, -0.56, 0.59, 0.54, 0.31, 0.87, -0.48, -0.08, 0.21, -0.44, -0.43, 0.81, 0.33, 0.18, -0.33, -0.8, -0.33, 0.18, -0.93, 0.53, -0.51, 0.43, -0.88, 0.28, 0.5, -0.86, -0.35, -0.56],
        L::Int = 82,
    )
        N=length(x)
        M=length(b)
        K=length(a)

        y=zeros(Float64, L)

        for n in range(0, L-1)
            for m in range(0, M-1)
                if n-m>=0&&n-m<N
                    y[n+1]+=b[m+1]*x[n-m+1]
                end
            end
            for k in range(1, K-1)
                if n-k>=0&&n-k<L
                    y[n+1]-=a[k+1]*y[n-k+1]
                end
            end
        end
        return sum(abs2,y)
    end
    rozwiazanie_6()
end

begin
    function rozwiazanie_7(;
        b::Vector{Float64} = [0.6134048756264335, -3.677558254179328, 9.18959361525182, -12.250880471068466, 9.18959361525182, -3.6775582541793286, 0.613404875626434],
        a::Vector{Float64} = [1.0, -5.0366519238265495, 10.59885846088699, -11.952371716347109, 7.630957872210603, -2.616973339253459, 0.37618064865890816],
        F::Vector{Float64} = [0.03, 0.06, 0.2, 0.43, 0.43],
    )
        
  
        omega =exp.(2*pi*im*F)

        H=zeros(ComplexF64,length(F))
        for i in eachindex(F)
            B=0
            for j in eachindex(b)
                B+=b[j]*omega[i]^(length(b)-j)
            end

            A=0
            for j in eachindex(a)
                A+=a[j]*omega[i]^(length(a)-j)
            end

            H[i]=B/A
        end
        return sum(angle.(H)/length(H))
    end
rozwiazanie_7()
end

begin
    function rozwiazanie_7(;
        b::Vector{Float64} = [0.37932083776061126, -1.517283351042445, 2.2759250265636677, -1.517283351042445, 0.37932083776061126],
        a::Vector{Float64} = [1.0, -2.128486823881547, 1.9524896621047327, -0.8442128150130268, 0.14394410317047118],
        F::Vector{Float64} = [0.29, 0.37, 0.47],
    )
        omega=exp.(2*pi*im*F)
        H=zeros(ComplexF64, length(F))
        
        for i in eachindex(F)
            B=0
            for j in eachindex(b)
                B+=b[j]*omega[i]^(length(b)-j)
            end

            A=0
            for j in eachindex(a)
                A+=a[j]*omega[i]^(length(a)-j)
            end

            H[i]=B/A

        end
        return sum(abs.(H)/length(H))
    end
end
rozwiazanie_7()
begin
    function rozwiazanie_3(;
        a::Float64 = 0.0053,
        b::Float64 = 0.98,
        x::Vector{Float64} = [0.88809, 0.74821, 0.97542, 0.77941, 0.76227, 0.26255, 0.56294, 0.32655, 0.9062, 0.27407, 0.49799, 0.48569, 0.1164, 0.27265, 0.27982, 0.19478, 0.30431, 0.41568, 0.60715, 0.75931, 0.186, 0.22179, 0.72943, 0.57775, 0.43869, 0.10559, 0.70275, 0.18854, 0.7047, 0.44161, 0.80086, 0.21566, 0.02507, 0.769, 0.31133, 0.18836, 0.1903, 0.77509, 0.49917, 0.08453, 0.95596, 0.28897, 0.06913, 0.33445, 0.48363, 0.00529, 0.40221, 0.85125, 0.81412, 0.65123, 0.20264, 0.84231, 0.24821, 0.89947, 0.47545, 0.06313, 0.09781, 0.1397, 0.18949, 0.96186, 0.79169, 0.35835, 0.70423, 0.87595, 0.67604, 0.96228, 0.1746, 0.36925, 0.41201],
    )
        N=4
        L=range(start=a, stop=b, length=2^N)

        quantize(L)=x->L[argmin(abs.(-L .+ x))]
        q = quantize(L)
        x_q=q.(x)
        error= x .- x_q
        energy(x)= sum(abs2,x)
        power(x)= energy(x)/length(x)
        
        return power(error)
    end
    rozwiazanie_3()
end

begin
    function rozwiazanie_7(;
        b::Vector{Float64} = [0.5863828000064575, -3.8778190326617388, 13.169779847163449, -28.999254470026948, 45.444720981891486, -52.57002598675963, 45.4447209818915, -28.99925447002695, 13.169779847163454, -3.877819032661742, 0.5863828000064579],
        a::Vector{Float64} = [1.0, -5.913521036636486, 17.936128227782408, -35.328007200378735, 49.60801083641948, -51.52526522746008, 40.067672662513324, -23.042940068592777, 9.446110757217166, -2.5144394590688655, 0.34384477419035353],
        F::Vector{Float64} = [0.11, 0.11, 0.29, 0.33, 0.41],
    )
        omega=exp.(2*pi*im*F)
        H=zeros(ComplexF64, length(F))

        for i in eachindex(F)
            B=0
            for j in eachindex(b)
                B+=b[j]*omega[i]^(length(b)-j)
            end
            A=0
            for j in eachindex(a)
                A+=a[j]*omega[i]^(length(a)-j)
            end
            H[i]=B/A
        end
        return sum(angle.(H)/length(H))
    end
    rozwiazanie_7()
end

begin
    function rozwiazanie_7(;
        zz::Vector{ComplexF64} = ComplexF64[1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im],
        pp::Vector{ComplexF64} = ComplexF64[0.3689151719685504 - 0.6993658367170373im, 0.3689151719685504 + 0.6993658367170373im, 0.27851549865587544 - 0.38651690109009107im, 0.27851549865587544 + 0.38651690109009107im, 0.24399614313663234 - 0.12394051923801233im, 0.24399614313663234 + 0.12394051923801233im],
        k::Float64 = 0.10294689929909018,
        F::Vector{Float64} = [0.14, 0.23, 0.43, 0.43],
    )
        omega=exp.(2*pi*im*F)
        H=zeros(ComplexF64, length(F))

        for i in eachindex(H)
            B=1
            for j in eachindex(zz)
                B*=omega[i]-zz[j]
            end
            A=1
            for j in eachindex(pp)
                A*=omega[i]-pp[j]
            end
            H[i]=k*B/A
        end
        return sum(angle.(H)/length(H))
    end
    rozwiazanie_7()
end
begin
    function rozwiazanie_7(;
        zz::Vector{ComplexF64} = ComplexF64[0.9602022733736184 + 0.2793055570663335im, 0.9602022733736184 - 0.2793055570663335im, 0.9602022733736184 + 0.2793055570663335im, 0.9602022733736184 - 0.2793055570663335im, 0.9602022733736184 + 0.2793055570663335im, 0.9602022733736184 - 0.2793055570663335im, 0.9602022733736184 + 0.2793055570663335im, 0.9602022733736184 - 0.2793055570663335im, 0.9602022733736184 + 0.2793055570663335im, 0.9602022733736184 - 0.2793055570663335im],
        pp::Vector{ComplexF64} = ComplexF64[0.7274724442285654 - 0.6223847445101809im, 0.9867779723700518 + 0.10836957182015045im, 0.7274724442285654 + 0.6223847445101809im, 0.9867779723700518 - 0.10836957182015045im, 0.4684101644310399 - 0.6148065870377827im, 0.9728050377563139 + 0.07364562554598675im, 0.4684101644310399 + 0.6148065870377827im, 0.9728050377563139 - 0.07364562554598675im, -0.03157088260124992 + 0.0im, 0.96259270371489 + 0.0im],
        k::Float64 = 0.27056734388449966,
        F::Vector{Float64} = [0.22, 0.23, 0.35, 0.36],
    )
        omega=exp.(2*pi*im*F)
        H=zeros(ComplexF64, length(F))

        for i in eachindex(H)
            B=1
            for j in eachindex(zz)
                B*=omega[i]-zz[j]
            end
            A=1
            for j in eachindex(pp)
                A*=omega[i]-pp[j] 
                
            end
            H[i]=k*B/A
        end
        return sum(abs.(H)/length(H))
    end
    rozwiazanie_7()
    
end

begin
    function rozwiazanie_7(;
        b::Vector{Float64} = [0.5430643189993539, -5.320275038967888, 23.56213899241215, -62.12037829971474, 107.97005639346388, -129.26921272829492, 107.97005639346385, -62.12037829971472, 23.56213899241214, -5.320275038967884, 0.5430643189993536],
        a::Vector{Float64} = [1.0, -8.695850980418559, 34.12318947086353, -79.50680715559363, 121.66550155023171, -127.54308773938362, 92.52691054641083, -45.69549989196031, 14.617676963537203, -2.709273638304145, 0.21724087870757233],
        F::Vector{Float64} = [0.13, 0.21, 0.28],
    )
        omega=exp.(2*pi*im*F)
        H=zeros(ComplexF64, length(F))

        for i in eachindex(F)
            B=0
            for j in eachindex(b)
                B+=b[j]*omega[i]^(length(b)-j)
            end
            A=0
            for j in eachindex(a)
                A+=a[j]*omega[i]^(length(a)-j)
            end
            H[i]=B/A
        end
        return sum(abs.(H)/length(H)) 
    end
    rozwiazanie_7()
end

begin
    function rozwiazanie_7(;
        zz::Vector{ComplexF64} = ComplexF64[0.851486195138827 - 0.5243770203660758im, 0.851486195138827 + 0.5243770203660758im, 0.7396144368675202 - 0.6730308200796907im, 0.7396144368675202 + 0.6730308200796907im, -0.055368198849961726 - 0.9984660047072764im, -0.055368198849961726 + 0.9984660047072764im],
        pp::Vector{ComplexF64} = ComplexF64[0.8722614534153558 - 0.3287259817997369im, 0.8722614534153558 + 0.3287259817997369im, 0.7415738175572191 - 0.257751768412223im, 0.7415738175572191 + 0.257751768412223im, 0.6254914057566363 - 0.10751271859282156im, 0.6254914057566363 + 0.10751271859282156im],
        k::Float64 = 0.007704629850064169,
        F::Vector{Float64} = [0.01, 0.04, 0.22, 0.38, 0.45],
    )
        omega=exp.(2*pi*im*F)
        H=zeros(ComplexF64,length(F))

        for i in eachindex(H)
            B=1
            for j in eachindex(zz)
                B*=omega[i]-zz[j]
            end
            A=1
            for j in eachindex(pp)
                A*=omega[i]-pp[j] 
                
            end
            H[i]=k*B/A
        end
        return sum(angle.(H)/length(H))
    end
    rozwiazanie_7()
end

begin
    function rozwiazanie_3(;
        a::Float64 = -2.3,
        b::Float64 = 4.9,
        x::Vector{Float64} = [-1.58, -1.37638, -1.17276, -0.96914, -0.76552, -0.5619, -0.35828, -0.15466, 0.04896, 0.25258, 0.4562, 0.65982, 0.86344, 1.06706, 1.27068, 1.4743, 1.67792, 1.88154, 2.08516, 2.28878, 2.4924, 2.69602, 2.89964, 3.10326, 3.30688, 3.5105, 3.71412, 3.91774, 4.12136, 4.32498, 4.5286, 4.73222, -2.26416, -2.06054, -1.85692, -1.6533, -1.44968, -1.24606, -1.04244, -0.83882, -0.6352, -0.43158, -0.22796, -0.02434, 0.17928, 0.3829, 0.58652, 0.79014, 0.99376, 1.19738, 1.401, 1.60462, 1.80824, 2.01186, 2.21548, 2.4191, 2.62271, 2.82633, 3.02995, 3.23357, 3.43719, 3.64081, 3.84443, 4.04805, 4.25167, 4.45529, 4.65891, 4.86253, -2.13385, -1.93023],
    )
    N=3
        L=range(start=a,stop=b,length=2^N)
        

        quantize(L)=x->L[argmin(abs.(-L .+x))]
        q=quantize(L)
        x_q=q.(x)
        error= x .- x_q

        energy(x)= sum(abs2,x)
        power(x)= energy(x)/length(x)
        rms(x)= sqrt(power(x))
        return rms(error)

    end

    rozwiazanie_3()
end

begin
    function rozwiazanie_2(;
        m::Vector{Float64} = [-0.9, -0.8965, -0.893, -0.8895, -0.886, -0.8825, -0.879, -0.8755, -0.872, -0.8685, -0.865, -0.8615, -0.858, -0.8545, -0.851, -0.8475, -0.844, -0.8405, -0.837, -0.8335, -0.83, -0.8265, -0.823, -0.8195, -0.816, -0.8125, -0.809, -0.8055, -0.802, -0.7985, -0.795, -0.7915, -0.788, -0.7845, -0.781, -0.7775, -0.774, -0.7705, -0.767, -0.7635, -0.76, -0.7565, -0.753, -0.7495, -0.746, -0.7425, -0.739, -0.7355, -0.732, -0.7285, -0.725, -0.7215, -0.718, -0.7145, -0.711, -0.7075, -0.704, -0.7005, -0.697, -0.6935, -0.69, -0.6865, -0.683, -0.6795],
        s::Vector{Float64} = [0.4429, 0.914, 0.653, 0.388, 0.2088, 0.53, 0.0897, 0.2275, 0.8797, 0.8057, 0.3094, 0.6085, 0.3412, 0.4384, 0.9948, 0.7253, 0.7818, 0.1707, 0.4802, 0.1553, 0.0006, 0.4948, 0.962, 0.4914, 0.8118, 0.6982, 0.5114, 0.6973, 0.6752, 0.0704, 0.6167, 0.6985, 0.8162, 0.1362, 0.5175, 0.0592, 0.751, 0.5236, 0.1583, 0.835, 0.4563, 0.4644, 0.0485, 0.0056, 0.6856, 0.9996, 0.5723, 0.8672, 0.1885, 0.3809, 0.5255, 0.6706, 0.8092, 0.2915, 0.2106, 0.5167, 0.7817, 0.9577, 0.1551, 0.2999, 0.0967, 0.5036, 0.478, 0.5779],
        t::Vector{Float64} = [-0.76525, -0.8027, -0.78905],
    )
        N = length(m)
        g=0
        for i in eachindex(t)
            for j in 1:N
                g+=s[j]*sinc((t[i]-m[j])/(m[2]-m[1]))
            end
        end
        return sum(g)
    end
    rozwiazanie_2()
end

begin
    function rozwiazanie_5(;
        x::Vector{Float64} = [4.95, -1.93, -4.17, 1.01, -4.45, 3.15, 2.37, 0.08, 2.24, 3.1, 4.91, 0.12, 4.57, 3.05, -4.39, -3.68, -2.61, -3.71, -0.26, 2.87, -1.45, 4.29, 0.12, 4.63, -1.11, -2.81, -0.83, 3.45, -2.63, 3.5, 0.96, -3.47, 1.5, -4.42, 3.22, 2.62, 2.29, 2.04, -3.62, 4.44, 1.23, -3.81, -1.03, -3.09, -4.2, 4.44, -0.13, -1.56, 2.21, 3.82, -2.07, 3.76, 4.63, 1.45, -1.82, 3.02],
        h::Vector{Float64} = [-0.71, -3.51, -1.48, -4.02, -4.03, 0.24, -3.68, -4.72, -4.73, -0.74, 1.24, 3.16, -0.1, 1.14, 0.73, -4.69],
    )
        n= length(x)
        m= length(h)
        y = zeros(eltype(x),m+n-1)

        for i in 1:n
            for j in 1:m
                y[i+j-1]+=x[i]*h[j]
            end
        end
        energy(x)=sum(abs2,x)
        power(x)=energy(x)/length(x)

        return power(y)



    end
    rozwiazanie_5()
end

begin
    function rozwiazanie_6(;
        b::Vector{Float64} = [0.2696308632736984, -1.6177851796421905, 4.044462949105476, -5.392617265473968, 4.044462949105476, -1.6177851796421905, 0.2696308632736984],
        a::Vector{Float64} = [1.0, -3.713164950326971, 6.192864387340338, -5.870083629161222, 3.4489643427764296, -1.2526581422938925, 0.24675386517361902],
        x::Vector{Float64} = [0.53, -0.57, -0.31, 0.42, 0.16, 0.33, 0.8, 0.74, 0.79, 0.74, 0.42, -0.23, 0.21, -0.43, -0.6, 0.67],
        L::Int = 54,
    )
        N = length(x)
        M = length(b)
        K= length(a)
        y= zeros(Float64, L)

        for n in range(0,L-1)
            for m in range(0,M-1)
                if n-m>=0&&n-m<N
                    y[n+1]+=b[m+1]*x[n-m+1]
                end
            end
            for k in range(1, K-1)
                if n-k>=0&&n-k<L
                    y[n+1]-=a[k+1]*y[n-k+1]
                end
            end
        end
        return sum(abs2,y)/length(y)  
    end
    rozwiazanie_6()
end

begin
    function rozwiazanie_6(;
        b::Vector{Float64} = [0.00545166500729036, 0.03270999004374216, 0.0817749751093554, 0.1090333001458072, 0.0817749751093554, 0.03270999004374216, 0.00545166500729036],
        a::Vector{Float64} = [1.0, -1.7828536275221163, 1.9699492643229135, -1.2291215332805638, 0.48817700875461456, -0.10787233653491378, 0.01062778472664873],
        x::Vector{Float64} = [0.0, -0.79, 0.06, 0.09, 0.7, -0.41, -0.86, 0.83, 0.29, 0.26, -0.8, 0.55, 0.28, 0.22, -0.55, -0.56],
        L::Int = 27,
    )
        N=length(x)
        M=length(b)
        K=length(a)
        
        y = zeros(Float64, L)

        for n in range(0, L-1)
            for m in range(0, M-1)
                if n-m>=0&&n-m<N
                    y[n+1]+=b[m+1]*x[n-m+1]
                end
            end
            for k in range(1, K-1)
                if n-k>=0&&n-k<L
                    y[n+1]-=a[k+1]*y[n-k+1]
                end
            end
        end

        return sum(y)/length(y)
      
    end
rozwiazanie_6()
end

begin
    using LinearAlgebra
    function rozwiazanie_8(;
        b::Vector{Float64} = [0.4369129341743124, -1.295697769502688, 1.295697769502688, -0.4369129341743124],
        a::Vector{Float64} = [1.0, -1.495215630190658, 0.9068693779949139, -0.06313639916842846],
    )
        function roots(a)
            H=Matrix(I, length(a)-2, length(a)-2)
            Z = zeros(length(a)-2)
            H = vcat(Z',H)
            H = hcat(H, -1 * reverse(a[2:end]))
            return eigvals(H)
        end
        p = roots(a)
        radii = abs.(p)
        if all(radii .<1)
            return 1
        elseif all(radii .<= 1 )&& any(radii .== 1)
            return 0
        else
            return -1
        end
    end 
    rozwiazanie_8()
end

begin
    function rozwiazanie_8(;
        b::Vector{Float64} = [0.6999726231987228, -3.9583343218082376, 12.453590781286495, -25.959975487364616, 39.58750741522606, -45.29863528641239, 39.58750741522606, -25.959975487364616, 12.453590781286493, -3.9583343218082376, 0.6999726231987228],
        a::Vector{Float64} = [1.0, -6.832904965196811, 24.98097058935513, -58.43326213189676, 97.46823048459734, -119.62499975289707, 110.36879990124673, -75.44922471090521, 37.29239951184539, -12.097622662597493, 2.1512312605692543],
    )
        function roots(a)
            H=Matrix(I,length(a)-2,length(a)-2)
            Z=zeros(length(a)-2)
            H=vcat(Z',H)
            H=hcat(H, -1*reverse(a[2:end]))
            return eigvals(H)
        end
        p=roots(a)
        radi=abs.(p)
        if all(radi.<1)
            return 1
        elseif all(radi .<=1) && any(radi.==1)
            return 0
        else
            return -1
        end
         
    end
    rozwiazanie_8()
end

begin
    function rozwiazanie_8(;
        b::Vector{Float64} = [0.010030956869669906, -0.019882634291540028, 0.012035417363916624, 0.012035417363916615, -0.01988263429154003, 0.010030956869669911],
        a::Vector{Float64} = [1.0, -3.8369679641118686, 5.999185051706744, -4.757914568367365, 1.9098553381471046, -0.30979037749052135],
    )
        function roots(a)
            H = Matrix(I, length(a)-2, length(a)-2)
            Z = zeros(length(a)-2)
            H = vcat(Z',H)
            H = hcat(H, -1*reverse(a[2:end]))
            return eigvals(H)
        end
        p = roots(a)
        radi = abs.(p)
        if all(radi.<1)
            return 1
        elseif all(radi .<=1)&&any(radi.==1)
            return 0   
        else
            return -1
        end

    end
    rozwiazanie_8()
end

begin
    function rozwiazanie_8(;
        b::Vector{Float64} = [0.17741274066798718, -0.5322382220039615, 0.5322382220039615, -0.17741274066798718],
        a::Vector{Float64} = [1.0, -0.09949224649481497, 0.542231382232446, 0.22242170338336334],
    )
        function roots(a)
            H=Matrix(I, length(a)-2 , length(a)-2)
            Z=zeros(length(a)-2)
            H=vcat(Z',H)
            H=hcat(H,-1*reverse(a[2:end]))
            return eigvals(H)
        end
        p = roots(a)
        radi = abs.(p)

        if all(radi .< 1)
            return 1
        elseif all(radi.<=1)&&any(radi.==1)
            return 0 
        else
            return -1
        end
    end
    rozwiazanie_8()
end

begin
    function rozwiazanie_8(;
        z::Vector{ComplexF64} = ComplexF64[0.8717083071840964 - 0.49002512913751356im, 0.9528823986524632 + 0.3033399649540562im, 0.8717083071840964 + 0.49002512913751356im, 0.9528823986524632 - 0.3033399649540562im, 0.761839000858845 - 0.6477664214594614im, 0.9758280233123996 + 0.21853985658962743im, 0.761839000858845 + 0.6477664214594614im, 0.9758280233123996 - 0.21853985658962743im],
        p::Vector{ComplexF64} = ComplexF64[0.9240216135967378 + 0.3437673497220338im, 0.8874889981747929 - 0.42188900795379164im, 0.9240216135967378 - 0.3437673497220338im, 0.8874889981747929 + 0.42188900795379164im, 0.8909095248091071 + 0.3497108109891549im, 1.827835812694676 - 0.8117981533797631im, 0.8909095248091071 - 0.3497108109891549im, 0.8704601443956094 + 0.3865981467828234im],
        k::Float64 = 0.00843862300185276,
    )
        radi=abs.(p)
        if all(radi.<1)
            return 1
        elseif all(radi.<=1)&& any(radi.==1)
            return 0
        else
            return -1
        end

    end
    rozwiazanie_8()
end

begin
    function rozwiazanie_8(;
        b::Vector{Float64} = [0.007591126937481848, -0.019574797768573498, 0.038172877382736996, -0.04270974264906205, 0.03078724990196859, 0.0, -0.03078724990196859, 0.04270974264906205, -0.038172877382737, 0.01957479776857349, -0.007591126937481847],
        a::Vector{Float64} = [1.0, -3.8138389212768113, 11.143551730464473, -20.368110212695143, 31.263379948817278, -34.926134862649604, 33.56976332647915, -23.41276029576668, 14.039225568594928, -5.179364639987943, 1.622134843635729],
    )
    function roots(a)
        
        H=Matrix(I, length(a)-2 , length(a)-2)
        Z= zeros(length(a)-2)
        H=vcat(Z',H)
        H=hcat(H,-1*reverse(a[2:end]))
        return eigvals(H)
    end
    p = roots(a)
    radi = abs.(p)

    if all(radi.<1)
        return 1
    elseif all(radi.<=1)&&any(radi.==1)
        return 0
    else
        return -1
    end

    end
rozwiazanie_8()
end

begin
    function rozwiazanie_1(;
        fp::Float64 = 362.13,
        t1::Float64 = 0.73,
        N::Int = 465,
    )
        ramp(t)=-2*rem(t,1,RoundNearest)
        
        g=ramp
        t=range(start=t1,step=(1/fp),length=N)
        y=3.8*g.(0.5.*t.-3.9)
        
        mean(x)=sum(x)/length(x)
        return mean(y)
    end
    rozwiazanie_1()
end

begin
    function rozwiazanie_2(;
        m::Vector{Float64} = [3.1, 3.107, 3.114, 3.121, 3.128, 3.135, 3.142, 3.149, 3.156, 3.163, 3.17, 3.177, 3.184, 3.191, 3.198, 3.205, 3.212, 3.219, 3.226, 3.233, 3.24, 3.247, 3.254, 3.261, 3.268, 3.275, 3.282, 3.289, 3.296, 3.303, 3.31, 3.317, 3.324, 3.331, 3.338, 3.345, 3.352, 3.359, 3.366, 3.373, 3.38, 3.387, 3.394, 3.401, 3.408, 3.415, 3.422, 3.429, 3.436, 3.443, 3.45, 3.457, 3.464, 3.471, 3.478, 3.485, 3.492, 3.499, 3.506, 3.513, 3.52, 3.527, 3.534, 3.541, 3.548, 3.555, 3.562, 3.569, 3.576, 3.583, 3.59, 3.597, 3.604, 3.611, 3.618, 3.625, 3.632, 3.639, 3.646, 3.653, 3.66, 3.667, 3.674, 3.681, 3.688, 3.695, 3.702, 3.709, 3.716, 3.723, 3.73, 3.737, 3.744, 3.751, 3.758],
        s::Vector{Float64} = [0.6228, 0.3635, 0.2327, 0.7896, 0.0034, 0.2422, 0.0888, 0.8556, 0.386, 0.2139, 0.0991, 0.5724, 0.9194, 0.2025, 0.5696, 0.6746, 0.1071, 0.0126, 0.0938, 0.6854, 0.1678, 0.7945, 0.0302, 0.0765, 0.7987, 0.6779, 0.5418, 0.1997, 0.1592, 0.3876, 0.5352, 0.8592, 0.0737, 0.6241, 0.6241, 0.0477, 0.4444, 0.9999, 0.9817, 0.5566, 0.3756, 0.8064, 0.5543, 0.7817, 0.0802, 0.9449, 0.1481, 0.6243, 0.8928, 0.2254, 0.1057, 0.769, 0.1359, 0.6129, 0.4296, 0.6292, 0.9657, 0.3765, 0.2447, 0.9899, 0.3151, 0.9472, 0.3701, 0.7945, 0.093, 0.7847, 0.0609, 0.1887, 0.0222, 0.9437, 0.6623, 0.6284, 0.6258, 0.9606, 0.0602, 0.6534, 0.2352, 0.2537, 0.5432, 0.4506, 0.4169, 0.0839, 0.505, 0.6162, 0.3113, 0.1738, 0.644, 0.1028, 0.1326, 0.4699, 0.6941, 0.0502, 0.6106, 0.3104, 0.1836],
        t::Vector{Float64} = [3.5585, 3.6355, 3.7216, 3.5851, 3.317, 3.5578, 3.7559, 3.5207, 3.4332, 3.1182, 3.3716, 3.7104],
    )
        N=length(m)
        g=0

        for i in eachindex(t)
            for j in 1:N
                g+=s[j]*sinc((t[i]-m[j])/(m[2]-m[1]))
            end
        end
        return sum(g)
    end
    rozwiazanie_2()
end

begin
    function rozwiazanie_3(;
        a::Float64 = -6.9,
        b::Float64 = 2.8,
        x::Vector{Float64} = [-6.116, -5.79332, -5.47063, -5.14795, -4.82527, -4.50259, -4.1799, -3.85722, -3.53454, -3.21185, -2.88917, -2.56649, -2.2438, -1.92112, -1.59844, -1.27576, -0.95307, -0.63039, -0.30771, 0.01498, 0.33766, 0.66034, 0.98302, 1.30571, 1.62839, 1.95107, 2.27376, 2.59644, -6.88088, -6.5582, -6.23551, -5.91283, -5.59015, -5.26746, -4.94478, -4.6221, -4.29941, -3.97673, -3.65405, -3.33137, -3.00868, -2.686, -2.36332, -2.04063, -1.71795, -1.39527, -1.07259, -0.7499, -0.42722, -0.10454, 0.21815, 0.54083, 0.86351, 1.1862, 1.50888, 1.83156, 2.15424, 2.47693, 2.79961, -6.67771, -6.35502, -6.03234, -5.70966, -5.38698],
    )
        N=3
        L=range(start=a,stop=b,length=2^N)
        quantize(L)=x->L[argmin(abs.(-L.+x))]
        q = quantize(L)
        x_q=q.(x)
        error=x .- x_q

        return sum(abs2,error)
    end
    rozwiazanie_3()
end

begin
    function dft(x)
        N=length(x)
        zeta=exp(-2*pi*im/N)

        [
            sum(x[n+1]*zeta^(n*k) for n in 0:N-1) for k in 0:N-1
        ]
        
    end
    function rozwiazanie_4(;
        fp::Int = 893,
        x::Vector{ComplexF64} = ComplexF64[-0.31 + 0.01im, 0.15 - 0.09im, -0.29 - 0.15im, 0.38 - 1.39im, 0.89 + 1.43im, 0.31 - 0.58im, -0.0 - 0.4im, -1.46 - 0.18im, 1.01 - 0.15im, -0.31 + 0.71im, 1.13 + 0.89im, -0.71 - 0.98im, -0.38 - 0.18im, -0.33 - 0.86im, 0.74 + 0.56im, -0.56 - 0.14im, -0.08 - 0.96im, 0.7 + 0.84im, 0.49 - 0.49im, 0.73 + 1.33im, -0.44 - 0.47im, -1.81 - 0.58im, -0.29 + 0.42im, 0.54 + 0.27im, -0.26 + 1.06im, -0.15 - 0.65im, 0.33 + 0.13im, -0.36 - 0.09im, 0.42 + 0.42im, -0.12 + 0.94im, 0.09 - 0.96im, -1.59 - 1.3im, -0.51 - 0.37im, -1.28 + 0.41im, -0.61 - 0.86im, -0.3 - 0.84im, 0.19 - 0.19im, -0.96 - 0.41im, 1.05 + 0.13im, -0.08 - 0.65im, -1.12 - 0.4im, 0.0 - 0.89im, -1.69 - 0.39im, -0.52 + 0.21im, -1.56 - 0.24im, -0.24 + 0.83im, 0.28 + 0.15im],
        f::Vector{Int} = [-437, -304, -171, -76, 0, 57, 152, 342],
    )
        x_dft = dft(x)
        f_dft = f./(fp/length(x))
        result= zeros(Float64, length(f_dft))

        for i in eachindex(f_dft)
            index::Int64=f_dft[i]
            if index<0
                index+=length(x)
            end
        result[i]=abs(x_dft[index+1])/length(x)
        end
        return sum(result)
    end
    rozwiazanie_4()
end

begin
    function rozwiazanie_5(;
        x::Vector{Float64} = [-3.7, -0.33, 3.18, 3.26, 4.84, 2.22, 1.07, -3.39, -0.63, -0.84, -2.24, 0.42, -3.62, -1.29, -3.53, -4.77, -2.82, 1.69, 4.69, -3.95, -1.31, -1.75, 3.62, -2.76, 2.78, -4.01, 2.78, 1.91, 4.71, -0.13, -4.5, 0.12, -2.97, 0.11, 2.85, -1.07, 0.83, 4.16, 3.22, 3.59, -1.82, -2.24, -3.22, 3.7, -1.08, 0.12, -3.96, 4.8, 2.47, -0.53, 3.65, 2.31, -0.68, 1.48, -4.9, -1.35, -0.2, -0.55, -2.44, 4.2, 2.69, 1.6, 1.91, -0.79, -2.27, -2.03, -3.57, 2.56, 4.13, 0.11, 2.26],
        h::Vector{Float64} = [-1.85, -4.16, 0.48, -2.23, 3.47, 2.01, -4.28, -2.16, 4.44, -3.65, 0.7, -3.09, -0.44, -1.0, 4.87, 2.31, 2.12, 4.57, 4.33],
    )
        n=length(x)
        m=length(h)
        y=zeros(eltype(x),m+n-1)

        for i in 1:n
            for j in 1:m
                y[i+j-1]+=x[i]*h[j]
            end
        end
        energy(x)=sum(abs2,x)
        power(x)=energy(x)/length(x)
        return power(y)
    end
    rozwiazanie_5()
end

begin
    function rozwiazanie_6(;
        b::Vector{Float64} = [0.011462480980325568, -0.023286774917515088, 0.013007687894219806, 0.0, -0.013007687894219796, 0.023286774917515095, -0.011462480980325573],
        a::Vector{Float64} = [1.0, -4.509263613791788, 9.314468328784162, -11.108359369822477, 8.062489549268525, -3.378300657920887, 0.6500504498114961],
        x::Vector{Float64} = [0.82, 0.69, -0.91, 0.33, 0.92, -0.22, -0.6, -0.94, 0.63, -0.12, -0.64, -0.33, -0.99, -0.5, 0.99, 0.07, -0.12, 0.91, 0.68, -0.42, -0.73, -0.62, -0.19, 0.65, -0.66, -0.19, -0.39, -0.31, 0.59, 0.67, -0.43, -0.41, -0.55, -0.71, -0.85, 0.11, 0.88, -0.23, 0.94],
        L::Int = 53,
    )
        N=length(x)
        M=length(b)
        K=length(a)

        y=zeros(Float64, L)

        for n in range(0,L-1)
            for m in range(0,M-1)
                if n-m>=0&&n-m<N
                    y[n+1]+=b[m+1]*x[n-m+1]
                end
            end
            for k in range(1, K-1)
                if n-k>=0&&n-k<L
                    y[n+1]-=a[k+1]*y[n-k+1]
                end
            end
        end
        return sum(abs2,y)/length(y) 
    end
    rozwiazanie_6()
end

begin
    function rozwiazanie_7(;
        b::Vector{Float64} = [0.007919386289643194, 0.039596931448215966, 0.07919386289643193, 0.07919386289643193, 0.039596931448215966, 0.007919386289643194],
        a::Vector{Float64} = [1.0, -1.8764831434727918, 1.8767757816821435, -1.0056927445523511, 0.2949776269494561, -0.03615715933787459],
        F::Vector{Float64} = [0.02, 0.07, 0.18, 0.32, 0.36, 0.36],
    )
        omega=exp.(-2*pi*im*F)
        H=zeros(ComplexF64, length(F))

        for i in eachindex(F)
            B=0
            for j in eachindex(b)
                B+=b[j]*omega[i]^(length(b)-j)
            end
            A=0
            for j in eachindex(a)
                A+=a[j]*omega[i]^(length(a)-j)
            end

            H[i]=B/A
        end
        return sum(abs.(H))/length(H)
    end
    rozwiazanie_7()
end

begin
    using LinearAlgebra
    function rozwiazanie_8(;
        b::Vector{Float64} = [0.0003405376527201276, 0.0, -0.0020432259163207654, 0.0, 0.005108064790801914, 0.0, -0.006810753054402552, 0.0, 0.005108064790801914, 0.0, -0.0020432259163207654, 0.0, 0.0003405376527201276],
        a::Vector{Float64} = [1.0, -5.920416298382171, 18.306455655688325, -37.742313976224054, 57.21880651311693, -66.67208277503056, 61.035535435340854, -44.145119629311154, 25.06820151300991, -10.927121832573686, 3.498290822502564, -0.7464694812468923, 0.0837564796186789],
    )
        function roots(a)
        H=Matrix(I, length(a)-2,length(a)-2)
        Z=zeros(length(a)-2)
        H=vcat(Z',H)
        H=hcat(H,-1*reverse(a[2:end]))
        return eigvals(H)
        end

        p = roots(a)
        r = abs.(p)

        if all(r.<1)
            return 1
        elseif all(r.<=1) && any(r.==1)
            return 0
        else
            return -1
        end

    end
    rozwiazanie_8()
end

begin
    function rozwiazanie(;
        x::Vector{Float64} = [-2.7, 0.11, 2.64, 4.64, -1.83, -0.87, 3.38, -3.78, -2.09, 4.15, 3.53, -2.93, 3.57, -1.27, 4.26, -0.42, -3.03, -2.88, 3.94, 4.37, 4.68, 2.72, 1.32, -3.96, -0.86, 0.15, -0.71, 1.19, -0.83, 1.83, 2.23, 1.78, 3.93, 4.37, -1.66, -0.1, -4.14, -1.89, 0.86, -3.75, 2.84, -2.54, -1.26, 3.64, -0.17, 1.22, 3.07, 2.25, -4.37, -2.96, -2.2, 2.75, -0.5, -1.74, -1.56, 1.94, 0.41, 1.57, -3.0, -3.73, -3.54, 2.29],
        h::Vector{Float64} = [-3.9, 1.07, 3.97, -2.67, -0.78, 2.98, -0.6, 2.19, -1.67, -3.8, 0.05, 3.02, -1.15, 2.54, -3.17, 1.29, 4.76, 0.08, -2.85, 3.71, -1.75, -4.5, 3.5, -1.93, 1.26],
    )
        n = length(x)
        m=length(h)
        y=zeros(eltype(x), n+m-1)

        for i in 1:n
            for j in 1:m
                y[i+j-1]+=x[i]*h[j]
            end
        end

        return sum(abs2,y)/length(y)

    end
    rozwiazanie()
end

begin
    function rozwiazanie(;
        fp::Float64 = 371.9,
        t1::Float64 = -1.34,
        N::Int = 270,
    )
        ramp(t)=-2*rem(t,1,RoundNearest)
        g=ramp
        t=range(start=t1,step=(1/fp),length=N)
        y = 3.3*g.(0.9.*t.-1.6)
        return sum(abs2,y)
    end
    rozwiazanie()
end

begin
    using LinearAlgebra
    function rozwiazanie(;
        b::Vector{Float64} = [0.11924007078647217, -0.7154404247188331, 1.7886010617970824, -2.3848014157294433, 1.7886010617970824, -0.7154404247188331, 0.11924007078647217],
        a::Vector{Float64} = [1.0, -4.215903509342058, 8.272052828240115, -7.012478124658855, 3.347388152345055, -0.8391553455314389, 0.08927497638987063],
    )
        function roots(a)
            H=Matrix(I,length(a)-2,length(a)-2)
            Z=zeros(length(a)-2)
            H=vcat(Z',H)
            H=hcat(H, -1*reverse(a[2:end]))
            return eigvals(H)      
        end

        p = roots(a)
        r = abs.(p)

        if all(r.<1)
            return 1
        elseif all(r.<=1) && any(r.==0)
            return 0
        else
            return -1
        end

    end
    rozwiazanie()
end

begin
    function rozwiazanie(;
        a::Float64 = 0.0082,
        b::Float64 = 1.0,
        x::Vector{Float64} = [0.94926, 0.42669, 0.23637, 0.18887, 0.11045, 0.28089, 0.46013, 0.93288, 0.69554, 0.85314, 0.96581, 0.08434, 0.6572, 0.63884, 0.18461, 0.51244, 0.60146, 0.81924, 0.53871, 0.21207, 0.4304, 0.70065, 0.71191, 0.00816, 0.17876, 0.42875, 0.46085, 0.9843, 0.22277, 0.36716, 0.5844, 0.51761, 0.93245, 0.08242, 0.15711, 0.99558, 0.75051, 0.11896, 0.2011, 0.4524, 0.28808, 0.65272, 0.8948, 0.31259, 0.64442, 0.05085, 0.11709, 0.02025, 0.09915, 0.85736, 0.12699, 0.82834, 0.58764, 0.81855, 0.97916, 0.86368, 0.41174, 0.58675, 0.58487, 0.32495, 0.90567, 0.56876, 0.32057, 0.90586, 0.8669, 0.62648, 0.50512],
    )
        N=5
        L=range(start=a,stop=b,length=2^N)

        quantize(L)=x->L[argmin(abs.(-L.+x))]
        q=quantize(L)
        x_q=q.(x)
        error = x .- x_q

        return sum(abs2,error)

    end
    rozwiazanie()
end


begin
    function rozwiazanie(;
        m::Vector{Float64} = [4.5, 4.5044, 4.5088, 4.5132, 4.5176, 4.522, 4.5264, 4.5308, 4.5352, 4.5396, 4.544, 4.5484, 4.5528, 4.5572, 4.5616, 4.566, 4.5704, 4.5748, 4.5792, 4.5836, 4.588, 4.5924, 4.5968, 4.6012, 4.6056, 4.61, 4.6144, 4.6188, 4.6232, 4.6276, 4.632, 4.6364, 4.6408, 4.6452, 4.6496, 4.654, 4.6584, 4.6628, 4.6672, 4.6716, 4.676, 4.6804, 4.6848, 4.6892, 4.6936, 4.698, 4.7024, 4.7068, 4.7112, 4.7156, 4.72, 4.7244, 4.7288, 4.7332, 4.7376, 4.742, 4.7464, 4.7508, 4.7552, 4.7596, 4.764, 4.7684, 4.7728, 4.7772, 4.7816, 4.786, 4.7904, 4.7948, 4.7992, 4.8036, 4.808, 4.8124, 4.8168, 4.8212, 4.8256, 4.83, 4.8344],
        s::Vector{Float64} = [0.4824, 0.9277, 0.0675, 0.3302, 0.5384, 0.4798, 0.3492, 0.3208, 0.1075, 0.3637, 0.9866, 0.3807, 0.9057, 0.723, 0.7449, 0.9121, 0.745, 0.5732, 0.2049, 0.6747, 0.522, 0.8853, 0.617, 0.6249, 0.3009, 0.4296, 0.387, 0.0465, 0.8934, 0.5365, 0.1133, 0.5059, 0.8992, 0.2554, 0.4368, 0.587, 0.0348, 0.9464, 0.4662, 0.1969, 0.7869, 0.2541, 0.5529, 0.7636, 0.579, 0.3711, 0.5421, 0.6928, 0.6965, 0.5748, 0.6992, 0.1567, 0.0186, 0.8637, 0.5639, 0.2516, 0.2016, 0.0451, 0.8187, 0.2606, 0.5699, 0.4122, 0.6175, 0.9217, 0.366, 0.4075, 0.2409, 0.1617, 0.4374, 0.3607, 0.7809, 0.8644, 0.2402, 0.0782, 0.4636, 0.1338, 0.2799],
        t::Vector{Float64} = [4.80844, 4.5946, 4.78292, 4.60164, 4.55016, 4.61748, 4.80756, 4.74156, 4.6078, 4.66808, 4.50176],
    )
        n=length(m)
        g=0

        for i in eachindex(t)
            for j in 1:n
                g+=s[j]*sinc((t[i]-m[j])/(m[2]-m[1]))
            end
        end
        return sum(g)
    end
    rozwiazanie()
end

begin
    function rozwiazanie(;
        zz::Vector{ComplexF64} = ComplexF64[0.9829100242415407 - 0.18408662158205186im, 0.9204499719168443 + 0.3908603960473362im, 0.9829100242415407 + 0.18408662158205186im, 0.9204499719168443 - 0.3908603960473362im, 0.9781950242963277 - 0.2076884552446446im, 0.9372554278866075 + 0.3486434609986142im, 0.9781950242963277 + 0.2076884552446446im, 0.9372554278866075 - 0.3486434609986142im, 0.9629115554022726 + 0.2698172279021046im, 0.9629115554022726 - 0.2698172279021046im],
        pp::Vector{ComplexF64} = ComplexF64[0.8782576236590827 + 0.4474097611262984im, 0.9828043826680154 - 0.1555376252250261im, 0.8782576236590827 - 0.4474097611262984im, 0.9828043826680154 + 0.1555376252250261im, 0.7740498528633705 + 0.4634305787766163im, 0.9655822514786966 - 0.12780485663771646im, 0.7740498528633705 - 0.4634305787766163im, 0.9655822514786966 + 0.12780485663771646im, 0.40964405967328504 - 0.0im, 0.9136626342473875 + 0.0im],
        k::Float64 = 0.5660831003209155,
        F::Vector{Float64} = [0.12, 0.19, 0.41, 0.5],
    )
        omega=exp.(2*pi*im*F)
        H=zeros(ComplexF64, length(F))

        for i in eachindex(H)
            B=1
            for j in eachindex(zz)
                B*=omega[i]-zz[j]
            end
            A=1
            for j in eachindex(pp)
                A*=omega[i]-pp[j]
            end
        H[i]=k*B/A
        end
        return sum(angle.(H))/length(H)
    end
    rozwiazanie()
end

begin
    function rozwiazanie_1(;
        fp::Float64 = 466.99,
        t1::Float64 = 2.28,
        N::Int = 525,
    )
        ramp(t) = 2*rem(t,1,RoundNearest)
        g=ramp
        t=range(start=t1,step=(1/fp),length=N)
        y=2.8*g.(3.0.*t.-3.5)

        energy(x)=sum(abs2,x)
        power(x)=energy(x)/length(x)

        return power(y)

    end
    rozwiazanie_1()
end

begin
    function rozwiazanie_2(;
        m::Vector{Float64} = [3.6, 3.6054, 3.6108, 3.6162, 3.6216, 3.627, 3.6324, 3.6378, 3.6432, 3.6486, 3.654, 3.6594, 3.6648, 3.6702, 3.6756, 3.681, 3.6864, 3.6918, 3.6972, 3.7026, 3.708, 3.7134, 3.7188, 3.7242, 3.7296, 3.735, 3.7404, 3.7458, 3.7512, 3.7566, 3.762, 3.7674, 3.7728, 3.7782, 3.7836, 3.789, 3.7944, 3.7998, 3.8052, 3.8106, 3.816, 3.8214, 3.8268, 3.8322, 3.8376, 3.843, 3.8484, 3.8538, 3.8592, 3.8646, 3.87, 3.8754, 3.8808, 3.8862, 3.8916, 3.897, 3.9024, 3.9078, 3.9132, 3.9186, 3.924, 3.9294, 3.9348, 3.9402, 3.9456, 3.951, 3.9564, 3.9618, 3.9672, 3.9726, 3.978, 3.9834, 3.9888, 3.9942],
        s::Vector{Float64} = [0.6211, 0.3169, 0.6094, 0.2376, 0.935, 0.0011, 0.499, 0.7914, 0.1827, 0.6004, 0.4861, 0.4532, 0.8732, 0.5253, 0.6884, 0.2663, 0.2128, 0.1633, 0.7923, 0.8022, 0.3975, 0.8357, 0.9724, 0.1682, 0.4454, 0.0453, 0.8629, 0.1823, 0.5345, 0.7173, 0.527, 0.6338, 0.0814, 0.5291, 0.8324, 0.7512, 0.1899, 0.9194, 0.0663, 0.1318, 0.5359, 0.6399, 0.0449, 0.5251, 0.9565, 0.7975, 0.1471, 0.9973, 0.8573, 0.5482, 0.4689, 0.3313, 0.3884, 0.1387, 0.7299, 0.115, 0.6067, 0.2444, 0.5489, 0.914, 0.2307, 0.5409, 0.2251, 0.4613, 0.7654, 0.5313, 0.5137, 0.4319, 0.7416, 0.2971, 0.762, 0.1223, 0.7465, 0.1198],
        t::Vector{Float64} = [3.8916, 3.71286, 3.91914, 3.75984],
    )
        n=length(m)
        g=0

        for i in eachindex(t)
            for j in 1:n
                g+=s[j]*sinc((t[i]-m[j])/(m[2]-m[1]))
            end
        end

    return sum(g) 
    end

    rozwiazanie_2()
    
end
begin
function rozwiazanie_3(;
    a::Float64 = -0.89,
    b::Float64 = -0.65,
    x::Vector{Float64} = [-0.88795, -0.88676, -0.88356, -0.87858, -0.87271, -0.86717, -0.86307, -0.86095, -0.86061, -0.8612, -0.86151, -0.86046, -0.85747, -0.85268, -0.84694, -0.84141, -0.83718, -0.83486, -0.83432, -0.83478, -0.83509, -0.83416, -0.83136, -0.82678, -0.82116, -0.81563, -0.81129, -0.80877, -0.80804, -0.80838, -0.80868, -0.80785, -0.80524, -0.80085, -0.79536, -0.78985, -0.7854, -0.7827, -0.78178, -0.78199, -0.78227, -0.78155, -0.77911, -0.77491, -0.76955, -0.76405, -0.75951, -0.75664, -0.75553, -0.75561, -0.75587, -0.75524, -0.75298, -0.74896, -0.74372, -0.73825, -0.73362, -0.73058, -0.72929, -0.72925, -0.72948, -0.72894, -0.72684, -0.723, -0.71789, -0.71244, -0.70773, -0.70453, -0.70307, -0.70289, -0.7031, -0.70263, -0.70069, -0.69702, -0.69204, -0.68663, -0.68184, -0.67849, -0.67685, -0.67655, -0.67672, -0.67632, -0.67453, -0.67103, -0.66618, -0.66081, -0.65596, -0.65246],
)
    N=7
    L=range(start=a,stop=b,length=2^N)

    quantize(L)=x->L[argmin(abs.(-L.+x))]
    q = quantize(L)
    x_q = q.(x)
    error = x .- x_q

    return sum(abs2, error)/length(error)
end
rozwiazanie_3()
end

begin
    function dft(x)
        N=length(x)
        zeta=exp.(-2*pi*im/N)

        [
            sum(x[n+1]*zeta^(n*k) for n in 0:N-1) for k in 0:N-1
        ]
        
    end

    function rozwiazanie_4(;
        fp::Int = 1050,
        x::Vector{ComplexF64} = ComplexF64[1.3 + 0.25im, 0.28 - 0.44im, -0.03 + 0.34im, 0.0 + 0.28im, -1.65 + 0.43im, 0.59 - 0.6im, -0.63 + 0.96im, 0.79 + 0.19im, -0.45 + 0.66im, 0.72 - 0.04im, -1.37 + 1.13im, 1.12 - 0.37im, 0.2 + 0.07im, 1.18 + 0.54im, 1.34 - 0.12im, -0.51 + 1.04im, -0.43 + 0.82im, 0.21 - 0.14im, -1.1 - 0.33im, -0.32 - 0.35im, 0.18 + 0.37im, -0.5 - 0.04im, -0.54 + 0.07im, 0.65 + 0.96im, 0.88 - 0.49im],
        f::Vector{Int} = [-420, -378, -42, 126, 210],
    )
        x_dft= dft(x)
        f_dft = f./(fp/length(x))
        result = zeros(Float64, length(f_dft))

        for i in eachindex(f_dft)
            index::Int64=f_dft[i]
            if index<0
                index+=length(x)
            end
            result[i]=angle.(x_dft[index+1])
        end
        return sum(result)
    end
    rozwiazanie_4()

end

begin
    function rozwiazanie_5(;
        x::Vector{Float64} = [-3.84, 2.65, 0.78, 1.56, 4.41, 0.54, 3.11, -2.77, -4.79, -2.19, -0.18, 3.74, 1.47, 1.64, -0.54, -0.5, 0.14, -2.95, 4.48, 4.13, 1.57, -0.5, 3.22, -3.49, 2.14, 1.3, 4.45, 4.69, 0.8, 2.79, -1.86, 2.95, -2.32, -2.65, -0.92, 0.53, -4.45, 2.64, -0.97, -0.35, -0.83, 2.04, 1.64, 2.61, -4.22, 1.92, -4.65, 1.85, -4.63, -2.15, 1.38, -0.71, 1.5, -2.98, 2.51, 3.66, 2.88],
        h::Vector{Float64} = [-2.6, -2.44, 1.98, -4.94, -2.48, 1.78, -1.5, 3.23, 3.64, -2.67, 4.8, -4.36, -4.5],
    )
        n=length(x)
        m=length(h)
        y = zeros(eltype(x), m+n-1)

        for i in 1:n
            for j in 1:m
                y[i+j-1]+=x[i]*h[j]
            end
        end
        return sum(abs2, y)
    end
    rozwiazanie_5()
end

begin
    function rozwiazanie_6(;
        b::Vector{Float64} = [0.6531647686376614, -7.69568795461702, 41.69889751237998, -137.39593053423894, 306.59974700749416, -488.13970597817007, 568.5590303585246, -488.1397059781699, 306.59974700749405, -137.39593053423883, 41.698897512379936, -7.695687954617008, 0.6531647686376603],
        a::Vector{Float64} = [1.0, -10.948231666244657, 55.144641798582256, -168.9706392709237, 350.7962966478457, -519.8389423351276, 563.8242029317553, -450.9852444278231, 264.0277355324194, -110.33726748931296, 31.2431478099548, -5.382323744620109, 0.426624214990888],
        x::Vector{Float64} = [-0.78, -0.36, -0.29, 0.87, -0.65, -0.88, 0.82, 0.97, 0.93, -0.54, -0.2, 0.87, 0.64, -0.16, -0.27, 0.33, 0.67, -0.76, -0.53, -0.51, -0.67, 0.07, 0.34, 0.98, 0.49, 0.1, 0.23],
        L::Int = 55,
    )
        N=length(x)
        M=length(b)
        K=length(a)

        y=zeros(Float64,L)

        for n in range(0,L-1)
            for m in range(0,M-1)
                if n-m>=0&&n-m<N
                    y[n+1]+=b[m+1]*x[n-m+1]
                end
            end
            for k in range(1,K-1)
                if n-k>=0&&n-k<L
                    y[n+1]-=a[k+1]*y[n-k+1]
                end
            end
        end
        mean(x)=sum(x)/length(x)
        return mean(y)
    end
    rozwiazanie_6()
end

begin
    function rozwiazanie_7(;
        zz::Vector{ComplexF64} = ComplexF64[0.7421134977376951 + 0.6702742397523im, 0.7421134977376951 - 0.6702742397523im, 0.7421134977376951 + 0.6702742397523im, 0.7421134977376951 - 0.6702742397523im, 0.7421134977376951 + 0.6702742397523im, 0.7421134977376951 - 0.6702742397523im, 0.7421134977376951 + 0.6702742397523im, 0.7421134977376951 - 0.6702742397523im, 0.7421134977376951 + 0.6702742397523im, 0.7421134977376951 - 0.6702742397523im, 0.7421134977376951 + 0.6702742397523im, 0.7421134977376951 - 0.6702742397523im],
        pp::Vector{ComplexF64} = ComplexF64[0.5792215831629044 - 0.7981722228293716im, 0.8368549158190856 + 0.5305153139940463im, 0.5792215831629044 + 0.7981722228293716im, 0.8368549158190856 - 0.5305153139940463im, 0.496391411201156 - 0.7904067959607454im, 0.8328718620446665 + 0.477925438829164im, 0.496391411201156 + 0.7904067959607454im, 0.8328718620446665 - 0.477925438829164im, 0.21987853111113134 - 0.6026347713014355im, 0.7847866256904952 + 0.30073166728593625im, 0.21987853111113134 + 0.6026347713014355im, 0.7847866256904952 - 0.30073166728593625im],
        k::Float64 = 0.35529385381451745,
        F::Vector{Float64} = [0.04, 0.16, 0.19],
    )
        omega=exp.(2*pi*im*F)
        H=zeros(ComplexF64, length(F))

        for i in eachindex(F)
            B=1
            for j in eachindex(zz)
                B*=omega[i]-zz[j]
            end
            A=1
            for j in eachindex(pp)
                A*=omega[i]-pp[j]
            end
            H[i]=k*B/A
        end
        
        return sum(angle.(H))/length(H)

    end
rozwiazanie_7()
end

begin
    function rozwiazanie_7(;
        b::Vector{Float64} = [0.0012134699385620328, 0.0, -0.0036404098156860984, 0.0, 0.0036404098156860984, 0.0, -0.0012134699385620328],
        a::Vector{Float64} = [1.0, -4.629852936815343, 9.853156428219352, -12.071551423750417, 8.97559335871108, -3.8419968785659515, 0.7565409983845305],
        F::Vector{Float64} = [0.19, 0.41, 0.49],
    )
        omega= exp.(2*pi*im*F)
        H = zeros(ComplexF64, length(F))

        for i in eachindex(F)
            B=0
            for j in eachindex(b)
                B+=b[j]*omega[i]^(length(b)-j)
            end
            A=0
            for j in eachindex(a)
                A+=a[j]*omega[i]^(length(a)-j)
            end

        H[i]=B/A
        end
        return sum(abs.(H))/length(H)
    end

    rozwiazanie_7()

    
end

begin
    function rozwiazanie_8(;
        b::Vector{Float64} = [0.764371423807065, -2.293114271421195, 2.293114271421195, -0.764371423807065],
        a::Vector{Float64} = [1.0, -2.500227837008086, 2.0634333487173286, -0.5513102047311089],
    )
        function roots(a)
            H = Matrix(I, length(a)-2, length(a)-2)
            Z=zeros(length(a)-2)
            H=vcat(Z',H)
            H=hcat(H, -1*reverse(a[2:end]))
            return eigvals(H)
            
        end

        p = roots(a)
        r=abs.(p)

        if all(r.<1)
            return 1
        elseif all(r.<=1)&&any(r.==1)
            return 0
        else
            return -1
        end

    end
    rozwiazanie_8()
end
begin
    function rozwiazanie_5(;
        x::Vector{Float64} = [2.99, -1.0, -3.11, 2.22, 0.82, -1.2, -4.64, -1.04, 3.98, 4.4, -1.52, 1.44, 4.72, -0.68, -1.43, -3.44, -1.39, -3.0, 2.41, -1.67, 3.67, -0.02, 4.93, -0.53, 1.8, -4.54, -3.72, 3.57, 3.12, 1.53, 1.81, -2.63, -3.5, 4.62, 3.91, 3.37, -0.51, -1.79, 3.22, -0.59, 4.82, 1.06, 2.02, 4.87, -3.48, -4.79, -4.07, 0.81, -1.94, 3.94, -0.43, -1.08, -0.93, -2.35, -4.84, 2.84, 3.18, -2.43, -2.13, 2.39, -4.84, 2.35, 3.95, 4.53, 3.62, -0.18, -2.01, 3.7, 0.22, 3.09, -3.45, -4.78],
        h::Vector{Float64} = [4.83, 5.0, -2.25, 2.03, -4.25, -4.77, -3.44, 4.72, 1.05, -4.1],
    )
        n=length(x)
        m= length(h)
        y = zeros(eltype(x),m+n-1)

        for i in 1:n
            for j in 1:m
                y[i+j-1]+=x[i]*h[j]
            end
        end

        return sum(y)/length(y)
                
    end
    rozwiazanie_5()
end