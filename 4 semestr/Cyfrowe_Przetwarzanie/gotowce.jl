begin
    function rozwiazanie_1(;
        fp::Float64=385.71,
        t1::Float64=5.39,
        N::Int=54,
    )
    #ZFUNKCJI##################
    ramp_wave(t::Real)::Real = 2 * rem(t, 1, RoundNearest)
    sawtooth_wave(t::Real)::Real = -2 * rem(t, 1, RoundNearest)
    triangular_wave(t::Real)::Real = ifelse(mod(t + 1 / 4, 1.0) < 1 / 2, 4mod(t + 1 / 4, 1.0) - 1, -4mod(t + 1 / 4, 1.0) + 3)
    square_wave(t::Real)::Real = ifelse(mod(t, 1) < 0.5, 1, -1)
    energy(x::AbstractVector)::Real = sum(abs2, x)
    power(x::AbstractVector)::Real = energy(x) / length(x)
    rms(x::AbstractVector)::Real = sqrt(power(x))
    ############################
        g = ramp_wave # ramp/sawtooth/triangular/square
        t = range(; start=t1, step=(1 / fp), length=N)
        y = 1.8 * g.(4.8 .* t .- 0.5)

        return rms(y) # energy/power/rms
        1.1370311872575378
    end
    out_1 = rozwiazanie_1()
end

begin
    function rozwiazanie_2(;
        m::Vector{Float64} = [-3.0, -2.9926, -2.9852, -2.9778, -2.9704, -2.963, -2.9556, -2.9482, -2.9408, -2.9334, -2.926, -2.9186, -2.9112, -2.9038, -2.8964, -2.889, -2.8816, -2.8742, -2.8668, -2.8594, -2.852, -2.8446, -2.8372, -2.8298, -2.8224, -2.815, -2.8076, -2.8002, -2.7928, -2.7854, -2.778, -2.7706, -2.7632, -2.7558, -2.7484, -2.741, -2.7336, -2.7262, -2.7188, -2.7114, -2.704, -2.6966, -2.6892, -2.6818, -2.6744, -2.667, -2.6596, -2.6522, -2.6448, -2.6374, -2.63, -2.6226, -2.6152, -2.6078, -2.6004, -2.593, -2.5856, -2.5782, -2.5708, -2.5634, -2.556, -2.5486, -2.5412, -2.5338, -2.5264, -2.519, -2.5116, -2.5042, -2.4968, -2.4894, -2.482, -2.4746, -2.4672, -2.4598, -2.4524, -2.445, -2.4376, -2.4302, -2.4228, -2.4154, -2.408, -2.4006, -2.3932, -2.3858, -2.3784, -2.371, -2.3636, -2.3562, -2.3488, -2.3414, -2.334, -2.3266, -2.3192, -2.3118, -2.3044, -2.297, -2.2896, -2.2822],
        s::Vector{Float64} = [0.8462, 0.9923, 0.1581, 0.7285, 0.7401, 0.7225, 0.0925, 0.4899, 0.8397, 0.5089, 0.8825, 0.4654, 0.5088, 0.8717, 0.4645, 0.9893, 0.263, 0.9315, 0.4474, 0.0458, 0.6997, 0.6691, 0.4338, 0.8745, 0.1735, 0.9984, 0.9023, 0.4652, 0.8608, 0.23, 0.9926, 0.8294, 0.1336, 0.1027, 0.5556, 0.8655, 0.6054, 0.9413, 0.2269, 0.4531, 0.5729, 0.8758, 0.4368, 0.2521, 0.7654, 0.5941, 0.8956, 0.5229, 0.6586, 0.9607, 0.0901, 0.2298, 0.5773, 0.5144, 0.6116, 0.8524, 0.8459, 0.0805, 0.027, 0.4181, 0.1662, 0.5296, 0.1056, 0.707, 0.3996, 0.0227, 0.6636, 0.8907, 0.0918, 0.6458, 0.9822, 0.381, 0.6439, 0.4888, 0.8281, 0.6181, 0.464, 0.0171, 0.817, 0.0217, 0.7273, 0.7651, 0.178, 0.7017, 0.0521, 0.3086, 0.033, 0.3367, 0.3192, 0.0518, 0.4592, 0.0669, 0.7391, 0.5242, 0.6444, 0.5333, 0.2345, 0.0036],
        t::Vector{Float64} = [-2.76838, -2.55896, -2.5375, -2.5523, -2.31032, -2.5116, -2.73212, -2.6744, -2.297, -2.34584, -2.34066, -2.55896],
    )
        #4.869119952407591
        #missing
        n=length(m)
        g=0
    
    
        for i in eachindex(t)
            for j in 1:n
    
            g+=s[j]*sinc((t[i]-m[j])/(m[2]-m[1]))
            end
        end
    
        return g
    end
    
    rozwiazanie_2()
end

begin
    function rozwiazanie_3(;
        a::Float64=-0.88,
        b::Float64=1.1,
        x::Vector{Float64}=[0.7, 0.67743, 0.65485, 0.63228, 0.60971, 0.58713, 0.56456, 0.54199, 0.51941, 0.49684, 0.47427, 0.45169, 0.42912, 0.40655, 0.38397, 0.3614, 0.33883, 0.31625, 0.29368, 0.27111, 0.24853, 0.22596, 0.20339, 0.18081, 0.15824, 0.13567, 0.11309, 0.09052, 0.06795, 0.04537, 0.0228, 0.00023, -0.02235, -0.04492, -0.06749, -0.09007, -0.11264, -0.13521, -0.15779, -0.18036, -0.20293, -0.22551, -0.24808, -0.27065, -0.29323, -0.3158, -0.33837, -0.36095, -0.38352, -0.40609, -0.42867, -0.45124, -0.47381, -0.49639, -0.51896, -0.54153, -0.56411, -0.58668, -0.60926, -0.63183, -0.6544, -0.67698, -0.69955, -0.72212, -0.7447, -0.76727, -0.78984, -0.81242, -0.83499, -0.85756, -0.88014, 1.09729, 1.07472, 1.05214, 1.02957, 1.007, 0.98442, 0.96185],
    )
        N = 5 # N-bitowy kwantyzator
        L = range(; start=a, stop=b, length=2^N)
    
        quantize(L::AbstractVector)::Function = x -> L[argmin(abs.(-L .+ x))]
        q = quantize(L)
        x_quantized = q.(x)
        quantization_error = x .- x_quantized
    
        energy(x::AbstractVector)::Real = sum(abs2, x)
        power(x::AbstractVector)::Real = energy(x) / length(x)
        rms(x::AbstractVector)::Real = sqrt(power(x))
    
        return energy(quantization_error) # energy/power/rms
        0.025959334412591073
    end
    out_3 = rozwiazanie_3()
    
end

begin
    function rozwiazanie_4(;
        fp::Int = 1330,
        x::Vector{ComplexF64} = ComplexF64[-0.19 - 0.25im, 0.6 + 0.28im, -0.99 + 0.4im, 0.42 - 0.15im, 0.57 - 0.76im, -0.47 - 0.74im, 0.81 - 0.28im, -0.54 - 0.76im, 0.23 + 0.28im, -0.6 + 0.35im, -0.38 + 0.28im, 0.45 + 0.64im, -0.45 + 1.04im, 1.25 - 0.39im, -0.84 - 2.55im, 0.93 - 0.16im, -0.13 - 1.62im, -0.27 + 0.25im, 0.73 + 0.95im, -0.0 + 0.39im, 0.84 - 0.51im, -1.25 - 1.03im, 1.12 - 0.1im, 0.87 - 0.15im, -0.22 - 0.72im, 0.54 - 0.04im, -0.44 + 1.54im, 0.49 - 0.7im, -1.47 - 1.39im, 0.31 + 0.47im, -0.23 - 0.66im, 1.31 + 0.56im, 0.7 - 0.19im, -0.75 - 0.19im, -0.43 + 0.24im],
        f::Vector{Int} = [-608, 228, 304, 342, 532],
    )
        #1.0990464172144918
        #missing
    
        x_dft=dft(x)
        f_dft=f./(fp/length(x))
        result=zeros(Float64, length(f_dft))
    
        for i in eachindex(f_dft)
            index::Int64=f_dft[i]
            if index<0
                index=length(x)+index
            end
            #result[i]=angle(x_dft[index+1])
            result[i]=abs(x_dft[index+1])/length(x)
    
        end
    return sum(result)
        
    end
    
    function dft(x)
        N=length(x)
        zeta=exp(-2*pi*im/N)
    
        [
            sum((x[n+1]*zeta^(n*k) 
            for n in 0:N-1)
            ) for k in 0:N-1
    
        ]
    end
    
    rozwiazanie_4()
end

begin
    function rozwiazanie_5(;
        x::Vector{Float64} = [2.33, 2.24, -0.41, -4.5, -4.96, 1.57, 1.46, 1.73, 1.98, -1.39, -1.38, 4.9, -4.06, -3.88, 1.44, -3.99, -2.69, -4.39, 2.31, 3.83, 1.17, -2.52, -1.59, 2.38, 2.3, -2.61, -0.85, 1.14, 1.43, 2.68, 1.69, 0.32, -0.28, -1.71, 1.63, 2.69, -1.86, 3.28, -3.14, 0.26, -4.08, 1.46, 0.94, 3.47, 3.47, 0.25, -4.52, -2.68, -1.62, 3.26, 0.21, -3.92, 4.36, -3.67, 4.46, 1.43, 2.42, 1.69, 3.1, -4.09, -2.43, -3.84, -1.61, 4.77, -3.8, 2.76, 2.72, 3.97, -4.9, 2.95, -1.11],
        h::Vector{Float64} = [-2.31, -1.07, -4.13, -0.6, 1.47, -0.56, 2.73, -1.33, 3.91, -3.99, 3.34, -4.51, 4.82, 0.11, -0.19, 0.32, 0.85, -4.97, 1.5, 2.36],
    )
        #114026.70335463
        #missing
    
        n=length(x)
        m=length(h)
        y=zeros(eltype(x), n+m-1)
        
        for i in 1:n
            for j in 1:m
                y[i+j-1]+=x[i]*h[j]
            end
        end
    
        return sum(y.^2)
    end
    
    rozwiazanie_5()
end

begin
    function rozwiazanie_6(;
        b::Vector{Float64} = [0.033194692256649484, -0.07172135788881488, 0.09489407529227799, -0.0717213578888149, 0.03319469225664949],
        a::Vector{Float64} = [1.0, 1.5921708442156168, 1.3135098485645686, 0.49616221058458576, 0.07954938181884069],
        x::Vector{Float64} = [-0.56, -0.74, -0.59, -0.37, 0.43, -0.96, -0.25, -0.96, 0.0, -0.38, 0.17, 0.74, 0.16, 0.07, 0.47, 0.46, -0.53, -0.95],
        L::Int = 57,
    )
        #-0.0002646657612752812
        #missing
        N=length(x)
        M=length(b)
        K=length(a)
    
        y=zeros(Float64,L)
    
        for n in range(0,L-1)
            for m in range(0, M-1)
                if n-m>=0&&n-m<N
                    y[n+1]+=b[m+1]*x[n-m+1]
                end
    
            end
            
            for k in range(1,K-1)
                if n-k>=0&&n-k<L
                    y[n+1]-=a[k+1]*y[n-k+1]
                end
            end
        end
    
        return sum(y)/length(y)
        
    
    end
    
    rozwiazanie_6()
end

function rozwiazanie_7(;
    b::Vector{Float64} = [0.006005185082893759, -0.04160245521458926, 0.15290657340886743, -0.37765802967112655, 0.6909181913115076, -0.9782664937537238, 1.0963665198516366, -0.9782664937537237, 0.6909181913115074, -0.3776580296711265, 0.15290657340886743, -0.04160245521458926, 0.0060051850828937575],
    a::Vector{Float64} = [1.0, -7.203773759410954, 27.32567655574941, -68.93603776862756, 127.410557760795, -180.14958598822352, 199.25010622879486, -173.3681456053947, 117.99682949456863, -61.43646338385362, 23.434288038373953, -5.944683707625929, 0.794163081900995],
    F::Vector{Float64} = [0.06, 0.07, 0.16, 0.33, 0.4, 0.4],
)
    #0.48754455434789995
    #missing

    omega=exp.(2*pi*im*F)

    H=zeros(ComplexF64, length(F))

    for i in eachindex(F)
        B=0
        for j in eachindex(b)
            B+=b[j]*omega[i]^(length(b)-j)
        end

        A=0
        for j in eachindex(a)
            A+=a[j]*omega[i]^(length(a)-j)
        end

        H[i]=B/A
    end

    return sum(angle.(H)/length(H))
end

rozwiazanie_7()

function rozwiazanie_7(;
    zz::Vector{ComplexF64} = ComplexF64[1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im],
    pp::Vector{ComplexF64} = ComplexF64[0.6701939367751139 - 0.6489278834033337im, 0.4615448869440356 + 0.7927714869863219im, 0.6701939367751139 + 0.6489278834033337im, 0.4615448869440356 - 0.7927714869863219im, 0.5357004078881282 - 0.6629989449417352im, 0.5357004078881282 + 0.6629989449417352im],
    k::Float64 = 0.00289819463372143,
    F::Vector{Float64} = [0.12, 0.24, 0.41, 0.44, 0.48],
)
    #0.14602268573773702
    #missing

    H=zeros(ComplexF64, length(F))

    omega = exp.(2*pi*im*F)
    for i in eachindex(H)
        B=1
        for j in eachindex(zz)
            B*=omega[i]-zz[j]
        end

        A=1
        for j in eachindex(pp)
            A*=omega[i]-pp[j]
        end

        H[i]=k*B/A
    end

    return sum(abs.(H)/length(H))
end

rozwiazanie_7()

begin
    using LinearAlgebra
    function rozwiazanie_8_1(;
        b::Vector{Float64}=[0.20496999142745434, -1.0248499571372718, 2.0496999142745436, -2.0496999142745436, 1.0248499571372718, -0.20496999142745434],
        a::Vector{Float64}=[1.0, -2.04328699669025, 2.205686901762555, -1.0925050400038385, 0.2795267139181644, 0.06196592669626961],
    )
        function roots(a::AbstractVector)::Vector
            H = Matrix(I, length(a) - 2, length(a) - 2)
            Z = zeros(length(a) - 2)
            H = vcat(Z', H)
            H = hcat(H, -1 * reverse(a[2:end]))
            return eigvals(H)
        end
        p = roots(a)
        radii = abs.(p)
        if all(radii .< 1)
            return 1.0
        elseif all(radii .<= 1) && any(radii .== 1)
            return 0.0
        else
            return -1.0
        end
        1.0
        stable
    end
    out_8 = rozwiazanie_8_1()
end

# wariant z,p,k
begin
    function rozwiazanie_8_2(;
        z::Vector{ComplexF64}=ComplexF64[0.9632631043548601+0.2685594753283481im, 0.9632631043548601-0.2685594753283481im, 0.9632631043548601+0.2685594753283481im, 0.9632631043548601-0.2685594753283481im, 0.9632631043548601+0.2685594753283481im, 0.9632631043548601-0.2685594753283481im, 0.9632631043548601+0.2685594753283481im, 0.9632631043548601-0.2685594753283481im, 0.9632631043548601+0.2685594753283481im, 0.9632631043548601-0.2685594753283481im],
        p::Vector{ComplexF64}=ComplexF64[0.9374548821453359-0.34810679962028074im, 0.9614739634351532+0.20095615586824897im, 0.9093219192859163+0.33766013615801665im, 0.9614739634351532-0.20095615586824897im, 0.8826481683827513-0.28771647831629865im, 0.9251374712100688+0.20909477610205304im, 0.8826481683827513+0.28771647831629865im, 0.9251374712100688-0.20909477610205304im, 0.892983758401963-0.2380350661011338im, 0.892983758401963+0.2380350661011338im],
        k::Float64=0.7753165952469473,
    )
        radii = abs.(p)
        if all(radii .< 1)
            return 1.0
        elseif all(radii .<= 1) && any(radii .== 1)
            return 0.0
        else
            return -1.0
        end
        0.0
        semistable
    end
    out_8 = rozwiazanie_8_2()
end